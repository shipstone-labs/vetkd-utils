
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function () {
    'use strict';

    (function() {
        const env = {"DFX_NETWORK":"local","NODE_ENV":"development","ENCRYPTED_NOTES_RUST_CANISTER_ID":"be2us-64aaa-aaaaa-qaabq-cai","INTERNET_IDENTITY_CANISTER_ID":"bkyz2-fmaaa-aaaaa-qaaaq-cai","VETKD_SYSTEM_API_CANISTER_ID":"nn664-2iaaa-aaaao-a3tqq-cai","WWW_CANISTER_ID":"br5f7-7uaaa-aaaaa-qaaca-cai"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe$1(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe$1(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe$1(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }
    function split_css_unit(value) {
        const split = typeof value === 'string' && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
        return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    // Needs to be written like this to pass the tree-shake-test
    'WeakMap' in globals ? new WeakMap() : undefined;
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash$3(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash$3(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately before the component is unmounted.
     *
     * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
     * only one that runs inside a server-side component.
     *
     * https://svelte.dev/docs#run-time-svelte-ondestroy
     */
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        const options = { direction: 'in' };
        let config = fn(node, params, options);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config(options);
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        const options = { direction: 'out' };
        let config = fn(node, params, options);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config(options);
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        const updates = [];
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                // defer updates until all the DOM shuffling is done
                updates.push(() => block.p(child_ctx, dirty));
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        run_all(updates);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    const _boolean_attributes = [
        'allowfullscreen',
        'allowpaymentrequest',
        'async',
        'autofocus',
        'autoplay',
        'checked',
        'controls',
        'default',
        'defer',
        'disabled',
        'formnovalidate',
        'hidden',
        'inert',
        'ismap',
        'loop',
        'multiple',
        'muted',
        'nomodule',
        'novalidate',
        'open',
        'playsinline',
        'readonly',
        'required',
        'reversed',
        'selected'
    ];
    /**
     * List of HTML boolean attributes (e.g. `<input disabled>`).
     * Source: https://html.spec.whatwg.org/multipage/indices.html
     */
    new Set([..._boolean_attributes]);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init$3(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.1' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    function construct_svelte_component_dev(component, props) {
        const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
        try {
            const instance = new component(props);
            if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
                throw new Error(error_message);
            }
            return instance;
        }
        catch (err) {
            const { message } = err;
            if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
                throw new Error(error_message);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier} [start]
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=} start
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0 && stop) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let started = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe$1(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (started) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            started = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
                // We need to set this to false because callbacks can still happen despite having unsubscribed:
                // Callbacks might already be placed in the queue which doesn't know it should no longer
                // invoke this derived store.
                started = false;
            };
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
      if (n.__esModule) return n;
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function a () {
    			if (this instanceof a) {
    				var args = [null];
    				args.push.apply(args, arguments);
    				var Ctor = Function.bind.apply(f, args);
    				return new Ctor();
    			}
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var buffer = {};

    var base64Js = {};

    base64Js.byteLength = byteLength;
    base64Js.toByteArray = toByteArray;
    base64Js.fromByteArray = fromByteArray;

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray (b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      var i;
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }

    var ieee754$1 = {};

    ieee754$1.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    };

    ieee754$1.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };

    (function (exports) {

    	var base64 = base64Js;
    	var ieee754 = ieee754$1;
    	var customInspectSymbol =
    	  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    	    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    	    : null;

    	exports.Buffer = Buffer;
    	exports.SlowBuffer = SlowBuffer;
    	exports.INSPECT_MAX_BYTES = 50;

    	var K_MAX_LENGTH = 0x7fffffff;
    	exports.kMaxLength = K_MAX_LENGTH;

    	/**
    	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
    	 *   === true    Use Uint8Array implementation (fastest)
    	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
    	 *               implementation (most compatible, even IE6)
    	 *
    	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
    	 * Opera 11.6+, iOS 4.2+.
    	 *
    	 * We report that the browser does not support typed arrays if the are not subclassable
    	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
    	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
    	 * for __proto__ and has a buggy typed array implementation.
    	 */
    	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

    	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    	    typeof console.error === 'function') {
    	  console.error(
    	    'This browser lacks typed array (Uint8Array) support which is required by ' +
    	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
    	  );
    	}

    	function typedArraySupport () {
    	  // Can typed array instances can be augmented?
    	  try {
    	    var arr = new Uint8Array(1);
    	    var proto = { foo: function () { return 42 } };
    	    Object.setPrototypeOf(proto, Uint8Array.prototype);
    	    Object.setPrototypeOf(arr, proto);
    	    return arr.foo() === 42
    	  } catch (e) {
    	    return false
    	  }
    	}

    	Object.defineProperty(Buffer.prototype, 'parent', {
    	  enumerable: true,
    	  get: function () {
    	    if (!Buffer.isBuffer(this)) return undefined
    	    return this.buffer
    	  }
    	});

    	Object.defineProperty(Buffer.prototype, 'offset', {
    	  enumerable: true,
    	  get: function () {
    	    if (!Buffer.isBuffer(this)) return undefined
    	    return this.byteOffset
    	  }
    	});

    	function createBuffer (length) {
    	  if (length > K_MAX_LENGTH) {
    	    throw new RangeError('The value "' + length + '" is invalid for option "size"')
    	  }
    	  // Return an augmented `Uint8Array` instance
    	  var buf = new Uint8Array(length);
    	  Object.setPrototypeOf(buf, Buffer.prototype);
    	  return buf
    	}

    	/**
    	 * The Buffer constructor returns instances of `Uint8Array` that have their
    	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
    	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
    	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
    	 * returns a single octet.
    	 *
    	 * The `Uint8Array` prototype remains unmodified.
    	 */

    	function Buffer (arg, encodingOrOffset, length) {
    	  // Common case.
    	  if (typeof arg === 'number') {
    	    if (typeof encodingOrOffset === 'string') {
    	      throw new TypeError(
    	        'The "string" argument must be of type string. Received type number'
    	      )
    	    }
    	    return allocUnsafe(arg)
    	  }
    	  return from(arg, encodingOrOffset, length)
    	}

    	Buffer.poolSize = 8192; // not used by this implementation

    	function from (value, encodingOrOffset, length) {
    	  if (typeof value === 'string') {
    	    return fromString(value, encodingOrOffset)
    	  }

    	  if (ArrayBuffer.isView(value)) {
    	    return fromArrayView(value)
    	  }

    	  if (value == null) {
    	    throw new TypeError(
    	      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    	      'or Array-like Object. Received type ' + (typeof value)
    	    )
    	  }

    	  if (isInstance(value, ArrayBuffer) ||
    	      (value && isInstance(value.buffer, ArrayBuffer))) {
    	    return fromArrayBuffer(value, encodingOrOffset, length)
    	  }

    	  if (typeof SharedArrayBuffer !== 'undefined' &&
    	      (isInstance(value, SharedArrayBuffer) ||
    	      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    	    return fromArrayBuffer(value, encodingOrOffset, length)
    	  }

    	  if (typeof value === 'number') {
    	    throw new TypeError(
    	      'The "value" argument must not be of type number. Received type number'
    	    )
    	  }

    	  var valueOf = value.valueOf && value.valueOf();
    	  if (valueOf != null && valueOf !== value) {
    	    return Buffer.from(valueOf, encodingOrOffset, length)
    	  }

    	  var b = fromObject(value);
    	  if (b) return b

    	  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
    	      typeof value[Symbol.toPrimitive] === 'function') {
    	    return Buffer.from(
    	      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    	    )
    	  }

    	  throw new TypeError(
    	    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    	    'or Array-like Object. Received type ' + (typeof value)
    	  )
    	}

    	/**
    	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
    	 * if value is a number.
    	 * Buffer.from(str[, encoding])
    	 * Buffer.from(array)
    	 * Buffer.from(buffer)
    	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
    	 **/
    	Buffer.from = function (value, encodingOrOffset, length) {
    	  return from(value, encodingOrOffset, length)
    	};

    	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    	// https://github.com/feross/buffer/pull/148
    	Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    	Object.setPrototypeOf(Buffer, Uint8Array);

    	function assertSize (size) {
    	  if (typeof size !== 'number') {
    	    throw new TypeError('"size" argument must be of type number')
    	  } else if (size < 0) {
    	    throw new RangeError('The value "' + size + '" is invalid for option "size"')
    	  }
    	}

    	function alloc (size, fill, encoding) {
    	  assertSize(size);
    	  if (size <= 0) {
    	    return createBuffer(size)
    	  }
    	  if (fill !== undefined) {
    	    // Only pay attention to encoding if it's a string. This
    	    // prevents accidentally sending in a number that would
    	    // be interpreted as a start offset.
    	    return typeof encoding === 'string'
    	      ? createBuffer(size).fill(fill, encoding)
    	      : createBuffer(size).fill(fill)
    	  }
    	  return createBuffer(size)
    	}

    	/**
    	 * Creates a new filled Buffer instance.
    	 * alloc(size[, fill[, encoding]])
    	 **/
    	Buffer.alloc = function (size, fill, encoding) {
    	  return alloc(size, fill, encoding)
    	};

    	function allocUnsafe (size) {
    	  assertSize(size);
    	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
    	}

    	/**
    	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
    	 * */
    	Buffer.allocUnsafe = function (size) {
    	  return allocUnsafe(size)
    	};
    	/**
    	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
    	 */
    	Buffer.allocUnsafeSlow = function (size) {
    	  return allocUnsafe(size)
    	};

    	function fromString (string, encoding) {
    	  if (typeof encoding !== 'string' || encoding === '') {
    	    encoding = 'utf8';
    	  }

    	  if (!Buffer.isEncoding(encoding)) {
    	    throw new TypeError('Unknown encoding: ' + encoding)
    	  }

    	  var length = byteLength(string, encoding) | 0;
    	  var buf = createBuffer(length);

    	  var actual = buf.write(string, encoding);

    	  if (actual !== length) {
    	    // Writing a hex string, for example, that contains invalid characters will
    	    // cause everything after the first invalid character to be ignored. (e.g.
    	    // 'abxxcd' will be treated as 'ab')
    	    buf = buf.slice(0, actual);
    	  }

    	  return buf
    	}

    	function fromArrayLike (array) {
    	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
    	  var buf = createBuffer(length);
    	  for (var i = 0; i < length; i += 1) {
    	    buf[i] = array[i] & 255;
    	  }
    	  return buf
    	}

    	function fromArrayView (arrayView) {
    	  if (isInstance(arrayView, Uint8Array)) {
    	    var copy = new Uint8Array(arrayView);
    	    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
    	  }
    	  return fromArrayLike(arrayView)
    	}

    	function fromArrayBuffer (array, byteOffset, length) {
    	  if (byteOffset < 0 || array.byteLength < byteOffset) {
    	    throw new RangeError('"offset" is outside of buffer bounds')
    	  }

    	  if (array.byteLength < byteOffset + (length || 0)) {
    	    throw new RangeError('"length" is outside of buffer bounds')
    	  }

    	  var buf;
    	  if (byteOffset === undefined && length === undefined) {
    	    buf = new Uint8Array(array);
    	  } else if (length === undefined) {
    	    buf = new Uint8Array(array, byteOffset);
    	  } else {
    	    buf = new Uint8Array(array, byteOffset, length);
    	  }

    	  // Return an augmented `Uint8Array` instance
    	  Object.setPrototypeOf(buf, Buffer.prototype);

    	  return buf
    	}

    	function fromObject (obj) {
    	  if (Buffer.isBuffer(obj)) {
    	    var len = checked(obj.length) | 0;
    	    var buf = createBuffer(len);

    	    if (buf.length === 0) {
    	      return buf
    	    }

    	    obj.copy(buf, 0, 0, len);
    	    return buf
    	  }

    	  if (obj.length !== undefined) {
    	    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
    	      return createBuffer(0)
    	    }
    	    return fromArrayLike(obj)
    	  }

    	  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    	    return fromArrayLike(obj.data)
    	  }
    	}

    	function checked (length) {
    	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    	  // length is NaN (which is otherwise coerced to zero.)
    	  if (length >= K_MAX_LENGTH) {
    	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
    	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
    	  }
    	  return length | 0
    	}

    	function SlowBuffer (length) {
    	  if (+length != length) { // eslint-disable-line eqeqeq
    	    length = 0;
    	  }
    	  return Buffer.alloc(+length)
    	}

    	Buffer.isBuffer = function isBuffer (b) {
    	  return b != null && b._isBuffer === true &&
    	    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    	};

    	Buffer.compare = function compare (a, b) {
    	  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    	  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    	    throw new TypeError(
    	      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    	    )
    	  }

    	  if (a === b) return 0

    	  var x = a.length;
    	  var y = b.length;

    	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    	    if (a[i] !== b[i]) {
    	      x = a[i];
    	      y = b[i];
    	      break
    	    }
    	  }

    	  if (x < y) return -1
    	  if (y < x) return 1
    	  return 0
    	};

    	Buffer.isEncoding = function isEncoding (encoding) {
    	  switch (String(encoding).toLowerCase()) {
    	    case 'hex':
    	    case 'utf8':
    	    case 'utf-8':
    	    case 'ascii':
    	    case 'latin1':
    	    case 'binary':
    	    case 'base64':
    	    case 'ucs2':
    	    case 'ucs-2':
    	    case 'utf16le':
    	    case 'utf-16le':
    	      return true
    	    default:
    	      return false
    	  }
    	};

    	Buffer.concat = function concat (list, length) {
    	  if (!Array.isArray(list)) {
    	    throw new TypeError('"list" argument must be an Array of Buffers')
    	  }

    	  if (list.length === 0) {
    	    return Buffer.alloc(0)
    	  }

    	  var i;
    	  if (length === undefined) {
    	    length = 0;
    	    for (i = 0; i < list.length; ++i) {
    	      length += list[i].length;
    	    }
    	  }

    	  var buffer = Buffer.allocUnsafe(length);
    	  var pos = 0;
    	  for (i = 0; i < list.length; ++i) {
    	    var buf = list[i];
    	    if (isInstance(buf, Uint8Array)) {
    	      if (pos + buf.length > buffer.length) {
    	        Buffer.from(buf).copy(buffer, pos);
    	      } else {
    	        Uint8Array.prototype.set.call(
    	          buffer,
    	          buf,
    	          pos
    	        );
    	      }
    	    } else if (!Buffer.isBuffer(buf)) {
    	      throw new TypeError('"list" argument must be an Array of Buffers')
    	    } else {
    	      buf.copy(buffer, pos);
    	    }
    	    pos += buf.length;
    	  }
    	  return buffer
    	};

    	function byteLength (string, encoding) {
    	  if (Buffer.isBuffer(string)) {
    	    return string.length
    	  }
    	  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    	    return string.byteLength
    	  }
    	  if (typeof string !== 'string') {
    	    throw new TypeError(
    	      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
    	      'Received type ' + typeof string
    	    )
    	  }

    	  var len = string.length;
    	  var mustMatch = (arguments.length > 2 && arguments[2] === true);
    	  if (!mustMatch && len === 0) return 0

    	  // Use a for loop to avoid recursion
    	  var loweredCase = false;
    	  for (;;) {
    	    switch (encoding) {
    	      case 'ascii':
    	      case 'latin1':
    	      case 'binary':
    	        return len
    	      case 'utf8':
    	      case 'utf-8':
    	        return utf8ToBytes(string).length
    	      case 'ucs2':
    	      case 'ucs-2':
    	      case 'utf16le':
    	      case 'utf-16le':
    	        return len * 2
    	      case 'hex':
    	        return len >>> 1
    	      case 'base64':
    	        return base64ToBytes(string).length
    	      default:
    	        if (loweredCase) {
    	          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
    	        }
    	        encoding = ('' + encoding).toLowerCase();
    	        loweredCase = true;
    	    }
    	  }
    	}
    	Buffer.byteLength = byteLength;

    	function slowToString (encoding, start, end) {
    	  var loweredCase = false;

    	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    	  // property of a typed array.

    	  // This behaves neither like String nor Uint8Array in that we set start/end
    	  // to their upper/lower bounds if the value passed is out of range.
    	  // undefined is handled specially as per ECMA-262 6th Edition,
    	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    	  if (start === undefined || start < 0) {
    	    start = 0;
    	  }
    	  // Return early if start > this.length. Done here to prevent potential uint32
    	  // coercion fail below.
    	  if (start > this.length) {
    	    return ''
    	  }

    	  if (end === undefined || end > this.length) {
    	    end = this.length;
    	  }

    	  if (end <= 0) {
    	    return ''
    	  }

    	  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    	  end >>>= 0;
    	  start >>>= 0;

    	  if (end <= start) {
    	    return ''
    	  }

    	  if (!encoding) encoding = 'utf8';

    	  while (true) {
    	    switch (encoding) {
    	      case 'hex':
    	        return hexSlice(this, start, end)

    	      case 'utf8':
    	      case 'utf-8':
    	        return utf8Slice(this, start, end)

    	      case 'ascii':
    	        return asciiSlice(this, start, end)

    	      case 'latin1':
    	      case 'binary':
    	        return latin1Slice(this, start, end)

    	      case 'base64':
    	        return base64Slice(this, start, end)

    	      case 'ucs2':
    	      case 'ucs-2':
    	      case 'utf16le':
    	      case 'utf-16le':
    	        return utf16leSlice(this, start, end)

    	      default:
    	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
    	        encoding = (encoding + '').toLowerCase();
    	        loweredCase = true;
    	    }
    	  }
    	}

    	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    	// reliably in a browserify context because there could be multiple different
    	// copies of the 'buffer' package in use. This method works even for Buffer
    	// instances that were created from another copy of the `buffer` package.
    	// See: https://github.com/feross/buffer/issues/154
    	Buffer.prototype._isBuffer = true;

    	function swap (b, n, m) {
    	  var i = b[n];
    	  b[n] = b[m];
    	  b[m] = i;
    	}

    	Buffer.prototype.swap16 = function swap16 () {
    	  var len = this.length;
    	  if (len % 2 !== 0) {
    	    throw new RangeError('Buffer size must be a multiple of 16-bits')
    	  }
    	  for (var i = 0; i < len; i += 2) {
    	    swap(this, i, i + 1);
    	  }
    	  return this
    	};

    	Buffer.prototype.swap32 = function swap32 () {
    	  var len = this.length;
    	  if (len % 4 !== 0) {
    	    throw new RangeError('Buffer size must be a multiple of 32-bits')
    	  }
    	  for (var i = 0; i < len; i += 4) {
    	    swap(this, i, i + 3);
    	    swap(this, i + 1, i + 2);
    	  }
    	  return this
    	};

    	Buffer.prototype.swap64 = function swap64 () {
    	  var len = this.length;
    	  if (len % 8 !== 0) {
    	    throw new RangeError('Buffer size must be a multiple of 64-bits')
    	  }
    	  for (var i = 0; i < len; i += 8) {
    	    swap(this, i, i + 7);
    	    swap(this, i + 1, i + 6);
    	    swap(this, i + 2, i + 5);
    	    swap(this, i + 3, i + 4);
    	  }
    	  return this
    	};

    	Buffer.prototype.toString = function toString () {
    	  var length = this.length;
    	  if (length === 0) return ''
    	  if (arguments.length === 0) return utf8Slice(this, 0, length)
    	  return slowToString.apply(this, arguments)
    	};

    	Buffer.prototype.toLocaleString = Buffer.prototype.toString;

    	Buffer.prototype.equals = function equals (b) {
    	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    	  if (this === b) return true
    	  return Buffer.compare(this, b) === 0
    	};

    	Buffer.prototype.inspect = function inspect () {
    	  var str = '';
    	  var max = exports.INSPECT_MAX_BYTES;
    	  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    	  if (this.length > max) str += ' ... ';
    	  return '<Buffer ' + str + '>'
    	};
    	if (customInspectSymbol) {
    	  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    	}

    	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    	  if (isInstance(target, Uint8Array)) {
    	    target = Buffer.from(target, target.offset, target.byteLength);
    	  }
    	  if (!Buffer.isBuffer(target)) {
    	    throw new TypeError(
    	      'The "target" argument must be one of type Buffer or Uint8Array. ' +
    	      'Received type ' + (typeof target)
    	    )
    	  }

    	  if (start === undefined) {
    	    start = 0;
    	  }
    	  if (end === undefined) {
    	    end = target ? target.length : 0;
    	  }
    	  if (thisStart === undefined) {
    	    thisStart = 0;
    	  }
    	  if (thisEnd === undefined) {
    	    thisEnd = this.length;
    	  }

    	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    	    throw new RangeError('out of range index')
    	  }

    	  if (thisStart >= thisEnd && start >= end) {
    	    return 0
    	  }
    	  if (thisStart >= thisEnd) {
    	    return -1
    	  }
    	  if (start >= end) {
    	    return 1
    	  }

    	  start >>>= 0;
    	  end >>>= 0;
    	  thisStart >>>= 0;
    	  thisEnd >>>= 0;

    	  if (this === target) return 0

    	  var x = thisEnd - thisStart;
    	  var y = end - start;
    	  var len = Math.min(x, y);

    	  var thisCopy = this.slice(thisStart, thisEnd);
    	  var targetCopy = target.slice(start, end);

    	  for (var i = 0; i < len; ++i) {
    	    if (thisCopy[i] !== targetCopy[i]) {
    	      x = thisCopy[i];
    	      y = targetCopy[i];
    	      break
    	    }
    	  }

    	  if (x < y) return -1
    	  if (y < x) return 1
    	  return 0
    	};

    	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    	//
    	// Arguments:
    	// - buffer - a Buffer to search
    	// - val - a string, Buffer, or number
    	// - byteOffset - an index into `buffer`; will be clamped to an int32
    	// - encoding - an optional encoding, relevant is val is a string
    	// - dir - true for indexOf, false for lastIndexOf
    	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    	  // Empty buffer means no match
    	  if (buffer.length === 0) return -1

    	  // Normalize byteOffset
    	  if (typeof byteOffset === 'string') {
    	    encoding = byteOffset;
    	    byteOffset = 0;
    	  } else if (byteOffset > 0x7fffffff) {
    	    byteOffset = 0x7fffffff;
    	  } else if (byteOffset < -0x80000000) {
    	    byteOffset = -0x80000000;
    	  }
    	  byteOffset = +byteOffset; // Coerce to Number.
    	  if (numberIsNaN(byteOffset)) {
    	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    	    byteOffset = dir ? 0 : (buffer.length - 1);
    	  }

    	  // Normalize byteOffset: negative offsets start from the end of the buffer
    	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    	  if (byteOffset >= buffer.length) {
    	    if (dir) return -1
    	    else byteOffset = buffer.length - 1;
    	  } else if (byteOffset < 0) {
    	    if (dir) byteOffset = 0;
    	    else return -1
    	  }

    	  // Normalize val
    	  if (typeof val === 'string') {
    	    val = Buffer.from(val, encoding);
    	  }

    	  // Finally, search either indexOf (if dir is true) or lastIndexOf
    	  if (Buffer.isBuffer(val)) {
    	    // Special case: looking for empty string/buffer always fails
    	    if (val.length === 0) {
    	      return -1
    	    }
    	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    	  } else if (typeof val === 'number') {
    	    val = val & 0xFF; // Search for a byte value [0-255]
    	    if (typeof Uint8Array.prototype.indexOf === 'function') {
    	      if (dir) {
    	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
    	      } else {
    	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
    	      }
    	    }
    	    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
    	  }

    	  throw new TypeError('val must be string, number or Buffer')
    	}

    	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    	  var indexSize = 1;
    	  var arrLength = arr.length;
    	  var valLength = val.length;

    	  if (encoding !== undefined) {
    	    encoding = String(encoding).toLowerCase();
    	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
    	        encoding === 'utf16le' || encoding === 'utf-16le') {
    	      if (arr.length < 2 || val.length < 2) {
    	        return -1
    	      }
    	      indexSize = 2;
    	      arrLength /= 2;
    	      valLength /= 2;
    	      byteOffset /= 2;
    	    }
    	  }

    	  function read (buf, i) {
    	    if (indexSize === 1) {
    	      return buf[i]
    	    } else {
    	      return buf.readUInt16BE(i * indexSize)
    	    }
    	  }

    	  var i;
    	  if (dir) {
    	    var foundIndex = -1;
    	    for (i = byteOffset; i < arrLength; i++) {
    	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
    	        if (foundIndex === -1) foundIndex = i;
    	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
    	      } else {
    	        if (foundIndex !== -1) i -= i - foundIndex;
    	        foundIndex = -1;
    	      }
    	    }
    	  } else {
    	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    	    for (i = byteOffset; i >= 0; i--) {
    	      var found = true;
    	      for (var j = 0; j < valLength; j++) {
    	        if (read(arr, i + j) !== read(val, j)) {
    	          found = false;
    	          break
    	        }
    	      }
    	      if (found) return i
    	    }
    	  }

    	  return -1
    	}

    	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    	  return this.indexOf(val, byteOffset, encoding) !== -1
    	};

    	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    	};

    	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    	};

    	function hexWrite (buf, string, offset, length) {
    	  offset = Number(offset) || 0;
    	  var remaining = buf.length - offset;
    	  if (!length) {
    	    length = remaining;
    	  } else {
    	    length = Number(length);
    	    if (length > remaining) {
    	      length = remaining;
    	    }
    	  }

    	  var strLen = string.length;

    	  if (length > strLen / 2) {
    	    length = strLen / 2;
    	  }
    	  for (var i = 0; i < length; ++i) {
    	    var parsed = parseInt(string.substr(i * 2, 2), 16);
    	    if (numberIsNaN(parsed)) return i
    	    buf[offset + i] = parsed;
    	  }
    	  return i
    	}

    	function utf8Write (buf, string, offset, length) {
    	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    	}

    	function asciiWrite (buf, string, offset, length) {
    	  return blitBuffer(asciiToBytes(string), buf, offset, length)
    	}

    	function base64Write (buf, string, offset, length) {
    	  return blitBuffer(base64ToBytes(string), buf, offset, length)
    	}

    	function ucs2Write (buf, string, offset, length) {
    	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    	}

    	Buffer.prototype.write = function write (string, offset, length, encoding) {
    	  // Buffer#write(string)
    	  if (offset === undefined) {
    	    encoding = 'utf8';
    	    length = this.length;
    	    offset = 0;
    	  // Buffer#write(string, encoding)
    	  } else if (length === undefined && typeof offset === 'string') {
    	    encoding = offset;
    	    length = this.length;
    	    offset = 0;
    	  // Buffer#write(string, offset[, length][, encoding])
    	  } else if (isFinite(offset)) {
    	    offset = offset >>> 0;
    	    if (isFinite(length)) {
    	      length = length >>> 0;
    	      if (encoding === undefined) encoding = 'utf8';
    	    } else {
    	      encoding = length;
    	      length = undefined;
    	    }
    	  } else {
    	    throw new Error(
    	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    	    )
    	  }

    	  var remaining = this.length - offset;
    	  if (length === undefined || length > remaining) length = remaining;

    	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    	    throw new RangeError('Attempt to write outside buffer bounds')
    	  }

    	  if (!encoding) encoding = 'utf8';

    	  var loweredCase = false;
    	  for (;;) {
    	    switch (encoding) {
    	      case 'hex':
    	        return hexWrite(this, string, offset, length)

    	      case 'utf8':
    	      case 'utf-8':
    	        return utf8Write(this, string, offset, length)

    	      case 'ascii':
    	      case 'latin1':
    	      case 'binary':
    	        return asciiWrite(this, string, offset, length)

    	      case 'base64':
    	        // Warning: maxLength not taken into account in base64Write
    	        return base64Write(this, string, offset, length)

    	      case 'ucs2':
    	      case 'ucs-2':
    	      case 'utf16le':
    	      case 'utf-16le':
    	        return ucs2Write(this, string, offset, length)

    	      default:
    	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
    	        encoding = ('' + encoding).toLowerCase();
    	        loweredCase = true;
    	    }
    	  }
    	};

    	Buffer.prototype.toJSON = function toJSON () {
    	  return {
    	    type: 'Buffer',
    	    data: Array.prototype.slice.call(this._arr || this, 0)
    	  }
    	};

    	function base64Slice (buf, start, end) {
    	  if (start === 0 && end === buf.length) {
    	    return base64.fromByteArray(buf)
    	  } else {
    	    return base64.fromByteArray(buf.slice(start, end))
    	  }
    	}

    	function utf8Slice (buf, start, end) {
    	  end = Math.min(buf.length, end);
    	  var res = [];

    	  var i = start;
    	  while (i < end) {
    	    var firstByte = buf[i];
    	    var codePoint = null;
    	    var bytesPerSequence = (firstByte > 0xEF)
    	      ? 4
    	      : (firstByte > 0xDF)
    	          ? 3
    	          : (firstByte > 0xBF)
    	              ? 2
    	              : 1;

    	    if (i + bytesPerSequence <= end) {
    	      var secondByte, thirdByte, fourthByte, tempCodePoint;

    	      switch (bytesPerSequence) {
    	        case 1:
    	          if (firstByte < 0x80) {
    	            codePoint = firstByte;
    	          }
    	          break
    	        case 2:
    	          secondByte = buf[i + 1];
    	          if ((secondByte & 0xC0) === 0x80) {
    	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
    	            if (tempCodePoint > 0x7F) {
    	              codePoint = tempCodePoint;
    	            }
    	          }
    	          break
    	        case 3:
    	          secondByte = buf[i + 1];
    	          thirdByte = buf[i + 2];
    	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
    	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
    	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
    	              codePoint = tempCodePoint;
    	            }
    	          }
    	          break
    	        case 4:
    	          secondByte = buf[i + 1];
    	          thirdByte = buf[i + 2];
    	          fourthByte = buf[i + 3];
    	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
    	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
    	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
    	              codePoint = tempCodePoint;
    	            }
    	          }
    	      }
    	    }

    	    if (codePoint === null) {
    	      // we did not generate a valid codePoint so insert a
    	      // replacement char (U+FFFD) and advance only 1 byte
    	      codePoint = 0xFFFD;
    	      bytesPerSequence = 1;
    	    } else if (codePoint > 0xFFFF) {
    	      // encode to utf16 (surrogate pair dance)
    	      codePoint -= 0x10000;
    	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
    	      codePoint = 0xDC00 | codePoint & 0x3FF;
    	    }

    	    res.push(codePoint);
    	    i += bytesPerSequence;
    	  }

    	  return decodeCodePointsArray(res)
    	}

    	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
    	// the lowest limit is Chrome, with 0x10000 args.
    	// We go 1 magnitude less, for safety
    	var MAX_ARGUMENTS_LENGTH = 0x1000;

    	function decodeCodePointsArray (codePoints) {
    	  var len = codePoints.length;
    	  if (len <= MAX_ARGUMENTS_LENGTH) {
    	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    	  }

    	  // Decode in chunks to avoid "call stack size exceeded".
    	  var res = '';
    	  var i = 0;
    	  while (i < len) {
    	    res += String.fromCharCode.apply(
    	      String,
    	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    	    );
    	  }
    	  return res
    	}

    	function asciiSlice (buf, start, end) {
    	  var ret = '';
    	  end = Math.min(buf.length, end);

    	  for (var i = start; i < end; ++i) {
    	    ret += String.fromCharCode(buf[i] & 0x7F);
    	  }
    	  return ret
    	}

    	function latin1Slice (buf, start, end) {
    	  var ret = '';
    	  end = Math.min(buf.length, end);

    	  for (var i = start; i < end; ++i) {
    	    ret += String.fromCharCode(buf[i]);
    	  }
    	  return ret
    	}

    	function hexSlice (buf, start, end) {
    	  var len = buf.length;

    	  if (!start || start < 0) start = 0;
    	  if (!end || end < 0 || end > len) end = len;

    	  var out = '';
    	  for (var i = start; i < end; ++i) {
    	    out += hexSliceLookupTable[buf[i]];
    	  }
    	  return out
    	}

    	function utf16leSlice (buf, start, end) {
    	  var bytes = buf.slice(start, end);
    	  var res = '';
    	  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    	  for (var i = 0; i < bytes.length - 1; i += 2) {
    	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
    	  }
    	  return res
    	}

    	Buffer.prototype.slice = function slice (start, end) {
    	  var len = this.length;
    	  start = ~~start;
    	  end = end === undefined ? len : ~~end;

    	  if (start < 0) {
    	    start += len;
    	    if (start < 0) start = 0;
    	  } else if (start > len) {
    	    start = len;
    	  }

    	  if (end < 0) {
    	    end += len;
    	    if (end < 0) end = 0;
    	  } else if (end > len) {
    	    end = len;
    	  }

    	  if (end < start) end = start;

    	  var newBuf = this.subarray(start, end);
    	  // Return an augmented `Uint8Array` instance
    	  Object.setPrototypeOf(newBuf, Buffer.prototype);

    	  return newBuf
    	};

    	/*
    	 * Need to make sure that buffer isn't trying to write out of bounds.
    	 */
    	function checkOffset (offset, ext, length) {
    	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    	}

    	Buffer.prototype.readUintLE =
    	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    	  offset = offset >>> 0;
    	  byteLength = byteLength >>> 0;
    	  if (!noAssert) checkOffset(offset, byteLength, this.length);

    	  var val = this[offset];
    	  var mul = 1;
    	  var i = 0;
    	  while (++i < byteLength && (mul *= 0x100)) {
    	    val += this[offset + i] * mul;
    	  }

    	  return val
    	};

    	Buffer.prototype.readUintBE =
    	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    	  offset = offset >>> 0;
    	  byteLength = byteLength >>> 0;
    	  if (!noAssert) {
    	    checkOffset(offset, byteLength, this.length);
    	  }

    	  var val = this[offset + --byteLength];
    	  var mul = 1;
    	  while (byteLength > 0 && (mul *= 0x100)) {
    	    val += this[offset + --byteLength] * mul;
    	  }

    	  return val
    	};

    	Buffer.prototype.readUint8 =
    	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 1, this.length);
    	  return this[offset]
    	};

    	Buffer.prototype.readUint16LE =
    	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 2, this.length);
    	  return this[offset] | (this[offset + 1] << 8)
    	};

    	Buffer.prototype.readUint16BE =
    	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 2, this.length);
    	  return (this[offset] << 8) | this[offset + 1]
    	};

    	Buffer.prototype.readUint32LE =
    	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 4, this.length);

    	  return ((this[offset]) |
    	      (this[offset + 1] << 8) |
    	      (this[offset + 2] << 16)) +
    	      (this[offset + 3] * 0x1000000)
    	};

    	Buffer.prototype.readUint32BE =
    	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 4, this.length);

    	  return (this[offset] * 0x1000000) +
    	    ((this[offset + 1] << 16) |
    	    (this[offset + 2] << 8) |
    	    this[offset + 3])
    	};

    	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    	  offset = offset >>> 0;
    	  byteLength = byteLength >>> 0;
    	  if (!noAssert) checkOffset(offset, byteLength, this.length);

    	  var val = this[offset];
    	  var mul = 1;
    	  var i = 0;
    	  while (++i < byteLength && (mul *= 0x100)) {
    	    val += this[offset + i] * mul;
    	  }
    	  mul *= 0x80;

    	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    	  return val
    	};

    	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    	  offset = offset >>> 0;
    	  byteLength = byteLength >>> 0;
    	  if (!noAssert) checkOffset(offset, byteLength, this.length);

    	  var i = byteLength;
    	  var mul = 1;
    	  var val = this[offset + --i];
    	  while (i > 0 && (mul *= 0x100)) {
    	    val += this[offset + --i] * mul;
    	  }
    	  mul *= 0x80;

    	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    	  return val
    	};

    	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 1, this.length);
    	  if (!(this[offset] & 0x80)) return (this[offset])
    	  return ((0xff - this[offset] + 1) * -1)
    	};

    	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 2, this.length);
    	  var val = this[offset] | (this[offset + 1] << 8);
    	  return (val & 0x8000) ? val | 0xFFFF0000 : val
    	};

    	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 2, this.length);
    	  var val = this[offset + 1] | (this[offset] << 8);
    	  return (val & 0x8000) ? val | 0xFFFF0000 : val
    	};

    	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 4, this.length);

    	  return (this[offset]) |
    	    (this[offset + 1] << 8) |
    	    (this[offset + 2] << 16) |
    	    (this[offset + 3] << 24)
    	};

    	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 4, this.length);

    	  return (this[offset] << 24) |
    	    (this[offset + 1] << 16) |
    	    (this[offset + 2] << 8) |
    	    (this[offset + 3])
    	};

    	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 4, this.length);
    	  return ieee754.read(this, offset, true, 23, 4)
    	};

    	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 4, this.length);
    	  return ieee754.read(this, offset, false, 23, 4)
    	};

    	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 8, this.length);
    	  return ieee754.read(this, offset, true, 52, 8)
    	};

    	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    	  offset = offset >>> 0;
    	  if (!noAssert) checkOffset(offset, 8, this.length);
    	  return ieee754.read(this, offset, false, 52, 8)
    	};

    	function checkInt (buf, value, offset, ext, max, min) {
    	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
    	}

    	Buffer.prototype.writeUintLE =
    	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  byteLength = byteLength >>> 0;
    	  if (!noAssert) {
    	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    	    checkInt(this, value, offset, byteLength, maxBytes, 0);
    	  }

    	  var mul = 1;
    	  var i = 0;
    	  this[offset] = value & 0xFF;
    	  while (++i < byteLength && (mul *= 0x100)) {
    	    this[offset + i] = (value / mul) & 0xFF;
    	  }

    	  return offset + byteLength
    	};

    	Buffer.prototype.writeUintBE =
    	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  byteLength = byteLength >>> 0;
    	  if (!noAssert) {
    	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    	    checkInt(this, value, offset, byteLength, maxBytes, 0);
    	  }

    	  var i = byteLength - 1;
    	  var mul = 1;
    	  this[offset + i] = value & 0xFF;
    	  while (--i >= 0 && (mul *= 0x100)) {
    	    this[offset + i] = (value / mul) & 0xFF;
    	  }

    	  return offset + byteLength
    	};

    	Buffer.prototype.writeUint8 =
    	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    	  this[offset] = (value & 0xff);
    	  return offset + 1
    	};

    	Buffer.prototype.writeUint16LE =
    	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    	  this[offset] = (value & 0xff);
    	  this[offset + 1] = (value >>> 8);
    	  return offset + 2
    	};

    	Buffer.prototype.writeUint16BE =
    	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    	  this[offset] = (value >>> 8);
    	  this[offset + 1] = (value & 0xff);
    	  return offset + 2
    	};

    	Buffer.prototype.writeUint32LE =
    	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    	  this[offset + 3] = (value >>> 24);
    	  this[offset + 2] = (value >>> 16);
    	  this[offset + 1] = (value >>> 8);
    	  this[offset] = (value & 0xff);
    	  return offset + 4
    	};

    	Buffer.prototype.writeUint32BE =
    	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    	  this[offset] = (value >>> 24);
    	  this[offset + 1] = (value >>> 16);
    	  this[offset + 2] = (value >>> 8);
    	  this[offset + 3] = (value & 0xff);
    	  return offset + 4
    	};

    	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) {
    	    var limit = Math.pow(2, (8 * byteLength) - 1);

    	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
    	  }

    	  var i = 0;
    	  var mul = 1;
    	  var sub = 0;
    	  this[offset] = value & 0xFF;
    	  while (++i < byteLength && (mul *= 0x100)) {
    	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
    	      sub = 1;
    	    }
    	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    	  }

    	  return offset + byteLength
    	};

    	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) {
    	    var limit = Math.pow(2, (8 * byteLength) - 1);

    	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
    	  }

    	  var i = byteLength - 1;
    	  var mul = 1;
    	  var sub = 0;
    	  this[offset + i] = value & 0xFF;
    	  while (--i >= 0 && (mul *= 0x100)) {
    	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
    	      sub = 1;
    	    }
    	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    	  }

    	  return offset + byteLength
    	};

    	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    	  if (value < 0) value = 0xff + value + 1;
    	  this[offset] = (value & 0xff);
    	  return offset + 1
    	};

    	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    	  this[offset] = (value & 0xff);
    	  this[offset + 1] = (value >>> 8);
    	  return offset + 2
    	};

    	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    	  this[offset] = (value >>> 8);
    	  this[offset + 1] = (value & 0xff);
    	  return offset + 2
    	};

    	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    	  this[offset] = (value & 0xff);
    	  this[offset + 1] = (value >>> 8);
    	  this[offset + 2] = (value >>> 16);
    	  this[offset + 3] = (value >>> 24);
    	  return offset + 4
    	};

    	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    	  if (value < 0) value = 0xffffffff + value + 1;
    	  this[offset] = (value >>> 24);
    	  this[offset + 1] = (value >>> 16);
    	  this[offset + 2] = (value >>> 8);
    	  this[offset + 3] = (value & 0xff);
    	  return offset + 4
    	};

    	function checkIEEE754 (buf, value, offset, ext, max, min) {
    	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
    	  if (offset < 0) throw new RangeError('Index out of range')
    	}

    	function writeFloat (buf, value, offset, littleEndian, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) {
    	    checkIEEE754(buf, value, offset, 4);
    	  }
    	  ieee754.write(buf, value, offset, littleEndian, 23, 4);
    	  return offset + 4
    	}

    	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    	  return writeFloat(this, value, offset, true, noAssert)
    	};

    	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    	  return writeFloat(this, value, offset, false, noAssert)
    	};

    	function writeDouble (buf, value, offset, littleEndian, noAssert) {
    	  value = +value;
    	  offset = offset >>> 0;
    	  if (!noAssert) {
    	    checkIEEE754(buf, value, offset, 8);
    	  }
    	  ieee754.write(buf, value, offset, littleEndian, 52, 8);
    	  return offset + 8
    	}

    	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    	  return writeDouble(this, value, offset, true, noAssert)
    	};

    	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    	  return writeDouble(this, value, offset, false, noAssert)
    	};

    	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    	  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
    	  if (!start) start = 0;
    	  if (!end && end !== 0) end = this.length;
    	  if (targetStart >= target.length) targetStart = target.length;
    	  if (!targetStart) targetStart = 0;
    	  if (end > 0 && end < start) end = start;

    	  // Copy 0 bytes; we're done
    	  if (end === start) return 0
    	  if (target.length === 0 || this.length === 0) return 0

    	  // Fatal error conditions
    	  if (targetStart < 0) {
    	    throw new RangeError('targetStart out of bounds')
    	  }
    	  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
    	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

    	  // Are we oob?
    	  if (end > this.length) end = this.length;
    	  if (target.length - targetStart < end - start) {
    	    end = target.length - targetStart + start;
    	  }

    	  var len = end - start;

    	  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    	    // Use built-in when available, missing from IE11
    	    this.copyWithin(targetStart, start, end);
    	  } else {
    	    Uint8Array.prototype.set.call(
    	      target,
    	      this.subarray(start, end),
    	      targetStart
    	    );
    	  }

    	  return len
    	};

    	// Usage:
    	//    buffer.fill(number[, offset[, end]])
    	//    buffer.fill(buffer[, offset[, end]])
    	//    buffer.fill(string[, offset[, end]][, encoding])
    	Buffer.prototype.fill = function fill (val, start, end, encoding) {
    	  // Handle string cases:
    	  if (typeof val === 'string') {
    	    if (typeof start === 'string') {
    	      encoding = start;
    	      start = 0;
    	      end = this.length;
    	    } else if (typeof end === 'string') {
    	      encoding = end;
    	      end = this.length;
    	    }
    	    if (encoding !== undefined && typeof encoding !== 'string') {
    	      throw new TypeError('encoding must be a string')
    	    }
    	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
    	      throw new TypeError('Unknown encoding: ' + encoding)
    	    }
    	    if (val.length === 1) {
    	      var code = val.charCodeAt(0);
    	      if ((encoding === 'utf8' && code < 128) ||
    	          encoding === 'latin1') {
    	        // Fast path: If `val` fits into a single byte, use that numeric value.
    	        val = code;
    	      }
    	    }
    	  } else if (typeof val === 'number') {
    	    val = val & 255;
    	  } else if (typeof val === 'boolean') {
    	    val = Number(val);
    	  }

    	  // Invalid ranges are not set to a default, so can range check early.
    	  if (start < 0 || this.length < start || this.length < end) {
    	    throw new RangeError('Out of range index')
    	  }

    	  if (end <= start) {
    	    return this
    	  }

    	  start = start >>> 0;
    	  end = end === undefined ? this.length : end >>> 0;

    	  if (!val) val = 0;

    	  var i;
    	  if (typeof val === 'number') {
    	    for (i = start; i < end; ++i) {
    	      this[i] = val;
    	    }
    	  } else {
    	    var bytes = Buffer.isBuffer(val)
    	      ? val
    	      : Buffer.from(val, encoding);
    	    var len = bytes.length;
    	    if (len === 0) {
    	      throw new TypeError('The value "' + val +
    	        '" is invalid for argument "value"')
    	    }
    	    for (i = 0; i < end - start; ++i) {
    	      this[i + start] = bytes[i % len];
    	    }
    	  }

    	  return this
    	};

    	// HELPER FUNCTIONS
    	// ================

    	var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

    	function base64clean (str) {
    	  // Node takes equal signs as end of the Base64 encoding
    	  str = str.split('=')[0];
    	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
    	  str = str.trim().replace(INVALID_BASE64_RE, '');
    	  // Node converts strings with length < 2 to ''
    	  if (str.length < 2) return ''
    	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    	  while (str.length % 4 !== 0) {
    	    str = str + '=';
    	  }
    	  return str
    	}

    	function utf8ToBytes (string, units) {
    	  units = units || Infinity;
    	  var codePoint;
    	  var length = string.length;
    	  var leadSurrogate = null;
    	  var bytes = [];

    	  for (var i = 0; i < length; ++i) {
    	    codePoint = string.charCodeAt(i);

    	    // is surrogate component
    	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
    	      // last char was a lead
    	      if (!leadSurrogate) {
    	        // no lead yet
    	        if (codePoint > 0xDBFF) {
    	          // unexpected trail
    	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    	          continue
    	        } else if (i + 1 === length) {
    	          // unpaired lead
    	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    	          continue
    	        }

    	        // valid lead
    	        leadSurrogate = codePoint;

    	        continue
    	      }

    	      // 2 leads in a row
    	      if (codePoint < 0xDC00) {
    	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    	        leadSurrogate = codePoint;
    	        continue
    	      }

    	      // valid surrogate pair
    	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    	    } else if (leadSurrogate) {
    	      // valid bmp char, but last char was a lead
    	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    	    }

    	    leadSurrogate = null;

    	    // encode utf8
    	    if (codePoint < 0x80) {
    	      if ((units -= 1) < 0) break
    	      bytes.push(codePoint);
    	    } else if (codePoint < 0x800) {
    	      if ((units -= 2) < 0) break
    	      bytes.push(
    	        codePoint >> 0x6 | 0xC0,
    	        codePoint & 0x3F | 0x80
    	      );
    	    } else if (codePoint < 0x10000) {
    	      if ((units -= 3) < 0) break
    	      bytes.push(
    	        codePoint >> 0xC | 0xE0,
    	        codePoint >> 0x6 & 0x3F | 0x80,
    	        codePoint & 0x3F | 0x80
    	      );
    	    } else if (codePoint < 0x110000) {
    	      if ((units -= 4) < 0) break
    	      bytes.push(
    	        codePoint >> 0x12 | 0xF0,
    	        codePoint >> 0xC & 0x3F | 0x80,
    	        codePoint >> 0x6 & 0x3F | 0x80,
    	        codePoint & 0x3F | 0x80
    	      );
    	    } else {
    	      throw new Error('Invalid code point')
    	    }
    	  }

    	  return bytes
    	}

    	function asciiToBytes (str) {
    	  var byteArray = [];
    	  for (var i = 0; i < str.length; ++i) {
    	    // Node's code seems to be doing this and not & 0x7F..
    	    byteArray.push(str.charCodeAt(i) & 0xFF);
    	  }
    	  return byteArray
    	}

    	function utf16leToBytes (str, units) {
    	  var c, hi, lo;
    	  var byteArray = [];
    	  for (var i = 0; i < str.length; ++i) {
    	    if ((units -= 2) < 0) break

    	    c = str.charCodeAt(i);
    	    hi = c >> 8;
    	    lo = c % 256;
    	    byteArray.push(lo);
    	    byteArray.push(hi);
    	  }

    	  return byteArray
    	}

    	function base64ToBytes (str) {
    	  return base64.toByteArray(base64clean(str))
    	}

    	function blitBuffer (src, dst, offset, length) {
    	  for (var i = 0; i < length; ++i) {
    	    if ((i + offset >= dst.length) || (i >= src.length)) break
    	    dst[i + offset] = src[i];
    	  }
    	  return i
    	}

    	// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    	// the `instanceof` check but they should be treated as of that type.
    	// See: https://github.com/feross/buffer/issues/166
    	function isInstance (obj, type) {
    	  return obj instanceof type ||
    	    (obj != null && obj.constructor != null && obj.constructor.name != null &&
    	      obj.constructor.name === type.name)
    	}
    	function numberIsNaN (obj) {
    	  // For IE11 support
    	  return obj !== obj // eslint-disable-line no-self-compare
    	}

    	// Create lookup table for `toString('hex')`
    	// See: https://github.com/feross/buffer/issues/219
    	var hexSliceLookupTable = (function () {
    	  var alphabet = '0123456789abcdef';
    	  var table = new Array(256);
    	  for (var i = 0; i < 16; ++i) {
    	    var i16 = i * 16;
    	    for (var j = 0; j < 16; ++j) {
    	      table[i16 + j] = alphabet[i] + alphabet[j];
    	    }
    	  }
    	  return table
    	})(); 
    } (buffer));

    /**
     * Codes used by the replica for rejecting a message.
     * See {@link https://sdk.dfinity.org/docs/interface-spec/#reject-codes | the interface spec}.
     */
    var ReplicaRejectCode;
    (function (ReplicaRejectCode) {
        ReplicaRejectCode[ReplicaRejectCode["SysFatal"] = 1] = "SysFatal";
        ReplicaRejectCode[ReplicaRejectCode["SysTransient"] = 2] = "SysTransient";
        ReplicaRejectCode[ReplicaRejectCode["DestinationInvalid"] = 3] = "DestinationInvalid";
        ReplicaRejectCode[ReplicaRejectCode["CanisterReject"] = 4] = "CanisterReject";
        ReplicaRejectCode[ReplicaRejectCode["CanisterError"] = 5] = "CanisterError";
    })(ReplicaRejectCode || (ReplicaRejectCode = {}));

    // tslint:disable:no-bitwise
    const alphabet = 'abcdefghijklmnopqrstuvwxyz234567';
    // Build a lookup table for decoding.
    const lookupTable = Object.create(null);
    for (let i = 0; i < alphabet.length; i++) {
        lookupTable[alphabet[i]] = i;
    }
    // Add aliases for rfc4648.
    lookupTable['0'] = lookupTable.o;
    lookupTable['1'] = lookupTable.i;
    /**
     * @param input The input array to encode.
     * @returns A Base32 string encoding the input.
     */
    function encode$2(input) {
        // How many bits will we skip from the first byte.
        let skip = 0;
        // 5 high bits, carry from one byte to the next.
        let bits = 0;
        // The output string in base32.
        let output = '';
        function encodeByte(byte) {
            if (skip < 0) {
                // we have a carry from the previous byte
                bits |= byte >> -skip;
            }
            else {
                // no carry
                bits = (byte << skip) & 248;
            }
            if (skip > 3) {
                // Not enough data to produce a character, get us another one
                skip -= 8;
                return 1;
            }
            if (skip < 4) {
                // produce a character
                output += alphabet[bits >> 3];
                skip += 5;
            }
            return 0;
        }
        for (let i = 0; i < input.length;) {
            i += encodeByte(input[i]);
        }
        return output + (skip < 0 ? alphabet[bits >> 3] : '');
    }
    /**
     * @param input The base32 encoded string to decode.
     */
    function decode$3(input) {
        // how many bits we have from the previous character.
        let skip = 0;
        // current byte we're producing.
        let byte = 0;
        const output = new Uint8Array(((input.length * 4) / 3) | 0);
        let o = 0;
        function decodeChar(char) {
            // Consume a character from the stream, store
            // the output in this.output. As before, better
            // to use update().
            let val = lookupTable[char.toLowerCase()];
            if (val === undefined) {
                throw new Error(`Invalid character: ${JSON.stringify(char)}`);
            }
            // move to the high bits
            val <<= 3;
            byte |= val >>> skip;
            skip += 5;
            if (skip >= 8) {
                // We have enough bytes to produce an output
                output[o++] = byte;
                skip -= 8;
                if (skip > 0) {
                    byte = (val << (5 - skip)) & 255;
                }
                else {
                    byte = 0;
                }
            }
        }
        for (const c of input) {
            decodeChar(c);
        }
        return output.slice(0, o);
    }

    // tslint:disable:no-bitwise
    // This file is translated to JavaScript from
    // https://lxp32.github.io/docs/a-simple-example-crc32-calculation/
    const lookUpTable = new Uint32Array([
        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
        0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
        0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
        0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
        0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
        0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
        0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
        0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
        0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
        0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
        0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
        0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
        0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
        0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
        0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
        0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
        0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
        0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
        0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
        0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
        0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
        0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,
    ]);
    /**
     * Calculate the CRC32 of an ArrayBufferLike.
     * @param buf The BufferLike to calculate the CRC32 of.
     */
    function getCrc32(buf) {
        const b = new Uint8Array(buf);
        let crc = -1;
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < b.length; i++) {
            const byte = b[i];
            const t = (byte ^ crc) & 0xff;
            crc = lookUpTable[t] ^ (crc >>> 8);
        }
        return (crc ^ -1) >>> 0;
    }

    var sha256 = {exports: {}};

    (function (module) {
    	/*jslint bitwise: true */
    	(function () {

    	  var ERROR = 'input is invalid type';
    	  var WINDOW = typeof window === 'object';
    	  var root = WINDOW ? window : {};
    	  if (root.JS_SHA256_NO_WINDOW) {
    	    WINDOW = false;
    	  }
    	  var WEB_WORKER = !WINDOW && typeof self === 'object';
    	  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    	  if (NODE_JS) {
    	    root = commonjsGlobal;
    	  } else if (WEB_WORKER) {
    	    root = self;
    	  }
    	  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && 'object' === 'object' && module.exports;
    	  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    	  var HEX_CHARS = '0123456789abcdef'.split('');
    	  var EXTRA = [-2147483648, 8388608, 32768, 128];
    	  var SHIFT = [24, 16, 8, 0];
    	  var K = [
    	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    	    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    	    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    	    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    	    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    	    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    	    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    	  ];
    	  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

    	  var blocks = [];

    	  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
    	    Array.isArray = function (obj) {
    	      return Object.prototype.toString.call(obj) === '[object Array]';
    	    };
    	  }

    	  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    	    ArrayBuffer.isView = function (obj) {
    	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    	    };
    	  }

    	  var createOutputMethod = function (outputType, is224) {
    	    return function (message) {
    	      return new Sha256(is224, true).update(message)[outputType]();
    	    };
    	  };

    	  var createMethod = function (is224) {
    	    var method = createOutputMethod('hex', is224);
    	    if (NODE_JS) {
    	      method = nodeWrap(method, is224);
    	    }
    	    method.create = function () {
    	      return new Sha256(is224);
    	    };
    	    method.update = function (message) {
    	      return method.create().update(message);
    	    };
    	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
    	      var type = OUTPUT_TYPES[i];
    	      method[type] = createOutputMethod(type, is224);
    	    }
    	    return method;
    	  };

    	  var nodeWrap = function (method, is224) {
    	    var crypto = eval("require('crypto')");
    	    var Buffer = eval("require('buffer').Buffer");
    	    var algorithm = is224 ? 'sha224' : 'sha256';
    	    var nodeMethod = function (message) {
    	      if (typeof message === 'string') {
    	        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
    	      } else {
    	        if (message === null || message === undefined) {
    	          throw new Error(ERROR);
    	        } else if (message.constructor === ArrayBuffer) {
    	          message = new Uint8Array(message);
    	        }
    	      }
    	      if (Array.isArray(message) || ArrayBuffer.isView(message) ||
    	        message.constructor === Buffer) {
    	        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
    	      } else {
    	        return method(message);
    	      }
    	    };
    	    return nodeMethod;
    	  };

    	  var createHmacOutputMethod = function (outputType, is224) {
    	    return function (key, message) {
    	      return new HmacSha256(key, is224, true).update(message)[outputType]();
    	    };
    	  };

    	  var createHmacMethod = function (is224) {
    	    var method = createHmacOutputMethod('hex', is224);
    	    method.create = function (key) {
    	      return new HmacSha256(key, is224);
    	    };
    	    method.update = function (key, message) {
    	      return method.create(key).update(message);
    	    };
    	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
    	      var type = OUTPUT_TYPES[i];
    	      method[type] = createHmacOutputMethod(type, is224);
    	    }
    	    return method;
    	  };

    	  function Sha256(is224, sharedMemory) {
    	    if (sharedMemory) {
    	      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
    	        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
    	        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
    	        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    	      this.blocks = blocks;
    	    } else {
    	      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    	    }

    	    if (is224) {
    	      this.h0 = 0xc1059ed8;
    	      this.h1 = 0x367cd507;
    	      this.h2 = 0x3070dd17;
    	      this.h3 = 0xf70e5939;
    	      this.h4 = 0xffc00b31;
    	      this.h5 = 0x68581511;
    	      this.h6 = 0x64f98fa7;
    	      this.h7 = 0xbefa4fa4;
    	    } else { // 256
    	      this.h0 = 0x6a09e667;
    	      this.h1 = 0xbb67ae85;
    	      this.h2 = 0x3c6ef372;
    	      this.h3 = 0xa54ff53a;
    	      this.h4 = 0x510e527f;
    	      this.h5 = 0x9b05688c;
    	      this.h6 = 0x1f83d9ab;
    	      this.h7 = 0x5be0cd19;
    	    }

    	    this.block = this.start = this.bytes = this.hBytes = 0;
    	    this.finalized = this.hashed = false;
    	    this.first = true;
    	    this.is224 = is224;
    	  }

    	  Sha256.prototype.update = function (message) {
    	    if (this.finalized) {
    	      return;
    	    }
    	    var notString, type = typeof message;
    	    if (type !== 'string') {
    	      if (type === 'object') {
    	        if (message === null) {
    	          throw new Error(ERROR);
    	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
    	          message = new Uint8Array(message);
    	        } else if (!Array.isArray(message)) {
    	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
    	            throw new Error(ERROR);
    	          }
    	        }
    	      } else {
    	        throw new Error(ERROR);
    	      }
    	      notString = true;
    	    }
    	    var code, index = 0, i, length = message.length, blocks = this.blocks;

    	    while (index < length) {
    	      if (this.hashed) {
    	        this.hashed = false;
    	        blocks[0] = this.block;
    	        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
    	          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
    	          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
    	          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    	      }

    	      if (notString) {
    	        for (i = this.start; index < length && i < 64; ++index) {
    	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
    	        }
    	      } else {
    	        for (i = this.start; index < length && i < 64; ++index) {
    	          code = message.charCodeAt(index);
    	          if (code < 0x80) {
    	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
    	          } else if (code < 0x800) {
    	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          } else if (code < 0xd800 || code >= 0xe000) {
    	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          } else {
    	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
    	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          }
    	        }
    	      }

    	      this.lastByteIndex = i;
    	      this.bytes += i - this.start;
    	      if (i >= 64) {
    	        this.block = blocks[16];
    	        this.start = i - 64;
    	        this.hash();
    	        this.hashed = true;
    	      } else {
    	        this.start = i;
    	      }
    	    }
    	    if (this.bytes > 4294967295) {
    	      this.hBytes += this.bytes / 4294967296 << 0;
    	      this.bytes = this.bytes % 4294967296;
    	    }
    	    return this;
    	  };

    	  Sha256.prototype.finalize = function () {
    	    if (this.finalized) {
    	      return;
    	    }
    	    this.finalized = true;
    	    var blocks = this.blocks, i = this.lastByteIndex;
    	    blocks[16] = this.block;
    	    blocks[i >> 2] |= EXTRA[i & 3];
    	    this.block = blocks[16];
    	    if (i >= 56) {
    	      if (!this.hashed) {
    	        this.hash();
    	      }
    	      blocks[0] = this.block;
    	      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
    	        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
    	        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
    	        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    	    }
    	    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    	    blocks[15] = this.bytes << 3;
    	    this.hash();
    	  };

    	  Sha256.prototype.hash = function () {
    	    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
    	      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

    	    for (j = 16; j < 64; ++j) {
    	      // rightrotate
    	      t1 = blocks[j - 15];
    	      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
    	      t1 = blocks[j - 2];
    	      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
    	      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
    	    }

    	    bc = b & c;
    	    for (j = 0; j < 64; j += 4) {
    	      if (this.first) {
    	        if (this.is224) {
    	          ab = 300032;
    	          t1 = blocks[0] - 1413257819;
    	          h = t1 - 150054599 << 0;
    	          d = t1 + 24177077 << 0;
    	        } else {
    	          ab = 704751109;
    	          t1 = blocks[0] - 210244248;
    	          h = t1 - 1521486534 << 0;
    	          d = t1 + 143694565 << 0;
    	        }
    	        this.first = false;
    	      } else {
    	        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
    	        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
    	        ab = a & b;
    	        maj = ab ^ (a & c) ^ bc;
    	        ch = (e & f) ^ (~e & g);
    	        t1 = h + s1 + ch + K[j] + blocks[j];
    	        t2 = s0 + maj;
    	        h = d + t1 << 0;
    	        d = t1 + t2 << 0;
    	      }
    	      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
    	      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
    	      da = d & a;
    	      maj = da ^ (d & b) ^ ab;
    	      ch = (h & e) ^ (~h & f);
    	      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
    	      t2 = s0 + maj;
    	      g = c + t1 << 0;
    	      c = t1 + t2 << 0;
    	      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
    	      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
    	      cd = c & d;
    	      maj = cd ^ (c & a) ^ da;
    	      ch = (g & h) ^ (~g & e);
    	      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
    	      t2 = s0 + maj;
    	      f = b + t1 << 0;
    	      b = t1 + t2 << 0;
    	      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
    	      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
    	      bc = b & c;
    	      maj = bc ^ (b & d) ^ cd;
    	      ch = (f & g) ^ (~f & h);
    	      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
    	      t2 = s0 + maj;
    	      e = a + t1 << 0;
    	      a = t1 + t2 << 0;
    	    }

    	    this.h0 = this.h0 + a << 0;
    	    this.h1 = this.h1 + b << 0;
    	    this.h2 = this.h2 + c << 0;
    	    this.h3 = this.h3 + d << 0;
    	    this.h4 = this.h4 + e << 0;
    	    this.h5 = this.h5 + f << 0;
    	    this.h6 = this.h6 + g << 0;
    	    this.h7 = this.h7 + h << 0;
    	  };

    	  Sha256.prototype.hex = function () {
    	    this.finalize();

    	    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
    	      h6 = this.h6, h7 = this.h7;

    	    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
    	      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
    	      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
    	      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
    	      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
    	      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
    	      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
    	      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
    	      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
    	      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
    	      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
    	      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
    	      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
    	      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
    	      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
    	      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
    	      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
    	      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
    	      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
    	      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
    	      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
    	      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
    	      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
    	      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
    	      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
    	      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
    	      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
    	      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
    	    if (!this.is224) {
    	      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
    	        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
    	        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
    	        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
    	    }
    	    return hex;
    	  };

    	  Sha256.prototype.toString = Sha256.prototype.hex;

    	  Sha256.prototype.digest = function () {
    	    this.finalize();

    	    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
    	      h6 = this.h6, h7 = this.h7;

    	    var arr = [
    	      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
    	      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
    	      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
    	      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
    	      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
    	      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
    	      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
    	    ];
    	    if (!this.is224) {
    	      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
    	    }
    	    return arr;
    	  };

    	  Sha256.prototype.array = Sha256.prototype.digest;

    	  Sha256.prototype.arrayBuffer = function () {
    	    this.finalize();

    	    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
    	    var dataView = new DataView(buffer);
    	    dataView.setUint32(0, this.h0);
    	    dataView.setUint32(4, this.h1);
    	    dataView.setUint32(8, this.h2);
    	    dataView.setUint32(12, this.h3);
    	    dataView.setUint32(16, this.h4);
    	    dataView.setUint32(20, this.h5);
    	    dataView.setUint32(24, this.h6);
    	    if (!this.is224) {
    	      dataView.setUint32(28, this.h7);
    	    }
    	    return buffer;
    	  };

    	  function HmacSha256(key, is224, sharedMemory) {
    	    var i, type = typeof key;
    	    if (type === 'string') {
    	      var bytes = [], length = key.length, index = 0, code;
    	      for (i = 0; i < length; ++i) {
    	        code = key.charCodeAt(i);
    	        if (code < 0x80) {
    	          bytes[index++] = code;
    	        } else if (code < 0x800) {
    	          bytes[index++] = (0xc0 | (code >> 6));
    	          bytes[index++] = (0x80 | (code & 0x3f));
    	        } else if (code < 0xd800 || code >= 0xe000) {
    	          bytes[index++] = (0xe0 | (code >> 12));
    	          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
    	          bytes[index++] = (0x80 | (code & 0x3f));
    	        } else {
    	          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
    	          bytes[index++] = (0xf0 | (code >> 18));
    	          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
    	          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
    	          bytes[index++] = (0x80 | (code & 0x3f));
    	        }
    	      }
    	      key = bytes;
    	    } else {
    	      if (type === 'object') {
    	        if (key === null) {
    	          throw new Error(ERROR);
    	        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
    	          key = new Uint8Array(key);
    	        } else if (!Array.isArray(key)) {
    	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
    	            throw new Error(ERROR);
    	          }
    	        }
    	      } else {
    	        throw new Error(ERROR);
    	      }
    	    }

    	    if (key.length > 64) {
    	      key = (new Sha256(is224, true)).update(key).array();
    	    }

    	    var oKeyPad = [], iKeyPad = [];
    	    for (i = 0; i < 64; ++i) {
    	      var b = key[i] || 0;
    	      oKeyPad[i] = 0x5c ^ b;
    	      iKeyPad[i] = 0x36 ^ b;
    	    }

    	    Sha256.call(this, is224, sharedMemory);

    	    this.update(iKeyPad);
    	    this.oKeyPad = oKeyPad;
    	    this.inner = true;
    	    this.sharedMemory = sharedMemory;
    	  }
    	  HmacSha256.prototype = new Sha256();

    	  HmacSha256.prototype.finalize = function () {
    	    Sha256.prototype.finalize.call(this);
    	    if (this.inner) {
    	      this.inner = false;
    	      var innerHash = this.array();
    	      Sha256.call(this, this.is224, this.sharedMemory);
    	      this.update(this.oKeyPad);
    	      this.update(innerHash);
    	      Sha256.prototype.finalize.call(this);
    	    }
    	  };

    	  var exports = createMethod();
    	  exports.sha256 = exports;
    	  exports.sha224 = createMethod(true);
    	  exports.sha256.hmac = createHmacMethod();
    	  exports.sha224.hmac = createHmacMethod(true);

    	  if (COMMON_JS) {
    	    module.exports = exports;
    	  } else {
    	    root.sha256 = exports.sha256;
    	    root.sha224 = exports.sha224;
    	  }
    	})(); 
    } (sha256));

    var sha256Exports = sha256.exports;

    /**
     * Returns the SHA224 hash of the buffer.
     * @param data Arraybuffer to encode
     */
    function sha224(data) {
        const shaObj = sha256Exports.sha224.create();
        shaObj.update(data);
        return new Uint8Array(shaObj.array());
    }

    const SELF_AUTHENTICATING_SUFFIX = 2;
    const ANONYMOUS_SUFFIX = 4;
    const MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR = 'aaaaa-aa';
    const fromHexString$1 = (hexString) => { var _a; return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16))); };
    const toHexString$1 = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');
    let Principal$1 = class Principal {
        constructor(_arr) {
            this._arr = _arr;
            this._isPrincipal = true;
        }
        static anonymous() {
            return new this(new Uint8Array([ANONYMOUS_SUFFIX]));
        }
        /**
         * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`
         * @returns {Principal} principal of the management canister
         */
        static managementCanister() {
            return this.fromHex(MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR);
        }
        static selfAuthenticating(publicKey) {
            const sha = sha224(publicKey);
            return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));
        }
        static from(other) {
            if (typeof other === 'string') {
                return Principal.fromText(other);
            }
            else if (typeof other === 'object' &&
                other !== null &&
                other._isPrincipal === true) {
                return new Principal(other._arr);
            }
            throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);
        }
        static fromHex(hex) {
            return new this(fromHexString$1(hex));
        }
        static fromText(text) {
            const canisterIdNoDash = text.toLowerCase().replace(/-/g, '');
            let arr = decode$3(canisterIdNoDash);
            arr = arr.slice(4, arr.length);
            const principal = new this(arr);
            if (principal.toText() !== text) {
                throw new Error(`Principal "${principal.toText()}" does not have a valid checksum (original value "${text}" may not be a valid Principal ID).`);
            }
            return principal;
        }
        static fromUint8Array(arr) {
            return new this(arr);
        }
        isAnonymous() {
            return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;
        }
        toUint8Array() {
            return this._arr;
        }
        toHex() {
            return toHexString$1(this._arr).toUpperCase();
        }
        toText() {
            const checksumArrayBuf = new ArrayBuffer(4);
            const view = new DataView(checksumArrayBuf);
            view.setUint32(0, getCrc32(this._arr));
            const checksum = new Uint8Array(checksumArrayBuf);
            const bytes = Uint8Array.from(this._arr);
            const array = new Uint8Array([...checksum, ...bytes]);
            const result = encode$2(array);
            const matches = result.match(/.{1,5}/g);
            if (!matches) {
                // This should only happen if there's no character, which is unreachable.
                throw new Error();
            }
            return matches.join('-');
        }
        toString() {
            return this.toText();
        }
        /**
         * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification
         * @param {Principal} other - a {@link Principal} to compare
         * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than
         */
        compareTo(other) {
            for (let i = 0; i < Math.min(this._arr.length, other._arr.length); i++) {
                if (this._arr[i] < other._arr[i])
                    return 'lt';
                else if (this._arr[i] > other._arr[i])
                    return 'gt';
            }
            // Here, at least one principal is a prefix of the other principal (they could be the same)
            if (this._arr.length < other._arr.length)
                return 'lt';
            if (this._arr.length > other._arr.length)
                return 'gt';
            return 'eq';
        }
        /**
         * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method
         * @param other a {@link Principal} to compare
         * @returns {boolean} boolean
         */
        ltEq(other) {
            const cmp = this.compareTo(other);
            return cmp == 'lt' || cmp == 'eq';
        }
        /**
         * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method
         * @param other a {@link Principal} to compare
         * @returns {boolean} boolean
         */
        gtEq(other) {
            const cmp = this.compareTo(other);
            return cmp == 'gt' || cmp == 'eq';
        }
    };

    /**
     * An error that happens in the Agent. This is the root of all errors and should be used
     * everywhere in the Agent code (this package).
     *
     * @todo https://github.com/dfinity/agent-js/issues/420
     */
    class AgentError extends Error {
        constructor(message) {
            super(message);
            this.message = message;
            Object.setPrototypeOf(this, AgentError.prototype);
        }
    }

    /**
     * Concatenate multiple array buffers.
     * @param buffers The buffers to concatenate.
     */
    function concat$1(...buffers) {
        const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));
        let index = 0;
        for (const b of buffers) {
            result.set(new Uint8Array(b), index);
            index += b.byteLength;
        }
        return result;
    }
    /**
     * A class that abstracts a pipe-like ArrayBuffer.
     */
    class PipeArrayBuffer {
        /**
         * Creates a new instance of a pipe
         * @param buffer an optional buffer to start with
         * @param length an optional amount of bytes to use for the length.
         */
        constructor(buffer, length = (buffer === null || buffer === void 0 ? void 0 : buffer.byteLength) || 0) {
            this._buffer = buffer || new ArrayBuffer(0);
            this._view = new Uint8Array(this._buffer, 0, length);
        }
        get buffer() {
            // Return a copy of the buffer.
            return this._view.slice();
        }
        get byteLength() {
            return this._view.byteLength;
        }
        /**
         * Read `num` number of bytes from the front of the pipe.
         * @param num The number of bytes to read.
         */
        read(num) {
            const result = this._view.subarray(0, num);
            this._view = this._view.subarray(num);
            return result.slice().buffer;
        }
        readUint8() {
            const result = this._view[0];
            this._view = this._view.subarray(1);
            return result;
        }
        /**
         * Write a buffer to the end of the pipe.
         * @param buf The bytes to write.
         */
        write(buf) {
            const b = new Uint8Array(buf);
            const offset = this._view.byteLength;
            if (this._view.byteOffset + this._view.byteLength + b.byteLength >= this._buffer.byteLength) {
                // Alloc grow the view to include the new bytes.
                this.alloc(b.byteLength);
            }
            else {
                // Update the view to include the new bytes.
                this._view = new Uint8Array(this._buffer, this._view.byteOffset, this._view.byteLength + b.byteLength);
            }
            this._view.set(b, offset);
        }
        /**
         * Whether or not there is more data to read from the buffer
         */
        get end() {
            return this._view.byteLength === 0;
        }
        /**
         * Allocate a fixed amount of memory in the buffer. This does not affect the view.
         * @param amount A number of bytes to add to the buffer.
         */
        alloc(amount) {
            // Add a little bit of exponential growth.
            // tslint:disable-next-line:no-bitwise
            const b = new ArrayBuffer(((this._buffer.byteLength + amount) * 1.2) | 0);
            const v = new Uint8Array(b, 0, this._view.byteLength + amount);
            v.set(this._view);
            this._buffer = b;
            this._view = v;
        }
    }

    /**
     * Hashes a string to a number. Algorithm can be found here:
     * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf
     * @param s
     */
    function idlHash(s) {
        const utf8encoder = new TextEncoder();
        const array = utf8encoder.encode(s);
        let h = 0;
        for (const c of array) {
            h = (h * 223 + c) % 2 ** 32;
        }
        return h;
    }
    /**
     *
     * @param label string
     * @returns number representing hashed label
     */
    function idlLabelToId(label) {
        if (/^_\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {
            const num = +label.slice(1, -1);
            if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {
                return num;
            }
        }
        return idlHash(label);
    }

    function eob() {
        throw new Error('unexpected end of buffer');
    }
    /**
     *
     * @param pipe Pipe from buffer-pipe
     * @param num number
     * @returns Buffer
     */
    function safeRead(pipe, num) {
        if (pipe.byteLength < num) {
            eob();
        }
        return pipe.read(num);
    }
    /**
     * @param pipe
     */
    function safeReadUint8(pipe) {
        const byte = pipe.readUint8();
        if (byte === undefined) {
            eob();
        }
        return byte;
    }
    /**
     * Encode a positive number (or bigint) into a Buffer. The number will be floored to the
     * nearest integer.
     * @param value The number to encode.
     */
    function lebEncode(value) {
        if (typeof value === 'number') {
            value = BigInt(value);
        }
        if (value < BigInt(0)) {
            throw new Error('Cannot leb encode negative values.');
        }
        const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;
        const pipe = new PipeArrayBuffer(new ArrayBuffer(byteLength), 0);
        while (true) {
            const i = Number(value & BigInt(0x7f));
            value /= BigInt(0x80);
            if (value === BigInt(0)) {
                pipe.write(new Uint8Array([i]));
                break;
            }
            else {
                pipe.write(new Uint8Array([i | 0x80]));
            }
        }
        return pipe.buffer;
    }
    /**
     * Decode a leb encoded buffer into a bigint. The number will always be positive (does not
     * support signed leb encoding).
     * @param pipe A Buffer containing the leb encoded bits.
     */
    function lebDecode(pipe) {
        let weight = BigInt(1);
        let value = BigInt(0);
        let byte;
        do {
            byte = safeReadUint8(pipe);
            value += BigInt(byte & 0x7f).valueOf() * weight;
            weight *= BigInt(128);
        } while (byte >= 0x80);
        return value;
    }
    /**
     * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number
     * will be floored to the nearest integer.
     * @param value The number to encode.
     */
    function slebEncode(value) {
        if (typeof value === 'number') {
            value = BigInt(value);
        }
        const isNeg = value < BigInt(0);
        if (isNeg) {
            value = -value - BigInt(1);
        }
        const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;
        const pipe = new PipeArrayBuffer(new ArrayBuffer(byteLength), 0);
        while (true) {
            const i = getLowerBytes(value);
            value /= BigInt(0x80);
            // prettier-ignore
            if ((isNeg && value === BigInt(0) && (i & 0x40) !== 0)
                || (!isNeg && value === BigInt(0) && (i & 0x40) === 0)) {
                pipe.write(new Uint8Array([i]));
                break;
            }
            else {
                pipe.write(new Uint8Array([i | 0x80]));
            }
        }
        function getLowerBytes(num) {
            const bytes = num % BigInt(0x80);
            if (isNeg) {
                // We swap the bits here again, and remove 1 to do two's complement.
                return Number(BigInt(0x80) - bytes - BigInt(1));
            }
            else {
                return Number(bytes);
            }
        }
        return pipe.buffer;
    }
    /**
     * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative
     * signed-leb encoding.
     * @param pipe A Buffer containing the signed leb encoded bits.
     */
    function slebDecode(pipe) {
        // Get the size of the buffer, then cut a buffer of that size.
        const pipeView = new Uint8Array(pipe.buffer);
        let len = 0;
        for (; len < pipeView.byteLength; len++) {
            if (pipeView[len] < 0x80) {
                // If it's a positive number, we reuse lebDecode.
                if ((pipeView[len] & 0x40) === 0) {
                    return lebDecode(pipe);
                }
                break;
            }
        }
        const bytes = new Uint8Array(safeRead(pipe, len + 1));
        let value = BigInt(0);
        for (let i = bytes.byteLength - 1; i >= 0; i--) {
            value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);
        }
        return -value - BigInt(1);
    }
    /**
     *
     * @param value bigint or number
     * @param byteLength number
     * @returns Buffer
     */
    function writeUIntLE(value, byteLength) {
        if (BigInt(value) < BigInt(0)) {
            throw new Error('Cannot write negative values.');
        }
        return writeIntLE(value, byteLength);
    }
    /**
     *
     * @param value
     * @param byteLength
     */
    function writeIntLE(value, byteLength) {
        value = BigInt(value);
        const pipe = new PipeArrayBuffer(new ArrayBuffer(Math.min(1, byteLength)), 0);
        let i = 0;
        let mul = BigInt(256);
        let sub = BigInt(0);
        let byte = Number(value % mul);
        pipe.write(new Uint8Array([byte]));
        while (++i < byteLength) {
            if (value < 0 && sub === BigInt(0) && byte !== 0) {
                sub = BigInt(1);
            }
            byte = Number((value / mul - sub) % BigInt(256));
            pipe.write(new Uint8Array([byte]));
            mul *= BigInt(256);
        }
        return pipe.buffer;
    }
    /**
     *
     * @param pipe Pipe from buffer-pipe
     * @param byteLength number
     * @returns bigint
     */
    function readUIntLE(pipe, byteLength) {
        let val = BigInt(safeReadUint8(pipe));
        let mul = BigInt(1);
        let i = 0;
        while (++i < byteLength) {
            mul *= BigInt(256);
            const byte = BigInt(safeReadUint8(pipe));
            val = val + mul * byte;
        }
        return val;
    }
    /**
     *
     * @param pipe Pipe from buffer-pipe
     * @param byteLength number
     * @returns bigint
     */
    function readIntLE(pipe, byteLength) {
        let val = readUIntLE(pipe, byteLength);
        const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));
        if (val >= mul) {
            val -= mul * BigInt(2);
        }
        return val;
    }

    /**
     * Equivalent to `2 ** n` with support for `BigInt` values
     * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)
     *
     * @param n bigint or integer
     * @returns bigint
     */
    function iexp2(n) {
        const nBig = BigInt(n);
        if (n < 0) {
            throw new RangeError('Input must be non-negative');
        }
        return BigInt(1) << nBig;
    }

    const magicNumber = 'DIDL';
    const toReadableString_max = 400; // will not display arguments after 400chars. Makes sure 2mb blobs don't get inside the error
    function zipWith(xs, ys, f) {
        return xs.map((x, i) => f(x, ys[i]));
    }
    /**
     * An IDL Type Table, which precedes the data in the stream.
     */
    class TypeTable {
        constructor() {
            // List of types. Needs to be an array as the index needs to be stable.
            this._typs = [];
            this._idx = new Map();
        }
        has(obj) {
            return this._idx.has(obj.name);
        }
        add(type, buf) {
            const idx = this._typs.length;
            this._idx.set(type.name, idx);
            this._typs.push(buf);
        }
        merge(obj, knot) {
            const idx = this._idx.get(obj.name);
            const knotIdx = this._idx.get(knot);
            if (idx === undefined) {
                throw new Error('Missing type index for ' + obj);
            }
            if (knotIdx === undefined) {
                throw new Error('Missing type index for ' + knot);
            }
            this._typs[idx] = this._typs[knotIdx];
            // Delete the type.
            this._typs.splice(knotIdx, 1);
            this._idx.delete(knot);
        }
        encode() {
            const len = lebEncode(this._typs.length);
            const buf = concat$1(...this._typs);
            return concat$1(len, buf);
        }
        indexOf(typeName) {
            if (!this._idx.has(typeName)) {
                throw new Error('Missing type index for ' + typeName);
            }
            return slebEncode(this._idx.get(typeName) || 0);
        }
    }
    class Visitor {
        visitType(t, data) {
            throw new Error('Not implemented');
        }
        visitPrimitive(t, data) {
            return this.visitType(t, data);
        }
        visitEmpty(t, data) {
            return this.visitPrimitive(t, data);
        }
        visitBool(t, data) {
            return this.visitPrimitive(t, data);
        }
        visitNull(t, data) {
            return this.visitPrimitive(t, data);
        }
        visitReserved(t, data) {
            return this.visitPrimitive(t, data);
        }
        visitText(t, data) {
            return this.visitPrimitive(t, data);
        }
        visitNumber(t, data) {
            return this.visitPrimitive(t, data);
        }
        visitInt(t, data) {
            return this.visitNumber(t, data);
        }
        visitNat(t, data) {
            return this.visitNumber(t, data);
        }
        visitFloat(t, data) {
            return this.visitPrimitive(t, data);
        }
        visitFixedInt(t, data) {
            return this.visitNumber(t, data);
        }
        visitFixedNat(t, data) {
            return this.visitNumber(t, data);
        }
        visitPrincipal(t, data) {
            return this.visitPrimitive(t, data);
        }
        visitConstruct(t, data) {
            return this.visitType(t, data);
        }
        visitVec(t, ty, data) {
            return this.visitConstruct(t, data);
        }
        visitOpt(t, ty, data) {
            return this.visitConstruct(t, data);
        }
        visitRecord(t, fields, data) {
            return this.visitConstruct(t, data);
        }
        visitTuple(t, components, data) {
            const fields = components.map((ty, i) => [`_${i}_`, ty]);
            return this.visitRecord(t, fields, data);
        }
        visitVariant(t, fields, data) {
            return this.visitConstruct(t, data);
        }
        visitRec(t, ty, data) {
            return this.visitConstruct(ty, data);
        }
        visitFunc(t, data) {
            return this.visitConstruct(t, data);
        }
        visitService(t, data) {
            return this.visitConstruct(t, data);
        }
    }
    /**
     * Represents an IDL type.
     */
    class Type {
        /* Display type name */
        display() {
            return this.name;
        }
        valueToString(x) {
            return toReadableString(x);
        }
        /* Implement `T` in the IDL spec, only needed for non-primitive types */
        buildTypeTable(typeTable) {
            if (!typeTable.has(this)) {
                this._buildTypeTableImpl(typeTable);
            }
        }
    }
    class PrimitiveType extends Type {
        checkType(t) {
            if (this.name !== t.name) {
                throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
            }
            return t;
        }
        _buildTypeTableImpl(typeTable) {
            // No type table encoding for Primitive types.
            return;
        }
    }
    class ConstructType extends Type {
        checkType(t) {
            if (t instanceof RecClass) {
                const ty = t.getType();
                if (typeof ty === 'undefined') {
                    throw new Error('type mismatch with uninitialized type');
                }
                return ty;
            }
            throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
        }
        encodeType(typeTable) {
            return typeTable.indexOf(this.name);
        }
    }
    /**
     * Represents an IDL Empty, a type which has no inhabitants.
     * Since no values exist for this type, it cannot be serialised or deserialised.
     * Result types like `Result<Text, Empty>` should always succeed.
     */
    class EmptyClass extends PrimitiveType {
        accept(v, d) {
            return v.visitEmpty(this, d);
        }
        covariant(x) {
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue() {
            throw new Error('Empty cannot appear as a function argument');
        }
        valueToString() {
            throw new Error('Empty cannot appear as a value');
        }
        encodeType() {
            return slebEncode(-17 /* IDLTypeIds.Empty */);
        }
        decodeValue() {
            throw new Error('Empty cannot appear as an output');
        }
        get name() {
            return 'empty';
        }
    }
    /**
     * Represents an IDL Unknown, a placeholder type for deserialization only.
     * When decoding a value as Unknown, all fields will be retained but the names are only available in
     * hashed form.
     * A deserialized unknown will offer it's actual type by calling the `type()` function.
     * Unknown cannot be serialized and attempting to do so will throw an error.
     */
    class UnknownClass extends Type {
        checkType(t) {
            throw new Error('Method not implemented for unknown.');
        }
        accept(v, d) {
            throw v.visitType(this, d);
        }
        covariant(x) {
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue() {
            throw new Error('Unknown cannot appear as a function argument');
        }
        valueToString() {
            throw new Error('Unknown cannot appear as a value');
        }
        encodeType() {
            throw new Error('Unknown cannot be serialized');
        }
        decodeValue(b, t) {
            let decodedValue = t.decodeValue(b, t);
            if (Object(decodedValue) !== decodedValue) {
                // decodedValue is primitive. Box it, otherwise we cannot add the type() function.
                // The type() function is important for primitives because otherwise we cannot tell apart the
                // different number types.
                decodedValue = Object(decodedValue);
            }
            let typeFunc;
            if (t instanceof RecClass) {
                typeFunc = () => t.getType();
            }
            else {
                typeFunc = () => t;
            }
            // Do not use 'decodedValue.type = typeFunc' because this would lead to an enumerable property
            // 'type' which means it would be serialized if the value would be candid encoded again.
            // This in turn leads to problems if the decoded value is a variant because these values are
            // only allowed to have a single property.
            Object.defineProperty(decodedValue, 'type', {
                value: typeFunc,
                writable: true,
                enumerable: false,
                configurable: true,
            });
            return decodedValue;
        }
        _buildTypeTableImpl() {
            throw new Error('Unknown cannot be serialized');
        }
        get name() {
            return 'Unknown';
        }
    }
    /**
     * Represents an IDL Bool
     */
    class BoolClass extends PrimitiveType {
        accept(v, d) {
            return v.visitBool(this, d);
        }
        covariant(x) {
            if (typeof x === 'boolean')
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            return new Uint8Array([x ? 1 : 0]);
        }
        encodeType() {
            return slebEncode(-2 /* IDLTypeIds.Bool */);
        }
        decodeValue(b, t) {
            this.checkType(t);
            switch (safeReadUint8(b)) {
                case 0:
                    return false;
                case 1:
                    return true;
                default:
                    throw new Error('Boolean value out of range');
            }
        }
        get name() {
            return 'bool';
        }
    }
    /**
     * Represents an IDL Null
     */
    class NullClass extends PrimitiveType {
        accept(v, d) {
            return v.visitNull(this, d);
        }
        covariant(x) {
            if (x === null)
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue() {
            return new ArrayBuffer(0);
        }
        encodeType() {
            return slebEncode(-1 /* IDLTypeIds.Null */);
        }
        decodeValue(b, t) {
            this.checkType(t);
            return null;
        }
        get name() {
            return 'null';
        }
    }
    /**
     * Represents an IDL Reserved
     */
    class ReservedClass extends PrimitiveType {
        accept(v, d) {
            return v.visitReserved(this, d);
        }
        covariant(x) {
            return true;
        }
        encodeValue() {
            return new ArrayBuffer(0);
        }
        encodeType() {
            return slebEncode(-16 /* IDLTypeIds.Reserved */);
        }
        decodeValue(b, t) {
            if (t.name !== this.name) {
                t.decodeValue(b, t);
            }
            return null;
        }
        get name() {
            return 'reserved';
        }
    }
    /**
     * Represents an IDL Text
     */
    class TextClass extends PrimitiveType {
        accept(v, d) {
            return v.visitText(this, d);
        }
        covariant(x) {
            if (typeof x === 'string')
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            const buf = new TextEncoder().encode(x);
            const len = lebEncode(buf.byteLength);
            return concat$1(len, buf);
        }
        encodeType() {
            return slebEncode(-15 /* IDLTypeIds.Text */);
        }
        decodeValue(b, t) {
            this.checkType(t);
            const len = lebDecode(b);
            const buf = safeRead(b, Number(len));
            const decoder = new TextDecoder('utf8', { fatal: true });
            return decoder.decode(buf);
        }
        get name() {
            return 'text';
        }
        valueToString(x) {
            return '"' + x + '"';
        }
    }
    /**
     * Represents an IDL Int
     */
    class IntClass extends PrimitiveType {
        accept(v, d) {
            return v.visitInt(this, d);
        }
        covariant(x) {
            // We allow encoding of JavaScript plain numbers.
            // But we will always decode to bigint.
            if (typeof x === 'bigint' || Number.isInteger(x))
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            return slebEncode(x);
        }
        encodeType() {
            return slebEncode(-4 /* IDLTypeIds.Int */);
        }
        decodeValue(b, t) {
            this.checkType(t);
            return slebDecode(b);
        }
        get name() {
            return 'int';
        }
        valueToString(x) {
            return x.toString();
        }
    }
    /**
     * Represents an IDL Nat
     */
    class NatClass extends PrimitiveType {
        accept(v, d) {
            return v.visitNat(this, d);
        }
        covariant(x) {
            // We allow encoding of JavaScript plain numbers.
            // But we will always decode to bigint.
            if ((typeof x === 'bigint' && x >= BigInt(0)) || (Number.isInteger(x) && x >= 0))
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            return lebEncode(x);
        }
        encodeType() {
            return slebEncode(-3 /* IDLTypeIds.Nat */);
        }
        decodeValue(b, t) {
            this.checkType(t);
            return lebDecode(b);
        }
        get name() {
            return 'nat';
        }
        valueToString(x) {
            return x.toString();
        }
    }
    /**
     * Represents an IDL Float
     */
    class FloatClass extends PrimitiveType {
        constructor(_bits) {
            super();
            this._bits = _bits;
            if (_bits !== 32 && _bits !== 64) {
                throw new Error('not a valid float type');
            }
        }
        accept(v, d) {
            return v.visitFloat(this, d);
        }
        covariant(x) {
            if (typeof x === 'number' || x instanceof Number)
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            const buf = new ArrayBuffer(this._bits / 8);
            const view = new DataView(buf);
            if (this._bits === 32) {
                view.setFloat32(0, x, true);
            }
            else {
                view.setFloat64(0, x, true);
            }
            return buf;
        }
        encodeType() {
            const opcode = this._bits === 32 ? -13 /* IDLTypeIds.Float32 */ : -14 /* IDLTypeIds.Float64 */;
            return slebEncode(opcode);
        }
        decodeValue(b, t) {
            this.checkType(t);
            const bytes = safeRead(b, this._bits / 8);
            const view = new DataView(bytes);
            if (this._bits === 32) {
                return view.getFloat32(0, true);
            }
            else {
                return view.getFloat64(0, true);
            }
        }
        get name() {
            return 'float' + this._bits;
        }
        valueToString(x) {
            return x.toString();
        }
    }
    /**
     * Represents an IDL fixed-width Int(n)
     */
    class FixedIntClass extends PrimitiveType {
        constructor(_bits) {
            super();
            this._bits = _bits;
        }
        accept(v, d) {
            return v.visitFixedInt(this, d);
        }
        covariant(x) {
            const min = iexp2(this._bits - 1) * BigInt(-1);
            const max = iexp2(this._bits - 1) - BigInt(1);
            let ok = false;
            if (typeof x === 'bigint') {
                ok = x >= min && x <= max;
            }
            else if (Number.isInteger(x)) {
                const v = BigInt(x);
                ok = v >= min && v <= max;
            }
            else {
                ok = false;
            }
            if (ok)
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            return writeIntLE(x, this._bits / 8);
        }
        encodeType() {
            const offset = Math.log2(this._bits) - 3;
            return slebEncode(-9 - offset);
        }
        decodeValue(b, t) {
            this.checkType(t);
            const num = readIntLE(b, this._bits / 8);
            if (this._bits <= 32) {
                return Number(num);
            }
            else {
                return num;
            }
        }
        get name() {
            return `int${this._bits}`;
        }
        valueToString(x) {
            return x.toString();
        }
    }
    /**
     * Represents an IDL fixed-width Nat(n)
     */
    class FixedNatClass extends PrimitiveType {
        constructor(_bits) {
            super();
            this._bits = _bits;
        }
        accept(v, d) {
            return v.visitFixedNat(this, d);
        }
        covariant(x) {
            const max = iexp2(this._bits);
            let ok = false;
            if (typeof x === 'bigint' && x >= BigInt(0)) {
                ok = x < max;
            }
            else if (Number.isInteger(x) && x >= 0) {
                const v = BigInt(x);
                ok = v < max;
            }
            else {
                ok = false;
            }
            if (ok)
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            return writeUIntLE(x, this._bits / 8);
        }
        encodeType() {
            const offset = Math.log2(this._bits) - 3;
            return slebEncode(-5 - offset);
        }
        decodeValue(b, t) {
            this.checkType(t);
            const num = readUIntLE(b, this._bits / 8);
            if (this._bits <= 32) {
                return Number(num);
            }
            else {
                return num;
            }
        }
        get name() {
            return `nat${this._bits}`;
        }
        valueToString(x) {
            return x.toString();
        }
    }
    /**
     * Represents an IDL Array
     *
     * Arrays of fixed-sized nat/int type (e.g. nat8), are encoded from and decoded to TypedArrays (e.g. Uint8Array).
     * Arrays of float or other non-primitive types are encoded/decoded as untyped array in Javascript.
     *
     * @param {Type} t
     */
    class VecClass extends ConstructType {
        constructor(_type) {
            super();
            this._type = _type;
            // If true, this vector is really a blob and we can just use memcpy.
            //
            // NOTE:
            // With support of encoding/dencoding of TypedArrays, this optimization is
            // only used when plain array of bytes are passed as encoding input in order
            // to be backward compatible.
            this._blobOptimization = false;
            if (_type instanceof FixedNatClass && _type._bits === 8) {
                this._blobOptimization = true;
            }
        }
        accept(v, d) {
            return v.visitVec(this, this._type, d);
        }
        covariant(x) {
            // Special case for ArrayBuffer
            const bits = this._type instanceof FixedNatClass
                ? this._type._bits
                : this._type instanceof FixedIntClass
                    ? this._type._bits
                    : 0;
            if ((ArrayBuffer.isView(x) && bits == x.BYTES_PER_ELEMENT * 8) ||
                (Array.isArray(x) &&
                    x.every((v, idx) => {
                        try {
                            return this._type.covariant(v);
                        }
                        catch (e) {
                            throw new Error(`Invalid ${this.display()} argument: \n\nindex ${idx} -> ${e.message}`);
                        }
                    })))
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            const len = lebEncode(x.length);
            if (this._blobOptimization) {
                return concat$1(len, new Uint8Array(x));
            }
            if (ArrayBuffer.isView(x)) {
                return concat$1(len, new Uint8Array(x.buffer));
            }
            const buf = new PipeArrayBuffer(new ArrayBuffer(len.byteLength + x.length), 0);
            buf.write(len);
            for (const d of x) {
                const encoded = this._type.encodeValue(d);
                buf.write(new Uint8Array(encoded));
            }
            return buf.buffer;
        }
        _buildTypeTableImpl(typeTable) {
            this._type.buildTypeTable(typeTable);
            const opCode = slebEncode(-19 /* IDLTypeIds.Vector */);
            const buffer = this._type.encodeType(typeTable);
            typeTable.add(this, concat$1(opCode, buffer));
        }
        decodeValue(b, t) {
            const vec = this.checkType(t);
            if (!(vec instanceof VecClass)) {
                throw new Error('Not a vector type');
            }
            const len = Number(lebDecode(b));
            if (this._type instanceof FixedNatClass) {
                if (this._type._bits == 8) {
                    return new Uint8Array(b.read(len));
                }
                if (this._type._bits == 16) {
                    return new Uint16Array(b.read(len * 2));
                }
                if (this._type._bits == 32) {
                    return new Uint32Array(b.read(len * 4));
                }
                if (this._type._bits == 64) {
                    return new BigUint64Array(b.read(len * 8));
                }
            }
            if (this._type instanceof FixedIntClass) {
                if (this._type._bits == 8) {
                    return new Int8Array(b.read(len));
                }
                if (this._type._bits == 16) {
                    return new Int16Array(b.read(len * 2));
                }
                if (this._type._bits == 32) {
                    return new Int32Array(b.read(len * 4));
                }
                if (this._type._bits == 64) {
                    return new BigInt64Array(b.read(len * 8));
                }
            }
            const rets = [];
            for (let i = 0; i < len; i++) {
                rets.push(this._type.decodeValue(b, vec._type));
            }
            return rets;
        }
        get name() {
            return `vec ${this._type.name}`;
        }
        display() {
            return `vec ${this._type.display()}`;
        }
        valueToString(x) {
            const elements = x.map(e => this._type.valueToString(e));
            return 'vec {' + elements.join('; ') + '}';
        }
    }
    /**
     * Represents an IDL Option
     * @param {Type} t
     */
    class OptClass extends ConstructType {
        constructor(_type) {
            super();
            this._type = _type;
        }
        accept(v, d) {
            return v.visitOpt(this, this._type, d);
        }
        covariant(x) {
            try {
                if (Array.isArray(x) && (x.length === 0 || (x.length === 1 && this._type.covariant(x[0]))))
                    return true;
            }
            catch (e) {
                throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)} \n\n-> ${e.message}`);
            }
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            if (x.length === 0) {
                return new Uint8Array([0]);
            }
            else {
                return concat$1(new Uint8Array([1]), this._type.encodeValue(x[0]));
            }
        }
        _buildTypeTableImpl(typeTable) {
            this._type.buildTypeTable(typeTable);
            const opCode = slebEncode(-18 /* IDLTypeIds.Opt */);
            const buffer = this._type.encodeType(typeTable);
            typeTable.add(this, concat$1(opCode, buffer));
        }
        decodeValue(b, t) {
            const opt = this.checkType(t);
            if (!(opt instanceof OptClass)) {
                throw new Error('Not an option type');
            }
            switch (safeReadUint8(b)) {
                case 0:
                    return [];
                case 1:
                    return [this._type.decodeValue(b, opt._type)];
                default:
                    throw new Error('Not an option value');
            }
        }
        get name() {
            return `opt ${this._type.name}`;
        }
        display() {
            return `opt ${this._type.display()}`;
        }
        valueToString(x) {
            if (x.length === 0) {
                return 'null';
            }
            else {
                return `opt ${this._type.valueToString(x[0])}`;
            }
        }
    }
    /**
     * Represents an IDL Record
     * @param {Object} [fields] - mapping of function name to Type
     */
    class RecordClass extends ConstructType {
        constructor(fields = {}) {
            super();
            this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));
        }
        accept(v, d) {
            return v.visitRecord(this, this._fields, d);
        }
        tryAsTuple() {
            const res = [];
            for (let i = 0; i < this._fields.length; i++) {
                const [key, type] = this._fields[i];
                if (key !== `_${i}_`) {
                    return null;
                }
                res.push(type);
            }
            return res;
        }
        covariant(x) {
            if (typeof x === 'object' &&
                this._fields.every(([k, t]) => {
                    // eslint-disable-next-line
                    if (!x.hasOwnProperty(k)) {
                        throw new Error(`Record is missing key "${k}".`);
                    }
                    try {
                        return t.covariant(x[k]);
                    }
                    catch (e) {
                        throw new Error(`Invalid ${this.display()} argument: \n\nfield ${k} -> ${e.message}`);
                    }
                }))
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            const values = this._fields.map(([key]) => x[key]);
            const bufs = zipWith(this._fields, values, ([, c], d) => c.encodeValue(d));
            return concat$1(...bufs);
        }
        _buildTypeTableImpl(T) {
            this._fields.forEach(([_, value]) => value.buildTypeTable(T));
            const opCode = slebEncode(-20 /* IDLTypeIds.Record */);
            const len = lebEncode(this._fields.length);
            const fields = this._fields.map(([key, value]) => concat$1(lebEncode(idlLabelToId(key)), value.encodeType(T)));
            T.add(this, concat$1(opCode, len, concat$1(...fields)));
        }
        decodeValue(b, t) {
            const record = this.checkType(t);
            if (!(record instanceof RecordClass)) {
                throw new Error('Not a record type');
            }
            const x = {};
            let expectedRecordIdx = 0;
            let actualRecordIdx = 0;
            while (actualRecordIdx < record._fields.length) {
                const [hash, type] = record._fields[actualRecordIdx];
                if (expectedRecordIdx >= this._fields.length) {
                    // skip unexpected left over fields present on the wire
                    type.decodeValue(b, type);
                    actualRecordIdx++;
                    continue;
                }
                const [expectKey, expectType] = this._fields[expectedRecordIdx];
                const expectedId = idlLabelToId(this._fields[expectedRecordIdx][0]);
                const actualId = idlLabelToId(hash);
                if (expectedId === actualId) {
                    // the current field on the wire matches the expected field
                    x[expectKey] = expectType.decodeValue(b, type);
                    expectedRecordIdx++;
                    actualRecordIdx++;
                }
                else if (actualId > expectedId) {
                    // The expected field does not exist on the wire
                    if (expectType instanceof OptClass || expectType instanceof ReservedClass) {
                        x[expectKey] = [];
                        expectedRecordIdx++;
                    }
                    else {
                        throw new Error('Cannot find required field ' + expectKey);
                    }
                }
                else {
                    // The field on the wire does not exist in the output type, so we can skip it
                    type.decodeValue(b, type);
                    actualRecordIdx++;
                }
            }
            // initialize left over expected optional fields
            for (const [expectKey, expectType] of this._fields.slice(expectedRecordIdx)) {
                if (expectType instanceof OptClass || expectType instanceof ReservedClass) {
                    // TODO this assumes null value in opt is represented as []
                    x[expectKey] = [];
                }
                else {
                    throw new Error('Cannot find required field ' + expectKey);
                }
            }
            return x;
        }
        get name() {
            const fields = this._fields.map(([key, value]) => key + ':' + value.name);
            return `record {${fields.join('; ')}}`;
        }
        display() {
            const fields = this._fields.map(([key, value]) => key + ':' + value.display());
            return `record {${fields.join('; ')}}`;
        }
        valueToString(x) {
            const values = this._fields.map(([key]) => x[key]);
            const fields = zipWith(this._fields, values, ([k, c], d) => k + '=' + c.valueToString(d));
            return `record {${fields.join('; ')}}`;
        }
    }
    /**
     * Represents Tuple, a syntactic sugar for Record.
     * @param {Type} components
     */
    class TupleClass extends RecordClass {
        constructor(_components) {
            const x = {};
            _components.forEach((e, i) => (x['_' + i + '_'] = e));
            super(x);
            this._components = _components;
        }
        accept(v, d) {
            return v.visitTuple(this, this._components, d);
        }
        covariant(x) {
            // `>=` because tuples can be covariant when encoded.
            if (Array.isArray(x) &&
                x.length >= this._fields.length &&
                this._components.every((t, i) => {
                    try {
                        return t.covariant(x[i]);
                    }
                    catch (e) {
                        throw new Error(`Invalid ${this.display()} argument: \n\nindex ${i} -> ${e.message}`);
                    }
                }))
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            const bufs = zipWith(this._components, x, (c, d) => c.encodeValue(d));
            return concat$1(...bufs);
        }
        decodeValue(b, t) {
            const tuple = this.checkType(t);
            if (!(tuple instanceof TupleClass)) {
                throw new Error('not a tuple type');
            }
            if (tuple._components.length < this._components.length) {
                throw new Error('tuple mismatch');
            }
            const res = [];
            for (const [i, wireType] of tuple._components.entries()) {
                if (i >= this._components.length) {
                    // skip value
                    wireType.decodeValue(b, wireType);
                }
                else {
                    res.push(this._components[i].decodeValue(b, wireType));
                }
            }
            return res;
        }
        display() {
            const fields = this._components.map(value => value.display());
            return `record {${fields.join('; ')}}`;
        }
        valueToString(values) {
            const fields = zipWith(this._components, values, (c, d) => c.valueToString(d));
            return `record {${fields.join('; ')}}`;
        }
    }
    /**
     * Represents an IDL Variant
     * @param {Object} [fields] - mapping of function name to Type
     */
    class VariantClass extends ConstructType {
        constructor(fields = {}) {
            super();
            this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));
        }
        accept(v, d) {
            return v.visitVariant(this, this._fields, d);
        }
        covariant(x) {
            if (typeof x === 'object' &&
                Object.entries(x).length === 1 &&
                this._fields.every(([k, v]) => {
                    try {
                        // eslint-disable-next-line
                        return !x.hasOwnProperty(k) || v.covariant(x[k]);
                    }
                    catch (e) {
                        throw new Error(`Invalid ${this.display()} argument: \n\nvariant ${k} -> ${e.message}`);
                    }
                }))
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            for (let i = 0; i < this._fields.length; i++) {
                const [name, type] = this._fields[i];
                // eslint-disable-next-line
                if (x.hasOwnProperty(name)) {
                    const idx = lebEncode(i);
                    const buf = type.encodeValue(x[name]);
                    return concat$1(idx, buf);
                }
            }
            throw Error('Variant has no data: ' + x);
        }
        _buildTypeTableImpl(typeTable) {
            this._fields.forEach(([, type]) => {
                type.buildTypeTable(typeTable);
            });
            const opCode = slebEncode(-21 /* IDLTypeIds.Variant */);
            const len = lebEncode(this._fields.length);
            const fields = this._fields.map(([key, value]) => concat$1(lebEncode(idlLabelToId(key)), value.encodeType(typeTable)));
            typeTable.add(this, concat$1(opCode, len, ...fields));
        }
        decodeValue(b, t) {
            const variant = this.checkType(t);
            if (!(variant instanceof VariantClass)) {
                throw new Error('Not a variant type');
            }
            const idx = Number(lebDecode(b));
            if (idx >= variant._fields.length) {
                throw Error('Invalid variant index: ' + idx);
            }
            const [wireHash, wireType] = variant._fields[idx];
            for (const [key, expectType] of this._fields) {
                if (idlLabelToId(wireHash) === idlLabelToId(key)) {
                    const value = expectType.decodeValue(b, wireType);
                    return { [key]: value };
                }
            }
            throw new Error('Cannot find field hash ' + wireHash);
        }
        get name() {
            const fields = this._fields.map(([key, type]) => key + ':' + type.name);
            return `variant {${fields.join('; ')}}`;
        }
        display() {
            const fields = this._fields.map(([key, type]) => key + (type.name === 'null' ? '' : `:${type.display()}`));
            return `variant {${fields.join('; ')}}`;
        }
        valueToString(x) {
            for (const [name, type] of this._fields) {
                // eslint-disable-next-line
                if (x.hasOwnProperty(name)) {
                    const value = type.valueToString(x[name]);
                    if (value === 'null') {
                        return `variant {${name}}`;
                    }
                    else {
                        return `variant {${name}=${value}}`;
                    }
                }
            }
            throw new Error('Variant has no data: ' + x);
        }
    }
    /**
     * Represents a reference to an IDL type, used for defining recursive data
     * types.
     */
    class RecClass extends ConstructType {
        constructor() {
            super(...arguments);
            this._id = RecClass._counter++;
            this._type = undefined;
        }
        accept(v, d) {
            if (!this._type) {
                throw Error('Recursive type uninitialized.');
            }
            return v.visitRec(this, this._type, d);
        }
        fill(t) {
            this._type = t;
        }
        getType() {
            return this._type;
        }
        covariant(x) {
            if (this._type ? this._type.covariant(x) : false)
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            if (!this._type) {
                throw Error('Recursive type uninitialized.');
            }
            return this._type.encodeValue(x);
        }
        _buildTypeTableImpl(typeTable) {
            if (!this._type) {
                throw Error('Recursive type uninitialized.');
            }
            typeTable.add(this, new Uint8Array([]));
            this._type.buildTypeTable(typeTable);
            typeTable.merge(this, this._type.name);
        }
        decodeValue(b, t) {
            if (!this._type) {
                throw Error('Recursive type uninitialized.');
            }
            return this._type.decodeValue(b, t);
        }
        get name() {
            return `rec_${this._id}`;
        }
        display() {
            if (!this._type) {
                throw Error('Recursive type uninitialized.');
            }
            return `μ${this.name}.${this._type.name}`;
        }
        valueToString(x) {
            if (!this._type) {
                throw Error('Recursive type uninitialized.');
            }
            return this._type.valueToString(x);
        }
    }
    RecClass._counter = 0;
    function decodePrincipalId(b) {
        const x = safeReadUint8(b);
        if (x !== 1) {
            throw new Error('Cannot decode principal');
        }
        const len = Number(lebDecode(b));
        return Principal$1.fromUint8Array(new Uint8Array(safeRead(b, len)));
    }
    /**
     * Represents an IDL principal reference
     */
    class PrincipalClass extends PrimitiveType {
        accept(v, d) {
            return v.visitPrincipal(this, d);
        }
        covariant(x) {
            if (x && x._isPrincipal)
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            const buf = x.toUint8Array();
            const len = lebEncode(buf.byteLength);
            return concat$1(new Uint8Array([1]), len, buf);
        }
        encodeType() {
            return slebEncode(-24 /* IDLTypeIds.Principal */);
        }
        decodeValue(b, t) {
            this.checkType(t);
            return decodePrincipalId(b);
        }
        get name() {
            return 'principal';
        }
        valueToString(x) {
            return `${this.name} "${x.toText()}"`;
        }
    }
    /**
     * Represents an IDL function reference.
     * @param argTypes Argument types.
     * @param retTypes Return types.
     * @param annotations Function annotations.
     */
    class FuncClass extends ConstructType {
        constructor(argTypes, retTypes, annotations = []) {
            super();
            this.argTypes = argTypes;
            this.retTypes = retTypes;
            this.annotations = annotations;
        }
        static argsToString(types, v) {
            if (types.length !== v.length) {
                throw new Error('arity mismatch');
            }
            return '(' + types.map((t, i) => t.valueToString(v[i])).join(', ') + ')';
        }
        accept(v, d) {
            return v.visitFunc(this, d);
        }
        covariant(x) {
            if (Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === 'string')
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue([principal, methodName]) {
            const buf = principal.toUint8Array();
            const len = lebEncode(buf.byteLength);
            const canister = concat$1(new Uint8Array([1]), len, buf);
            const method = new TextEncoder().encode(methodName);
            const methodLen = lebEncode(method.byteLength);
            return concat$1(new Uint8Array([1]), canister, methodLen, method);
        }
        _buildTypeTableImpl(T) {
            this.argTypes.forEach(arg => arg.buildTypeTable(T));
            this.retTypes.forEach(arg => arg.buildTypeTable(T));
            const opCode = slebEncode(-22 /* IDLTypeIds.Func */);
            const argLen = lebEncode(this.argTypes.length);
            const args = concat$1(...this.argTypes.map(arg => arg.encodeType(T)));
            const retLen = lebEncode(this.retTypes.length);
            const rets = concat$1(...this.retTypes.map(arg => arg.encodeType(T)));
            const annLen = lebEncode(this.annotations.length);
            const anns = concat$1(...this.annotations.map(a => this.encodeAnnotation(a)));
            T.add(this, concat$1(opCode, argLen, args, retLen, rets, annLen, anns));
        }
        decodeValue(b) {
            const x = safeReadUint8(b);
            if (x !== 1) {
                throw new Error('Cannot decode function reference');
            }
            const canister = decodePrincipalId(b);
            const mLen = Number(lebDecode(b));
            const buf = safeRead(b, mLen);
            const decoder = new TextDecoder('utf8', { fatal: true });
            const method = decoder.decode(buf);
            return [canister, method];
        }
        get name() {
            const args = this.argTypes.map(arg => arg.name).join(', ');
            const rets = this.retTypes.map(arg => arg.name).join(', ');
            const annon = ' ' + this.annotations.join(' ');
            return `(${args}) -> (${rets})${annon}`;
        }
        valueToString([principal, str]) {
            return `func "${principal.toText()}".${str}`;
        }
        display() {
            const args = this.argTypes.map(arg => arg.display()).join(', ');
            const rets = this.retTypes.map(arg => arg.display()).join(', ');
            const annon = ' ' + this.annotations.join(' ');
            return `(${args}) → (${rets})${annon}`;
        }
        encodeAnnotation(ann) {
            if (ann === 'query') {
                return new Uint8Array([1]);
            }
            else if (ann === 'oneway') {
                return new Uint8Array([2]);
            }
            else {
                throw new Error('Illegal function annotation');
            }
        }
    }
    class ServiceClass extends ConstructType {
        constructor(fields) {
            super();
            this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));
        }
        accept(v, d) {
            return v.visitService(this, d);
        }
        covariant(x) {
            if (x && x._isPrincipal)
                return true;
            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
        }
        encodeValue(x) {
            const buf = x.toUint8Array();
            const len = lebEncode(buf.length);
            return concat$1(new Uint8Array([1]), len, buf);
        }
        _buildTypeTableImpl(T) {
            this._fields.forEach(([_, func]) => func.buildTypeTable(T));
            const opCode = slebEncode(-23 /* IDLTypeIds.Service */);
            const len = lebEncode(this._fields.length);
            const meths = this._fields.map(([label, func]) => {
                const labelBuf = new TextEncoder().encode(label);
                const labelLen = lebEncode(labelBuf.length);
                return concat$1(labelLen, labelBuf, func.encodeType(T));
            });
            T.add(this, concat$1(opCode, len, ...meths));
        }
        decodeValue(b) {
            return decodePrincipalId(b);
        }
        get name() {
            const fields = this._fields.map(([key, value]) => key + ':' + value.name);
            return `service {${fields.join('; ')}}`;
        }
        valueToString(x) {
            return `service "${x.toText()}"`;
        }
    }
    /**
     *
     * @param x
     * @returns {string}
     */
    function toReadableString(x) {
        const str = JSON.stringify(x, (_key, value) => typeof value === 'bigint' ? `BigInt(${value})` : value);
        return str && str.length > toReadableString_max
            ? str.substring(0, toReadableString_max - 3) + '...'
            : str;
    }
    /**
     * Encode a array of values
     * @param argTypes
     * @param args
     * @returns {Buffer} serialised value
     */
    function encode$1(argTypes, args) {
        if (args.length < argTypes.length) {
            throw Error('Wrong number of message arguments');
        }
        const typeTable = new TypeTable();
        argTypes.forEach(t => t.buildTypeTable(typeTable));
        const magic = new TextEncoder().encode(magicNumber);
        const table = typeTable.encode();
        const len = lebEncode(args.length);
        const typs = concat$1(...argTypes.map(t => t.encodeType(typeTable)));
        const vals = concat$1(...zipWith(argTypes, args, (t, x) => {
            try {
                t.covariant(x);
            }
            catch (e) {
                const err = new Error(e.message + '\n\n');
                throw err;
            }
            return t.encodeValue(x);
        }));
        return concat$1(magic, table, len, typs, vals);
    }
    /**
     * Decode a binary value
     * @param retTypes - Types expected in the buffer.
     * @param bytes - hex-encoded string, or buffer.
     * @returns Value deserialised to JS type
     */
    function decode$2(retTypes, bytes) {
        const b = new PipeArrayBuffer(bytes);
        if (bytes.byteLength < magicNumber.length) {
            throw new Error('Message length smaller than magic number');
        }
        const magicBuffer = safeRead(b, magicNumber.length);
        const magic = new TextDecoder().decode(magicBuffer);
        if (magic !== magicNumber) {
            throw new Error('Wrong magic number: ' + JSON.stringify(magic));
        }
        function readTypeTable(pipe) {
            const typeTable = [];
            const len = Number(lebDecode(pipe));
            for (let i = 0; i < len; i++) {
                const ty = Number(slebDecode(pipe));
                switch (ty) {
                    case -18 /* IDLTypeIds.Opt */:
                    case -19 /* IDLTypeIds.Vector */: {
                        const t = Number(slebDecode(pipe));
                        typeTable.push([ty, t]);
                        break;
                    }
                    case -20 /* IDLTypeIds.Record */:
                    case -21 /* IDLTypeIds.Variant */: {
                        const fields = [];
                        let objectLength = Number(lebDecode(pipe));
                        let prevHash;
                        while (objectLength--) {
                            const hash = Number(lebDecode(pipe));
                            if (hash >= Math.pow(2, 32)) {
                                throw new Error('field id out of 32-bit range');
                            }
                            if (typeof prevHash === 'number' && prevHash >= hash) {
                                throw new Error('field id collision or not sorted');
                            }
                            prevHash = hash;
                            const t = Number(slebDecode(pipe));
                            fields.push([hash, t]);
                        }
                        typeTable.push([ty, fields]);
                        break;
                    }
                    case -22 /* IDLTypeIds.Func */: {
                        const args = [];
                        let argLength = Number(lebDecode(pipe));
                        while (argLength--) {
                            args.push(Number(slebDecode(pipe)));
                        }
                        const returnValues = [];
                        let returnValuesLength = Number(lebDecode(pipe));
                        while (returnValuesLength--) {
                            returnValues.push(Number(slebDecode(pipe)));
                        }
                        const annotations = [];
                        let annotationLength = Number(lebDecode(pipe));
                        while (annotationLength--) {
                            const annotation = Number(lebDecode(pipe));
                            switch (annotation) {
                                case 1: {
                                    annotations.push('query');
                                    break;
                                }
                                case 2: {
                                    annotations.push('oneway');
                                    break;
                                }
                                default:
                                    throw new Error('unknown annotation');
                            }
                        }
                        typeTable.push([ty, [args, returnValues, annotations]]);
                        break;
                    }
                    case -23 /* IDLTypeIds.Service */: {
                        let servLength = Number(lebDecode(pipe));
                        const methods = [];
                        while (servLength--) {
                            const nameLength = Number(lebDecode(pipe));
                            const funcName = new TextDecoder().decode(safeRead(pipe, nameLength));
                            const funcType = slebDecode(pipe);
                            methods.push([funcName, funcType]);
                        }
                        typeTable.push([ty, methods]);
                        break;
                    }
                    default:
                        throw new Error('Illegal op_code: ' + ty);
                }
            }
            const rawList = [];
            const length = Number(lebDecode(pipe));
            for (let i = 0; i < length; i++) {
                rawList.push(Number(slebDecode(pipe)));
            }
            return [typeTable, rawList];
        }
        const [rawTable, rawTypes] = readTypeTable(b);
        if (rawTypes.length < retTypes.length) {
            throw new Error('Wrong number of return values');
        }
        const table = rawTable.map(_ => Rec());
        function getType(t) {
            if (t < -24) {
                throw new Error('future value not supported');
            }
            if (t < 0) {
                switch (t) {
                    case -1:
                        return Null;
                    case -2:
                        return Bool;
                    case -3:
                        return Nat;
                    case -4:
                        return Int;
                    case -5:
                        return Nat8;
                    case -6:
                        return Nat16;
                    case -7:
                        return Nat32;
                    case -8:
                        return Nat64;
                    case -9:
                        return Int8;
                    case -10:
                        return Int16;
                    case -11:
                        return Int32;
                    case -12:
                        return Int64;
                    case -13:
                        return Float32;
                    case -14:
                        return Float64;
                    case -15:
                        return Text;
                    case -16:
                        return Reserved;
                    case -17:
                        return Empty;
                    case -24:
                        return Principal;
                    default:
                        throw new Error('Illegal op_code: ' + t);
                }
            }
            if (t >= rawTable.length) {
                throw new Error('type index out of range');
            }
            return table[t];
        }
        function buildType(entry) {
            switch (entry[0]) {
                case -19 /* IDLTypeIds.Vector */: {
                    const ty = getType(entry[1]);
                    return Vec(ty);
                }
                case -18 /* IDLTypeIds.Opt */: {
                    const ty = getType(entry[1]);
                    return Opt(ty);
                }
                case -20 /* IDLTypeIds.Record */: {
                    const fields = {};
                    for (const [hash, ty] of entry[1]) {
                        const name = `_${hash}_`;
                        fields[name] = getType(ty);
                    }
                    const record = Record(fields);
                    const tuple = record.tryAsTuple();
                    if (Array.isArray(tuple)) {
                        return Tuple(...tuple);
                    }
                    else {
                        return record;
                    }
                }
                case -21 /* IDLTypeIds.Variant */: {
                    const fields = {};
                    for (const [hash, ty] of entry[1]) {
                        const name = `_${hash}_`;
                        fields[name] = getType(ty);
                    }
                    return Variant(fields);
                }
                case -22 /* IDLTypeIds.Func */: {
                    const [args, returnValues, annotations] = entry[1];
                    return Func(args.map((t) => getType(t)), returnValues.map((t) => getType(t)), annotations);
                }
                case -23 /* IDLTypeIds.Service */: {
                    const rec = {};
                    const methods = entry[1];
                    for (const [name, typeRef] of methods) {
                        let type = getType(typeRef);
                        if (type instanceof RecClass) {
                            // unpack reference type
                            type = type.getType();
                        }
                        if (!(type instanceof FuncClass)) {
                            throw new Error('Illegal service definition: services can only contain functions');
                        }
                        rec[name] = type;
                    }
                    return Service(rec);
                }
                default:
                    throw new Error('Illegal op_code: ' + entry[0]);
            }
        }
        rawTable.forEach((entry, i) => {
            const t = buildType(entry);
            table[i].fill(t);
        });
        const types = rawTypes.map(t => getType(t));
        const output = retTypes.map((t, i) => {
            return t.decodeValue(b, types[i]);
        });
        // skip unused values
        for (let ind = retTypes.length; ind < types.length; ind++) {
            types[ind].decodeValue(b, types[ind]);
        }
        if (b.byteLength > 0) {
            throw new Error('decode: Left-over bytes');
        }
        return output;
    }
    // Export Types instances.
    const Empty = new EmptyClass();
    const Reserved = new ReservedClass();
    /**
     * Client-only type for deserializing unknown data. Not supported by Candid, and its use is discouraged.
     */
    const Unknown = new UnknownClass();
    const Bool = new BoolClass();
    const Null = new NullClass();
    const Text = new TextClass();
    const Int = new IntClass();
    const Nat = new NatClass();
    const Float32 = new FloatClass(32);
    const Float64 = new FloatClass(64);
    const Int8 = new FixedIntClass(8);
    const Int16 = new FixedIntClass(16);
    const Int32 = new FixedIntClass(32);
    const Int64 = new FixedIntClass(64);
    const Nat8 = new FixedNatClass(8);
    const Nat16 = new FixedNatClass(16);
    const Nat32 = new FixedNatClass(32);
    const Nat64 = new FixedNatClass(64);
    const Principal = new PrincipalClass();
    /**
     *
     * @param types array of any types
     * @returns TupleClass from those types
     */
    function Tuple(...types) {
        return new TupleClass(types);
    }
    /**
     *
     * @param t IDL Type
     * @returns VecClass from that type
     */
    function Vec(t) {
        return new VecClass(t);
    }
    /**
     *
     * @param t IDL Type
     * @returns OptClass of Type
     */
    function Opt(t) {
        return new OptClass(t);
    }
    /**
     *
     * @param t Record of string and IDL Type
     * @returns RecordClass of string and Type
     */
    function Record(t) {
        return new RecordClass(t);
    }
    /**
     *
     * @param fields Record of string and IDL Type
     * @returns VariantClass
     */
    function Variant(fields) {
        return new VariantClass(fields);
    }
    /**
     *
     * @returns new RecClass
     */
    function Rec() {
        return new RecClass();
    }
    /**
     *
     * @param args array of IDL Types
     * @param ret array of IDL Types
     * @param annotations array of strings, [] by default
     * @returns new FuncClass
     */
    function Func(args, ret, annotations = []) {
        return new FuncClass(args, ret, annotations);
    }
    /**
     *
     * @param t Record of string and FuncClass
     * @returns ServiceClass
     */
    function Service(t) {
        return new ServiceClass(t);
    }

    var IDL = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Bool: Bool,
        BoolClass: BoolClass,
        ConstructType: ConstructType,
        Empty: Empty,
        EmptyClass: EmptyClass,
        FixedIntClass: FixedIntClass,
        FixedNatClass: FixedNatClass,
        Float32: Float32,
        Float64: Float64,
        FloatClass: FloatClass,
        Func: Func,
        FuncClass: FuncClass,
        Int: Int,
        Int16: Int16,
        Int32: Int32,
        Int64: Int64,
        Int8: Int8,
        IntClass: IntClass,
        Nat: Nat,
        Nat16: Nat16,
        Nat32: Nat32,
        Nat64: Nat64,
        Nat8: Nat8,
        NatClass: NatClass,
        Null: Null,
        NullClass: NullClass,
        Opt: Opt,
        OptClass: OptClass,
        PrimitiveType: PrimitiveType,
        Principal: Principal,
        PrincipalClass: PrincipalClass,
        Rec: Rec,
        RecClass: RecClass,
        Record: Record,
        RecordClass: RecordClass,
        Reserved: Reserved,
        ReservedClass: ReservedClass,
        Service: Service,
        ServiceClass: ServiceClass,
        Text: Text,
        TextClass: TextClass,
        Tuple: Tuple,
        TupleClass: TupleClass,
        Type: Type,
        Unknown: Unknown,
        UnknownClass: UnknownClass,
        Variant: Variant,
        VariantClass: VariantClass,
        Vec: Vec,
        VecClass: VecClass,
        Visitor: Visitor,
        decode: decode$2,
        encode: encode$1
    });

    var src$1 = {};

    var bignumber = {exports: {}};

    (function (module) {
    (function (globalObject) {

    	/*
    	 *      bignumber.js v9.0.2
    	 *      A JavaScript library for arbitrary-precision arithmetic.
    	 *      https://github.com/MikeMcl/bignumber.js
    	 *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
    	 *      MIT Licensed.
    	 *
    	 *      BigNumber.prototype methods     |  BigNumber methods
    	 *                                      |
    	 *      absoluteValue            abs    |  clone
    	 *      comparedTo                      |  config               set
    	 *      decimalPlaces            dp     |      DECIMAL_PLACES
    	 *      dividedBy                div    |      ROUNDING_MODE
    	 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
    	 *      exponentiatedBy          pow    |      RANGE
    	 *      integerValue                    |      CRYPTO
    	 *      isEqualTo                eq     |      MODULO_MODE
    	 *      isFinite                        |      POW_PRECISION
    	 *      isGreaterThan            gt     |      FORMAT
    	 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
    	 *      isInteger                       |  isBigNumber
    	 *      isLessThan               lt     |  maximum              max
    	 *      isLessThanOrEqualTo      lte    |  minimum              min
    	 *      isNaN                           |  random
    	 *      isNegative                      |  sum
    	 *      isPositive                      |
    	 *      isZero                          |
    	 *      minus                           |
    	 *      modulo                   mod    |
    	 *      multipliedBy             times  |
    	 *      negated                         |
    	 *      plus                            |
    	 *      precision                sd     |
    	 *      shiftedBy                       |
    	 *      squareRoot               sqrt   |
    	 *      toExponential                   |
    	 *      toFixed                         |
    	 *      toFormat                        |
    	 *      toFraction                      |
    	 *      toJSON                          |
    	 *      toNumber                        |
    	 *      toPrecision                     |
    	 *      toString                        |
    	 *      valueOf                         |
    	 *
    	 */


    	  var BigNumber,
    	    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
    	    mathceil = Math.ceil,
    	    mathfloor = Math.floor,

    	    bignumberError = '[BigNumber Error] ',
    	    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

    	    BASE = 1e14,
    	    LOG_BASE = 14,
    	    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
    	    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    	    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
    	    SQRT_BASE = 1e7,

    	    // EDITABLE
    	    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    	    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    	    MAX = 1E9;                                   // 0 to MAX_INT32


    	  /*
    	   * Create and return a BigNumber constructor.
    	   */
    	  function clone(configObject) {
    	    var div, convertBase, parseNumeric,
    	      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
    	      ONE = new BigNumber(1),


    	      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


    	      // The default values below must be integers within the inclusive ranges stated.
    	      // The values can also be changed at run-time using BigNumber.set.

    	      // The maximum number of decimal places for operations involving division.
    	      DECIMAL_PLACES = 20,                     // 0 to MAX

    	      // The rounding mode used when rounding to the above decimal places, and when using
    	      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
    	      // UP         0 Away from zero.
    	      // DOWN       1 Towards zero.
    	      // CEIL       2 Towards +Infinity.
    	      // FLOOR      3 Towards -Infinity.
    	      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    	      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    	      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    	      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    	      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    	      ROUNDING_MODE = 4,                       // 0 to 8

    	      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

    	      // The exponent value at and beneath which toString returns exponential notation.
    	      // Number type: -7
    	      TO_EXP_NEG = -7,                         // 0 to -MAX

    	      // The exponent value at and above which toString returns exponential notation.
    	      // Number type: 21
    	      TO_EXP_POS = 21,                         // 0 to MAX

    	      // RANGE : [MIN_EXP, MAX_EXP]

    	      // The minimum exponent value, beneath which underflow to zero occurs.
    	      // Number type: -324  (5e-324)
    	      MIN_EXP = -1e7,                          // -1 to -MAX

    	      // The maximum exponent value, above which overflow to Infinity occurs.
    	      // Number type:  308  (1.7976931348623157e+308)
    	      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
    	      MAX_EXP = 1e7,                           // 1 to MAX

    	      // Whether to use cryptographically-secure random number generation, if available.
    	      CRYPTO = false,                          // true or false

    	      // The modulo mode used when calculating the modulus: a mod n.
    	      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    	      // The remainder (r) is calculated as: r = a - n * q.
    	      //
    	      // UP        0 The remainder is positive if the dividend is negative, else is negative.
    	      // DOWN      1 The remainder has the same sign as the dividend.
    	      //             This modulo mode is commonly known as 'truncated division' and is
    	      //             equivalent to (a % n) in JavaScript.
    	      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
    	      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
    	      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
    	      //             The remainder is always positive.
    	      //
    	      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
    	      // modes are commonly used for the modulus operation.
    	      // Although the other rounding modes can also be used, they may not give useful results.
    	      MODULO_MODE = 1,                         // 0 to 9

    	      // The maximum number of significant digits of the result of the exponentiatedBy operation.
    	      // If POW_PRECISION is 0, there will be unlimited significant digits.
    	      POW_PRECISION = 0,                       // 0 to MAX

    	      // The format specification used by the BigNumber.prototype.toFormat method.
    	      FORMAT = {
    	        prefix: '',
    	        groupSize: 3,
    	        secondaryGroupSize: 0,
    	        groupSeparator: ',',
    	        decimalSeparator: '.',
    	        fractionGroupSize: 0,
    	        fractionGroupSeparator: '\xA0',        // non-breaking space
    	        suffix: ''
    	      },

    	      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
    	      // '-', '.', whitespace, or repeated character.
    	      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
    	      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
    	      alphabetHasNormalDecimalDigits = true;


    	    //------------------------------------------------------------------------------------------


    	    // CONSTRUCTOR


    	    /*
    	     * The BigNumber constructor and exported function.
    	     * Create and return a new instance of a BigNumber object.
    	     *
    	     * v {number|string|BigNumber} A numeric value.
    	     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
    	     */
    	    function BigNumber(v, b) {
    	      var alphabet, c, caseChanged, e, i, isNum, len, str,
    	        x = this;

    	      // Enable constructor call without `new`.
    	      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

    	      if (b == null) {

    	        if (v && v._isBigNumber === true) {
    	          x.s = v.s;

    	          if (!v.c || v.e > MAX_EXP) {
    	            x.c = x.e = null;
    	          } else if (v.e < MIN_EXP) {
    	            x.c = [x.e = 0];
    	          } else {
    	            x.e = v.e;
    	            x.c = v.c.slice();
    	          }

    	          return;
    	        }

    	        if ((isNum = typeof v == 'number') && v * 0 == 0) {

    	          // Use `1 / n` to handle minus zero also.
    	          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

    	          // Fast path for integers, where n < 2147483648 (2**31).
    	          if (v === ~~v) {
    	            for (e = 0, i = v; i >= 10; i /= 10, e++);

    	            if (e > MAX_EXP) {
    	              x.c = x.e = null;
    	            } else {
    	              x.e = e;
    	              x.c = [v];
    	            }

    	            return;
    	          }

    	          str = String(v);
    	        } else {

    	          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

    	          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
    	        }

    	        // Decimal point?
    	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

    	        // Exponential form?
    	        if ((i = str.search(/e/i)) > 0) {

    	          // Determine exponent.
    	          if (e < 0) e = i;
    	          e += +str.slice(i + 1);
    	          str = str.substring(0, i);
    	        } else if (e < 0) {

    	          // Integer.
    	          e = str.length;
    	        }

    	      } else {

    	        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
    	        intCheck(b, 2, ALPHABET.length, 'Base');

    	        // Allow exponential notation to be used with base 10 argument, while
    	        // also rounding to DECIMAL_PLACES as with other bases.
    	        if (b == 10 && alphabetHasNormalDecimalDigits) {
    	          x = new BigNumber(v);
    	          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
    	        }

    	        str = String(v);

    	        if (isNum = typeof v == 'number') {

    	          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
    	          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

    	          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

    	          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
    	          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
    	            throw Error
    	             (tooManyDigits + v);
    	          }
    	        } else {
    	          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
    	        }

    	        alphabet = ALPHABET.slice(0, b);
    	        e = i = 0;

    	        // Check that str is a valid base b number.
    	        // Don't use RegExp, so alphabet can contain special characters.
    	        for (len = str.length; i < len; i++) {
    	          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
    	            if (c == '.') {

    	              // If '.' is not the first character and it has not be found before.
    	              if (i > e) {
    	                e = len;
    	                continue;
    	              }
    	            } else if (!caseChanged) {

    	              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
    	              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
    	                  str == str.toLowerCase() && (str = str.toUpperCase())) {
    	                caseChanged = true;
    	                i = -1;
    	                e = 0;
    	                continue;
    	              }
    	            }

    	            return parseNumeric(x, String(v), isNum, b);
    	          }
    	        }

    	        // Prevent later check for length on converted number.
    	        isNum = false;
    	        str = convertBase(str, b, 10, x.s);

    	        // Decimal point?
    	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
    	        else e = str.length;
    	      }

    	      // Determine leading zeros.
    	      for (i = 0; str.charCodeAt(i) === 48; i++);

    	      // Determine trailing zeros.
    	      for (len = str.length; str.charCodeAt(--len) === 48;);

    	      if (str = str.slice(i, ++len)) {
    	        len -= i;

    	        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
    	        if (isNum && BigNumber.DEBUG &&
    	          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
    	            throw Error
    	             (tooManyDigits + (x.s * v));
    	        }

    	         // Overflow?
    	        if ((e = e - i - 1) > MAX_EXP) {

    	          // Infinity.
    	          x.c = x.e = null;

    	        // Underflow?
    	        } else if (e < MIN_EXP) {

    	          // Zero.
    	          x.c = [x.e = 0];
    	        } else {
    	          x.e = e;
    	          x.c = [];

    	          // Transform base

    	          // e is the base 10 exponent.
    	          // i is where to slice str to get the first element of the coefficient array.
    	          i = (e + 1) % LOG_BASE;
    	          if (e < 0) i += LOG_BASE;  // i < 1

    	          if (i < len) {
    	            if (i) x.c.push(+str.slice(0, i));

    	            for (len -= LOG_BASE; i < len;) {
    	              x.c.push(+str.slice(i, i += LOG_BASE));
    	            }

    	            i = LOG_BASE - (str = str.slice(i)).length;
    	          } else {
    	            i -= len;
    	          }

    	          for (; i--; str += '0');
    	          x.c.push(+str);
    	        }
    	      } else {

    	        // Zero.
    	        x.c = [x.e = 0];
    	      }
    	    }


    	    // CONSTRUCTOR PROPERTIES


    	    BigNumber.clone = clone;

    	    BigNumber.ROUND_UP = 0;
    	    BigNumber.ROUND_DOWN = 1;
    	    BigNumber.ROUND_CEIL = 2;
    	    BigNumber.ROUND_FLOOR = 3;
    	    BigNumber.ROUND_HALF_UP = 4;
    	    BigNumber.ROUND_HALF_DOWN = 5;
    	    BigNumber.ROUND_HALF_EVEN = 6;
    	    BigNumber.ROUND_HALF_CEIL = 7;
    	    BigNumber.ROUND_HALF_FLOOR = 8;
    	    BigNumber.EUCLID = 9;


    	    /*
    	     * Configure infrequently-changing library-wide settings.
    	     *
    	     * Accept an object with the following optional properties (if the value of a property is
    	     * a number, it must be an integer within the inclusive range stated):
    	     *
    	     *   DECIMAL_PLACES   {number}           0 to MAX
    	     *   ROUNDING_MODE    {number}           0 to 8
    	     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
    	     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
    	     *   CRYPTO           {boolean}          true or false
    	     *   MODULO_MODE      {number}           0 to 9
    	     *   POW_PRECISION       {number}           0 to MAX
    	     *   ALPHABET         {string}           A string of two or more unique characters which does
    	     *                                       not contain '.'.
    	     *   FORMAT           {object}           An object with some of the following properties:
    	     *     prefix                 {string}
    	     *     groupSize              {number}
    	     *     secondaryGroupSize     {number}
    	     *     groupSeparator         {string}
    	     *     decimalSeparator       {string}
    	     *     fractionGroupSize      {number}
    	     *     fractionGroupSeparator {string}
    	     *     suffix                 {string}
    	     *
    	     * (The values assigned to the above FORMAT object properties are not checked for validity.)
    	     *
    	     * E.g.
    	     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
    	     *
    	     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
    	     *
    	     * Return an object with the properties current values.
    	     */
    	    BigNumber.config = BigNumber.set = function (obj) {
    	      var p, v;

    	      if (obj != null) {

    	        if (typeof obj == 'object') {

    	          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
    	          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
    	          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
    	            v = obj[p];
    	            intCheck(v, 0, MAX, p);
    	            DECIMAL_PLACES = v;
    	          }

    	          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
    	          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
    	          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
    	            v = obj[p];
    	            intCheck(v, 0, 8, p);
    	            ROUNDING_MODE = v;
    	          }

    	          // EXPONENTIAL_AT {number|number[]}
    	          // Integer, -MAX to MAX inclusive or
    	          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
    	          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
    	          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
    	            v = obj[p];
    	            if (v && v.pop) {
    	              intCheck(v[0], -MAX, 0, p);
    	              intCheck(v[1], 0, MAX, p);
    	              TO_EXP_NEG = v[0];
    	              TO_EXP_POS = v[1];
    	            } else {
    	              intCheck(v, -MAX, MAX, p);
    	              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
    	            }
    	          }

    	          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
    	          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
    	          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
    	          if (obj.hasOwnProperty(p = 'RANGE')) {
    	            v = obj[p];
    	            if (v && v.pop) {
    	              intCheck(v[0], -MAX, -1, p);
    	              intCheck(v[1], 1, MAX, p);
    	              MIN_EXP = v[0];
    	              MAX_EXP = v[1];
    	            } else {
    	              intCheck(v, -MAX, MAX, p);
    	              if (v) {
    	                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
    	              } else {
    	                throw Error
    	                 (bignumberError + p + ' cannot be zero: ' + v);
    	              }
    	            }
    	          }

    	          // CRYPTO {boolean} true or false.
    	          // '[BigNumber Error] CRYPTO not true or false: {v}'
    	          // '[BigNumber Error] crypto unavailable'
    	          if (obj.hasOwnProperty(p = 'CRYPTO')) {
    	            v = obj[p];
    	            if (v === !!v) {
    	              if (v) {
    	                if (typeof crypto != 'undefined' && crypto &&
    	                 (crypto.getRandomValues || crypto.randomBytes)) {
    	                  CRYPTO = v;
    	                } else {
    	                  CRYPTO = !v;
    	                  throw Error
    	                   (bignumberError + 'crypto unavailable');
    	                }
    	              } else {
    	                CRYPTO = v;
    	              }
    	            } else {
    	              throw Error
    	               (bignumberError + p + ' not true or false: ' + v);
    	            }
    	          }

    	          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
    	          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
    	          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
    	            v = obj[p];
    	            intCheck(v, 0, 9, p);
    	            MODULO_MODE = v;
    	          }

    	          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
    	          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
    	          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
    	            v = obj[p];
    	            intCheck(v, 0, MAX, p);
    	            POW_PRECISION = v;
    	          }

    	          // FORMAT {object}
    	          // '[BigNumber Error] FORMAT not an object: {v}'
    	          if (obj.hasOwnProperty(p = 'FORMAT')) {
    	            v = obj[p];
    	            if (typeof v == 'object') FORMAT = v;
    	            else throw Error
    	             (bignumberError + p + ' not an object: ' + v);
    	          }

    	          // ALPHABET {string}
    	          // '[BigNumber Error] ALPHABET invalid: {v}'
    	          if (obj.hasOwnProperty(p = 'ALPHABET')) {
    	            v = obj[p];

    	            // Disallow if less than two characters,
    	            // or if it contains '+', '-', '.', whitespace, or a repeated character.
    	            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
    	              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
    	              ALPHABET = v;
    	            } else {
    	              throw Error
    	               (bignumberError + p + ' invalid: ' + v);
    	            }
    	          }

    	        } else {

    	          // '[BigNumber Error] Object expected: {v}'
    	          throw Error
    	           (bignumberError + 'Object expected: ' + obj);
    	        }
    	      }

    	      return {
    	        DECIMAL_PLACES: DECIMAL_PLACES,
    	        ROUNDING_MODE: ROUNDING_MODE,
    	        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
    	        RANGE: [MIN_EXP, MAX_EXP],
    	        CRYPTO: CRYPTO,
    	        MODULO_MODE: MODULO_MODE,
    	        POW_PRECISION: POW_PRECISION,
    	        FORMAT: FORMAT,
    	        ALPHABET: ALPHABET
    	      };
    	    };


    	    /*
    	     * Return true if v is a BigNumber instance, otherwise return false.
    	     *
    	     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
    	     *
    	     * v {any}
    	     *
    	     * '[BigNumber Error] Invalid BigNumber: {v}'
    	     */
    	    BigNumber.isBigNumber = function (v) {
    	      if (!v || v._isBigNumber !== true) return false;
    	      if (!BigNumber.DEBUG) return true;

    	      var i, n,
    	        c = v.c,
    	        e = v.e,
    	        s = v.s;

    	      out: if ({}.toString.call(c) == '[object Array]') {

    	        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

    	          // If the first element is zero, the BigNumber value must be zero.
    	          if (c[0] === 0) {
    	            if (e === 0 && c.length === 1) return true;
    	            break out;
    	          }

    	          // Calculate number of digits that c[0] should have, based on the exponent.
    	          i = (e + 1) % LOG_BASE;
    	          if (i < 1) i += LOG_BASE;

    	          // Calculate number of digits of c[0].
    	          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
    	          if (String(c[0]).length == i) {

    	            for (i = 0; i < c.length; i++) {
    	              n = c[i];
    	              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
    	            }

    	            // Last element cannot be zero, unless it is the only element.
    	            if (n !== 0) return true;
    	          }
    	        }

    	      // Infinity/NaN
    	      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
    	        return true;
    	      }

    	      throw Error
    	        (bignumberError + 'Invalid BigNumber: ' + v);
    	    };


    	    /*
    	     * Return a new BigNumber whose value is the maximum of the arguments.
    	     *
    	     * arguments {number|string|BigNumber}
    	     */
    	    BigNumber.maximum = BigNumber.max = function () {
    	      return maxOrMin(arguments, P.lt);
    	    };


    	    /*
    	     * Return a new BigNumber whose value is the minimum of the arguments.
    	     *
    	     * arguments {number|string|BigNumber}
    	     */
    	    BigNumber.minimum = BigNumber.min = function () {
    	      return maxOrMin(arguments, P.gt);
    	    };


    	    /*
    	     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
    	     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
    	     * zeros are produced).
    	     *
    	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
    	     * '[BigNumber Error] crypto unavailable'
    	     */
    	    BigNumber.random = (function () {
    	      var pow2_53 = 0x20000000000000;

    	      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
    	      // Check if Math.random() produces more than 32 bits of randomness.
    	      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
    	      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
    	      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
    	       ? function () { return mathfloor(Math.random() * pow2_53); }
    	       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
    	         (Math.random() * 0x800000 | 0); };

    	      return function (dp) {
    	        var a, b, e, k, v,
    	          i = 0,
    	          c = [],
    	          rand = new BigNumber(ONE);

    	        if (dp == null) dp = DECIMAL_PLACES;
    	        else intCheck(dp, 0, MAX);

    	        k = mathceil(dp / LOG_BASE);

    	        if (CRYPTO) {

    	          // Browsers supporting crypto.getRandomValues.
    	          if (crypto.getRandomValues) {

    	            a = crypto.getRandomValues(new Uint32Array(k *= 2));

    	            for (; i < k;) {

    	              // 53 bits:
    	              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
    	              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
    	              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
    	              //                                     11111 11111111 11111111
    	              // 0x20000 is 2^21.
    	              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

    	              // Rejection sampling:
    	              // 0 <= v < 9007199254740992
    	              // Probability that v >= 9e15, is
    	              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
    	              if (v >= 9e15) {
    	                b = crypto.getRandomValues(new Uint32Array(2));
    	                a[i] = b[0];
    	                a[i + 1] = b[1];
    	              } else {

    	                // 0 <= v <= 8999999999999999
    	                // 0 <= (v % 1e14) <= 99999999999999
    	                c.push(v % 1e14);
    	                i += 2;
    	              }
    	            }
    	            i = k / 2;

    	          // Node.js supporting crypto.randomBytes.
    	          } else if (crypto.randomBytes) {

    	            // buffer
    	            a = crypto.randomBytes(k *= 7);

    	            for (; i < k;) {

    	              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
    	              // 0x100000000 is 2^32, 0x1000000 is 2^24
    	              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
    	              // 0 <= v < 9007199254740992
    	              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
    	                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
    	                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

    	              if (v >= 9e15) {
    	                crypto.randomBytes(7).copy(a, i);
    	              } else {

    	                // 0 <= (v % 1e14) <= 99999999999999
    	                c.push(v % 1e14);
    	                i += 7;
    	              }
    	            }
    	            i = k / 7;
    	          } else {
    	            CRYPTO = false;
    	            throw Error
    	             (bignumberError + 'crypto unavailable');
    	          }
    	        }

    	        // Use Math.random.
    	        if (!CRYPTO) {

    	          for (; i < k;) {
    	            v = random53bitInt();
    	            if (v < 9e15) c[i++] = v % 1e14;
    	          }
    	        }

    	        k = c[--i];
    	        dp %= LOG_BASE;

    	        // Convert trailing digits to zeros according to dp.
    	        if (k && dp) {
    	          v = POWS_TEN[LOG_BASE - dp];
    	          c[i] = mathfloor(k / v) * v;
    	        }

    	        // Remove trailing elements which are zero.
    	        for (; c[i] === 0; c.pop(), i--);

    	        // Zero?
    	        if (i < 0) {
    	          c = [e = 0];
    	        } else {

    	          // Remove leading elements which are zero and adjust exponent accordingly.
    	          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

    	          // Count the digits of the first element of c to determine leading zeros, and...
    	          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

    	          // adjust the exponent accordingly.
    	          if (i < LOG_BASE) e -= LOG_BASE - i;
    	        }

    	        rand.e = e;
    	        rand.c = c;
    	        return rand;
    	      };
    	    })();


    	    /*
    	     * Return a BigNumber whose value is the sum of the arguments.
    	     *
    	     * arguments {number|string|BigNumber}
    	     */
    	    BigNumber.sum = function () {
    	      var i = 1,
    	        args = arguments,
    	        sum = new BigNumber(args[0]);
    	      for (; i < args.length;) sum = sum.plus(args[i++]);
    	      return sum;
    	    };


    	    // PRIVATE FUNCTIONS


    	    // Called by BigNumber and BigNumber.prototype.toString.
    	    convertBase = (function () {
    	      var decimal = '0123456789';

    	      /*
    	       * Convert string of baseIn to an array of numbers of baseOut.
    	       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
    	       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
    	       */
    	      function toBaseOut(str, baseIn, baseOut, alphabet) {
    	        var j,
    	          arr = [0],
    	          arrL,
    	          i = 0,
    	          len = str.length;

    	        for (; i < len;) {
    	          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

    	          arr[0] += alphabet.indexOf(str.charAt(i++));

    	          for (j = 0; j < arr.length; j++) {

    	            if (arr[j] > baseOut - 1) {
    	              if (arr[j + 1] == null) arr[j + 1] = 0;
    	              arr[j + 1] += arr[j] / baseOut | 0;
    	              arr[j] %= baseOut;
    	            }
    	          }
    	        }

    	        return arr.reverse();
    	      }

    	      // Convert a numeric string of baseIn to a numeric string of baseOut.
    	      // If the caller is toString, we are converting from base 10 to baseOut.
    	      // If the caller is BigNumber, we are converting from baseIn to base 10.
    	      return function (str, baseIn, baseOut, sign, callerIsToString) {
    	        var alphabet, d, e, k, r, x, xc, y,
    	          i = str.indexOf('.'),
    	          dp = DECIMAL_PLACES,
    	          rm = ROUNDING_MODE;

    	        // Non-integer.
    	        if (i >= 0) {
    	          k = POW_PRECISION;

    	          // Unlimited precision.
    	          POW_PRECISION = 0;
    	          str = str.replace('.', '');
    	          y = new BigNumber(baseIn);
    	          x = y.pow(str.length - i);
    	          POW_PRECISION = k;

    	          // Convert str as if an integer, then restore the fraction part by dividing the
    	          // result by its base raised to a power.

    	          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
    	           10, baseOut, decimal);
    	          y.e = y.c.length;
    	        }

    	        // Convert the number as integer.

    	        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
    	         ? (alphabet = ALPHABET, decimal)
    	         : (alphabet = decimal, ALPHABET));

    	        // xc now represents str as an integer and converted to baseOut. e is the exponent.
    	        e = k = xc.length;

    	        // Remove trailing zeros.
    	        for (; xc[--k] == 0; xc.pop());

    	        // Zero?
    	        if (!xc[0]) return alphabet.charAt(0);

    	        // Does str represent an integer? If so, no need for the division.
    	        if (i < 0) {
    	          --e;
    	        } else {
    	          x.c = xc;
    	          x.e = e;

    	          // The sign is needed for correct rounding.
    	          x.s = sign;
    	          x = div(x, y, dp, rm, baseOut);
    	          xc = x.c;
    	          r = x.r;
    	          e = x.e;
    	        }

    	        // xc now represents str converted to baseOut.

    	        // THe index of the rounding digit.
    	        d = e + dp + 1;

    	        // The rounding digit: the digit to the right of the digit that may be rounded up.
    	        i = xc[d];

    	        // Look at the rounding digits and mode to determine whether to round up.

    	        k = baseOut / 2;
    	        r = r || d < 0 || xc[d + 1] != null;

    	        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
    	              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
    	               rm == (x.s < 0 ? 8 : 7));

    	        // If the index of the rounding digit is not greater than zero, or xc represents
    	        // zero, then the result of the base conversion is zero or, if rounding up, a value
    	        // such as 0.00001.
    	        if (d < 1 || !xc[0]) {

    	          // 1^-dp or 0
    	          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
    	        } else {

    	          // Truncate xc to the required number of decimal places.
    	          xc.length = d;

    	          // Round up?
    	          if (r) {

    	            // Rounding up may mean the previous digit has to be rounded up and so on.
    	            for (--baseOut; ++xc[--d] > baseOut;) {
    	              xc[d] = 0;

    	              if (!d) {
    	                ++e;
    	                xc = [1].concat(xc);
    	              }
    	            }
    	          }

    	          // Determine trailing zeros.
    	          for (k = xc.length; !xc[--k];);

    	          // E.g. [4, 11, 15] becomes 4bf.
    	          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

    	          // Add leading zeros, decimal point and trailing zeros as required.
    	          str = toFixedPoint(str, e, alphabet.charAt(0));
    	        }

    	        // The caller will add the sign.
    	        return str;
    	      };
    	    })();


    	    // Perform division in the specified base. Called by div and convertBase.
    	    div = (function () {

    	      // Assume non-zero x and k.
    	      function multiply(x, k, base) {
    	        var m, temp, xlo, xhi,
    	          carry = 0,
    	          i = x.length,
    	          klo = k % SQRT_BASE,
    	          khi = k / SQRT_BASE | 0;

    	        for (x = x.slice(); i--;) {
    	          xlo = x[i] % SQRT_BASE;
    	          xhi = x[i] / SQRT_BASE | 0;
    	          m = khi * xlo + xhi * klo;
    	          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
    	          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
    	          x[i] = temp % base;
    	        }

    	        if (carry) x = [carry].concat(x);

    	        return x;
    	      }

    	      function compare(a, b, aL, bL) {
    	        var i, cmp;

    	        if (aL != bL) {
    	          cmp = aL > bL ? 1 : -1;
    	        } else {

    	          for (i = cmp = 0; i < aL; i++) {

    	            if (a[i] != b[i]) {
    	              cmp = a[i] > b[i] ? 1 : -1;
    	              break;
    	            }
    	          }
    	        }

    	        return cmp;
    	      }

    	      function subtract(a, b, aL, base) {
    	        var i = 0;

    	        // Subtract b from a.
    	        for (; aL--;) {
    	          a[aL] -= i;
    	          i = a[aL] < b[aL] ? 1 : 0;
    	          a[aL] = i * base + a[aL] - b[aL];
    	        }

    	        // Remove leading zeros.
    	        for (; !a[0] && a.length > 1; a.splice(0, 1));
    	      }

    	      // x: dividend, y: divisor.
    	      return function (x, y, dp, rm, base) {
    	        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
    	          yL, yz,
    	          s = x.s == y.s ? 1 : -1,
    	          xc = x.c,
    	          yc = y.c;

    	        // Either NaN, Infinity or 0?
    	        if (!xc || !xc[0] || !yc || !yc[0]) {

    	          return new BigNumber(

    	           // Return NaN if either NaN, or both Infinity or 0.
    	           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

    	            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
    	            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
    	         );
    	        }

    	        q = new BigNumber(s);
    	        qc = q.c = [];
    	        e = x.e - y.e;
    	        s = dp + e + 1;

    	        if (!base) {
    	          base = BASE;
    	          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
    	          s = s / LOG_BASE | 0;
    	        }

    	        // Result exponent may be one less then the current value of e.
    	        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
    	        for (i = 0; yc[i] == (xc[i] || 0); i++);

    	        if (yc[i] > (xc[i] || 0)) e--;

    	        if (s < 0) {
    	          qc.push(1);
    	          more = true;
    	        } else {
    	          xL = xc.length;
    	          yL = yc.length;
    	          i = 0;
    	          s += 2;

    	          // Normalise xc and yc so highest order digit of yc is >= base / 2.

    	          n = mathfloor(base / (yc[0] + 1));

    	          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
    	          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
    	          if (n > 1) {
    	            yc = multiply(yc, n, base);
    	            xc = multiply(xc, n, base);
    	            yL = yc.length;
    	            xL = xc.length;
    	          }

    	          xi = yL;
    	          rem = xc.slice(0, yL);
    	          remL = rem.length;

    	          // Add zeros to make remainder as long as divisor.
    	          for (; remL < yL; rem[remL++] = 0);
    	          yz = yc.slice();
    	          yz = [0].concat(yz);
    	          yc0 = yc[0];
    	          if (yc[1] >= base / 2) yc0++;
    	          // Not necessary, but to prevent trial digit n > base, when using base 3.
    	          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

    	          do {
    	            n = 0;

    	            // Compare divisor and remainder.
    	            cmp = compare(yc, rem, yL, remL);

    	            // If divisor < remainder.
    	            if (cmp < 0) {

    	              // Calculate trial digit, n.

    	              rem0 = rem[0];
    	              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

    	              // n is how many times the divisor goes into the current remainder.
    	              n = mathfloor(rem0 / yc0);

    	              //  Algorithm:
    	              //  product = divisor multiplied by trial digit (n).
    	              //  Compare product and remainder.
    	              //  If product is greater than remainder:
    	              //    Subtract divisor from product, decrement trial digit.
    	              //  Subtract product from remainder.
    	              //  If product was less than remainder at the last compare:
    	              //    Compare new remainder and divisor.
    	              //    If remainder is greater than divisor:
    	              //      Subtract divisor from remainder, increment trial digit.

    	              if (n > 1) {

    	                // n may be > base only when base is 3.
    	                if (n >= base) n = base - 1;

    	                // product = divisor * trial digit.
    	                prod = multiply(yc, n, base);
    	                prodL = prod.length;
    	                remL = rem.length;

    	                // Compare product and remainder.
    	                // If product > remainder then trial digit n too high.
    	                // n is 1 too high about 5% of the time, and is not known to have
    	                // ever been more than 1 too high.
    	                while (compare(prod, rem, prodL, remL) == 1) {
    	                  n--;

    	                  // Subtract divisor from product.
    	                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
    	                  prodL = prod.length;
    	                  cmp = 1;
    	                }
    	              } else {

    	                // n is 0 or 1, cmp is -1.
    	                // If n is 0, there is no need to compare yc and rem again below,
    	                // so change cmp to 1 to avoid it.
    	                // If n is 1, leave cmp as -1, so yc and rem are compared again.
    	                if (n == 0) {

    	                  // divisor < remainder, so n must be at least 1.
    	                  cmp = n = 1;
    	                }

    	                // product = divisor
    	                prod = yc.slice();
    	                prodL = prod.length;
    	              }

    	              if (prodL < remL) prod = [0].concat(prod);

    	              // Subtract product from remainder.
    	              subtract(rem, prod, remL, base);
    	              remL = rem.length;

    	               // If product was < remainder.
    	              if (cmp == -1) {

    	                // Compare divisor and new remainder.
    	                // If divisor < new remainder, subtract divisor from remainder.
    	                // Trial digit n too low.
    	                // n is 1 too low about 5% of the time, and very rarely 2 too low.
    	                while (compare(yc, rem, yL, remL) < 1) {
    	                  n++;

    	                  // Subtract divisor from remainder.
    	                  subtract(rem, yL < remL ? yz : yc, remL, base);
    	                  remL = rem.length;
    	                }
    	              }
    	            } else if (cmp === 0) {
    	              n++;
    	              rem = [0];
    	            } // else cmp === 1 and n will be 0

    	            // Add the next digit, n, to the result array.
    	            qc[i++] = n;

    	            // Update the remainder.
    	            if (rem[0]) {
    	              rem[remL++] = xc[xi] || 0;
    	            } else {
    	              rem = [xc[xi]];
    	              remL = 1;
    	            }
    	          } while ((xi++ < xL || rem[0] != null) && s--);

    	          more = rem[0] != null;

    	          // Leading zero?
    	          if (!qc[0]) qc.splice(0, 1);
    	        }

    	        if (base == BASE) {

    	          // To calculate q.e, first get the number of digits of qc[0].
    	          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

    	          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

    	        // Caller is convertBase.
    	        } else {
    	          q.e = e;
    	          q.r = +more;
    	        }

    	        return q;
    	      };
    	    })();


    	    /*
    	     * Return a string representing the value of BigNumber n in fixed-point or exponential
    	     * notation rounded to the specified decimal places or significant digits.
    	     *
    	     * n: a BigNumber.
    	     * i: the index of the last digit required (i.e. the digit that may be rounded up).
    	     * rm: the rounding mode.
    	     * id: 1 (toExponential) or 2 (toPrecision).
    	     */
    	    function format(n, i, rm, id) {
    	      var c0, e, ne, len, str;

    	      if (rm == null) rm = ROUNDING_MODE;
    	      else intCheck(rm, 0, 8);

    	      if (!n.c) return n.toString();

    	      c0 = n.c[0];
    	      ne = n.e;

    	      if (i == null) {
    	        str = coeffToString(n.c);
    	        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
    	         ? toExponential(str, ne)
    	         : toFixedPoint(str, ne, '0');
    	      } else {
    	        n = round(new BigNumber(n), i, rm);

    	        // n.e may have changed if the value was rounded up.
    	        e = n.e;

    	        str = coeffToString(n.c);
    	        len = str.length;

    	        // toPrecision returns exponential notation if the number of significant digits
    	        // specified is less than the number of digits necessary to represent the integer
    	        // part of the value in fixed-point notation.

    	        // Exponential notation.
    	        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

    	          // Append zeros?
    	          for (; len < i; str += '0', len++);
    	          str = toExponential(str, e);

    	        // Fixed-point notation.
    	        } else {
    	          i -= ne;
    	          str = toFixedPoint(str, e, '0');

    	          // Append zeros?
    	          if (e + 1 > len) {
    	            if (--i > 0) for (str += '.'; i--; str += '0');
    	          } else {
    	            i += e - len;
    	            if (i > 0) {
    	              if (e + 1 == len) str += '.';
    	              for (; i--; str += '0');
    	            }
    	          }
    	        }
    	      }

    	      return n.s < 0 && c0 ? '-' + str : str;
    	    }


    	    // Handle BigNumber.max and BigNumber.min.
    	    function maxOrMin(args, method) {
    	      var n,
    	        i = 1,
    	        m = new BigNumber(args[0]);

    	      for (; i < args.length; i++) {
    	        n = new BigNumber(args[i]);

    	        // If any number is NaN, return NaN.
    	        if (!n.s) {
    	          m = n;
    	          break;
    	        } else if (method.call(m, n)) {
    	          m = n;
    	        }
    	      }

    	      return m;
    	    }


    	    /*
    	     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
    	     * Called by minus, plus and times.
    	     */
    	    function normalise(n, c, e) {
    	      var i = 1,
    	        j = c.length;

    	       // Remove trailing zeros.
    	      for (; !c[--j]; c.pop());

    	      // Calculate the base 10 exponent. First get the number of digits of c[0].
    	      for (j = c[0]; j >= 10; j /= 10, i++);

    	      // Overflow?
    	      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

    	        // Infinity.
    	        n.c = n.e = null;

    	      // Underflow?
    	      } else if (e < MIN_EXP) {

    	        // Zero.
    	        n.c = [n.e = 0];
    	      } else {
    	        n.e = e;
    	        n.c = c;
    	      }

    	      return n;
    	    }


    	    // Handle values that fail the validity test in BigNumber.
    	    parseNumeric = (function () {
    	      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
    	        dotAfter = /^([^.]+)\.$/,
    	        dotBefore = /^\.([^.]+)$/,
    	        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
    	        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

    	      return function (x, str, isNum, b) {
    	        var base,
    	          s = isNum ? str : str.replace(whitespaceOrPlus, '');

    	        // No exception on ±Infinity or NaN.
    	        if (isInfinityOrNaN.test(s)) {
    	          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
    	        } else {
    	          if (!isNum) {

    	            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
    	            s = s.replace(basePrefix, function (m, p1, p2) {
    	              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
    	              return !b || b == base ? p1 : m;
    	            });

    	            if (b) {
    	              base = b;

    	              // E.g. '1.' to '1', '.1' to '0.1'
    	              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
    	            }

    	            if (str != s) return new BigNumber(s, base);
    	          }

    	          // '[BigNumber Error] Not a number: {n}'
    	          // '[BigNumber Error] Not a base {b} number: {n}'
    	          if (BigNumber.DEBUG) {
    	            throw Error
    	              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
    	          }

    	          // NaN
    	          x.s = null;
    	        }

    	        x.c = x.e = null;
    	      }
    	    })();


    	    /*
    	     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
    	     * If r is truthy, it is known that there are more digits after the rounding digit.
    	     */
    	    function round(x, sd, rm, r) {
    	      var d, i, j, k, n, ni, rd,
    	        xc = x.c,
    	        pows10 = POWS_TEN;

    	      // if x is not Infinity or NaN...
    	      if (xc) {

    	        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
    	        // n is a base 1e14 number, the value of the element of array x.c containing rd.
    	        // ni is the index of n within x.c.
    	        // d is the number of digits of n.
    	        // i is the index of rd within n including leading zeros.
    	        // j is the actual index of rd within n (if < 0, rd is a leading zero).
    	        out: {

    	          // Get the number of digits of the first element of xc.
    	          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
    	          i = sd - d;

    	          // If the rounding digit is in the first element of xc...
    	          if (i < 0) {
    	            i += LOG_BASE;
    	            j = sd;
    	            n = xc[ni = 0];

    	            // Get the rounding digit at index j of n.
    	            rd = n / pows10[d - j - 1] % 10 | 0;
    	          } else {
    	            ni = mathceil((i + 1) / LOG_BASE);

    	            if (ni >= xc.length) {

    	              if (r) {

    	                // Needed by sqrt.
    	                for (; xc.length <= ni; xc.push(0));
    	                n = rd = 0;
    	                d = 1;
    	                i %= LOG_BASE;
    	                j = i - LOG_BASE + 1;
    	              } else {
    	                break out;
    	              }
    	            } else {
    	              n = k = xc[ni];

    	              // Get the number of digits of n.
    	              for (d = 1; k >= 10; k /= 10, d++);

    	              // Get the index of rd within n.
    	              i %= LOG_BASE;

    	              // Get the index of rd within n, adjusted for leading zeros.
    	              // The number of leading zeros of n is given by LOG_BASE - d.
    	              j = i - LOG_BASE + d;

    	              // Get the rounding digit at index j of n.
    	              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
    	            }
    	          }

    	          r = r || sd < 0 ||

    	          // Are there any non-zero digits after the rounding digit?
    	          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
    	          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
    	           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

    	          r = rm < 4
    	           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
    	           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

    	            // Check whether the digit to the left of the rounding digit is odd.
    	            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
    	             rm == (x.s < 0 ? 8 : 7));

    	          if (sd < 1 || !xc[0]) {
    	            xc.length = 0;

    	            if (r) {

    	              // Convert sd to decimal places.
    	              sd -= x.e + 1;

    	              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
    	              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
    	              x.e = -sd || 0;
    	            } else {

    	              // Zero.
    	              xc[0] = x.e = 0;
    	            }

    	            return x;
    	          }

    	          // Remove excess digits.
    	          if (i == 0) {
    	            xc.length = ni;
    	            k = 1;
    	            ni--;
    	          } else {
    	            xc.length = ni + 1;
    	            k = pows10[LOG_BASE - i];

    	            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
    	            // j > 0 means i > number of leading zeros of n.
    	            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
    	          }

    	          // Round up?
    	          if (r) {

    	            for (; ;) {

    	              // If the digit to be rounded up is in the first element of xc...
    	              if (ni == 0) {

    	                // i will be the length of xc[0] before k is added.
    	                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
    	                j = xc[0] += k;
    	                for (k = 1; j >= 10; j /= 10, k++);

    	                // if i != k the length has increased.
    	                if (i != k) {
    	                  x.e++;
    	                  if (xc[0] == BASE) xc[0] = 1;
    	                }

    	                break;
    	              } else {
    	                xc[ni] += k;
    	                if (xc[ni] != BASE) break;
    	                xc[ni--] = 0;
    	                k = 1;
    	              }
    	            }
    	          }

    	          // Remove trailing zeros.
    	          for (i = xc.length; xc[--i] === 0; xc.pop());
    	        }

    	        // Overflow? Infinity.
    	        if (x.e > MAX_EXP) {
    	          x.c = x.e = null;

    	        // Underflow? Zero.
    	        } else if (x.e < MIN_EXP) {
    	          x.c = [x.e = 0];
    	        }
    	      }

    	      return x;
    	    }


    	    function valueOf(n) {
    	      var str,
    	        e = n.e;

    	      if (e === null) return n.toString();

    	      str = coeffToString(n.c);

    	      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
    	        ? toExponential(str, e)
    	        : toFixedPoint(str, e, '0');

    	      return n.s < 0 ? '-' + str : str;
    	    }


    	    // PROTOTYPE/INSTANCE METHODS


    	    /*
    	     * Return a new BigNumber whose value is the absolute value of this BigNumber.
    	     */
    	    P.absoluteValue = P.abs = function () {
    	      var x = new BigNumber(this);
    	      if (x.s < 0) x.s = 1;
    	      return x;
    	    };


    	    /*
    	     * Return
    	     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
    	     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
    	     *   0 if they have the same value,
    	     *   or null if the value of either is NaN.
    	     */
    	    P.comparedTo = function (y, b) {
    	      return compare(this, new BigNumber(y, b));
    	    };


    	    /*
    	     * If dp is undefined or null or true or false, return the number of decimal places of the
    	     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
    	     *
    	     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
    	     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
    	     * ROUNDING_MODE if rm is omitted.
    	     *
    	     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
    	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
    	     */
    	    P.decimalPlaces = P.dp = function (dp, rm) {
    	      var c, n, v,
    	        x = this;

    	      if (dp != null) {
    	        intCheck(dp, 0, MAX);
    	        if (rm == null) rm = ROUNDING_MODE;
    	        else intCheck(rm, 0, 8);

    	        return round(new BigNumber(x), dp + x.e + 1, rm);
    	      }

    	      if (!(c = x.c)) return null;
    	      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

    	      // Subtract the number of trailing zeros of the last number.
    	      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
    	      if (n < 0) n = 0;

    	      return n;
    	    };


    	    /*
    	     *  n / 0 = I
    	     *  n / N = N
    	     *  n / I = 0
    	     *  0 / n = 0
    	     *  0 / 0 = N
    	     *  0 / N = N
    	     *  0 / I = 0
    	     *  N / n = N
    	     *  N / 0 = N
    	     *  N / N = N
    	     *  N / I = N
    	     *  I / n = I
    	     *  I / 0 = I
    	     *  I / N = N
    	     *  I / I = N
    	     *
    	     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
    	     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
    	     */
    	    P.dividedBy = P.div = function (y, b) {
    	      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    	    };


    	    /*
    	     * Return a new BigNumber whose value is the integer part of dividing the value of this
    	     * BigNumber by the value of BigNumber(y, b).
    	     */
    	    P.dividedToIntegerBy = P.idiv = function (y, b) {
    	      return div(this, new BigNumber(y, b), 0, 1);
    	    };


    	    /*
    	     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
    	     *
    	     * If m is present, return the result modulo m.
    	     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
    	     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
    	     *
    	     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
    	     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
    	     *
    	     * n {number|string|BigNumber} The exponent. An integer.
    	     * [m] {number|string|BigNumber} The modulus.
    	     *
    	     * '[BigNumber Error] Exponent not an integer: {n}'
    	     */
    	    P.exponentiatedBy = P.pow = function (n, m) {
    	      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
    	        x = this;

    	      n = new BigNumber(n);

    	      // Allow NaN and ±Infinity, but not other non-integers.
    	      if (n.c && !n.isInteger()) {
    	        throw Error
    	          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
    	      }

    	      if (m != null) m = new BigNumber(m);

    	      // Exponent of MAX_SAFE_INTEGER is 15.
    	      nIsBig = n.e > 14;

    	      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
    	      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

    	        // The sign of the result of pow when x is negative depends on the evenness of n.
    	        // If +n overflows to ±Infinity, the evenness of n would be not be known.
    	        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
    	        return m ? y.mod(m) : y;
    	      }

    	      nIsNeg = n.s < 0;

    	      if (m) {

    	        // x % m returns NaN if abs(m) is zero, or m is NaN.
    	        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

    	        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

    	        if (isModExp) x = x.mod(m);

    	      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
    	      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
    	      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
    	        // [1, 240000000]
    	        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
    	        // [80000000000000]  [99999750000000]
    	        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

    	        // If x is negative and n is odd, k = -0, else k = 0.
    	        k = x.s < 0 && isOdd(n) ? -0 : 0;

    	        // If x >= 1, k = ±Infinity.
    	        if (x.e > -1) k = 1 / k;

    	        // If n is negative return ±0, else return ±Infinity.
    	        return new BigNumber(nIsNeg ? 1 / k : k);

    	      } else if (POW_PRECISION) {

    	        // Truncating each coefficient array to a length of k after each multiplication
    	        // equates to truncating significant digits to POW_PRECISION + [28, 41],
    	        // i.e. there will be a minimum of 28 guard digits retained.
    	        k = mathceil(POW_PRECISION / LOG_BASE + 2);
    	      }

    	      if (nIsBig) {
    	        half = new BigNumber(0.5);
    	        if (nIsNeg) n.s = 1;
    	        nIsOdd = isOdd(n);
    	      } else {
    	        i = Math.abs(+valueOf(n));
    	        nIsOdd = i % 2;
    	      }

    	      y = new BigNumber(ONE);

    	      // Performs 54 loop iterations for n of 9007199254740991.
    	      for (; ;) {

    	        if (nIsOdd) {
    	          y = y.times(x);
    	          if (!y.c) break;

    	          if (k) {
    	            if (y.c.length > k) y.c.length = k;
    	          } else if (isModExp) {
    	            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
    	          }
    	        }

    	        if (i) {
    	          i = mathfloor(i / 2);
    	          if (i === 0) break;
    	          nIsOdd = i % 2;
    	        } else {
    	          n = n.times(half);
    	          round(n, n.e + 1, 1);

    	          if (n.e > 14) {
    	            nIsOdd = isOdd(n);
    	          } else {
    	            i = +valueOf(n);
    	            if (i === 0) break;
    	            nIsOdd = i % 2;
    	          }
    	        }

    	        x = x.times(x);

    	        if (k) {
    	          if (x.c && x.c.length > k) x.c.length = k;
    	        } else if (isModExp) {
    	          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
    	        }
    	      }

    	      if (isModExp) return y;
    	      if (nIsNeg) y = ONE.div(y);

    	      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    	    };


    	    /*
    	     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
    	     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
    	     *
    	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
    	     */
    	    P.integerValue = function (rm) {
    	      var n = new BigNumber(this);
    	      if (rm == null) rm = ROUNDING_MODE;
    	      else intCheck(rm, 0, 8);
    	      return round(n, n.e + 1, rm);
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
    	     * otherwise return false.
    	     */
    	    P.isEqualTo = P.eq = function (y, b) {
    	      return compare(this, new BigNumber(y, b)) === 0;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is a finite number, otherwise return false.
    	     */
    	    P.isFinite = function () {
    	      return !!this.c;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
    	     * otherwise return false.
    	     */
    	    P.isGreaterThan = P.gt = function (y, b) {
    	      return compare(this, new BigNumber(y, b)) > 0;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is greater than or equal to the value of
    	     * BigNumber(y, b), otherwise return false.
    	     */
    	    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
    	      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

    	    };


    	    /*
    	     * Return true if the value of this BigNumber is an integer, otherwise return false.
    	     */
    	    P.isInteger = function () {
    	      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
    	     * otherwise return false.
    	     */
    	    P.isLessThan = P.lt = function (y, b) {
    	      return compare(this, new BigNumber(y, b)) < 0;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is less than or equal to the value of
    	     * BigNumber(y, b), otherwise return false.
    	     */
    	    P.isLessThanOrEqualTo = P.lte = function (y, b) {
    	      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is NaN, otherwise return false.
    	     */
    	    P.isNaN = function () {
    	      return !this.s;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is negative, otherwise return false.
    	     */
    	    P.isNegative = function () {
    	      return this.s < 0;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is positive, otherwise return false.
    	     */
    	    P.isPositive = function () {
    	      return this.s > 0;
    	    };


    	    /*
    	     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
    	     */
    	    P.isZero = function () {
    	      return !!this.c && this.c[0] == 0;
    	    };


    	    /*
    	     *  n - 0 = n
    	     *  n - N = N
    	     *  n - I = -I
    	     *  0 - n = -n
    	     *  0 - 0 = 0
    	     *  0 - N = N
    	     *  0 - I = -I
    	     *  N - n = N
    	     *  N - 0 = N
    	     *  N - N = N
    	     *  N - I = N
    	     *  I - n = I
    	     *  I - 0 = I
    	     *  I - N = N
    	     *  I - I = N
    	     *
    	     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
    	     * BigNumber(y, b).
    	     */
    	    P.minus = function (y, b) {
    	      var i, j, t, xLTy,
    	        x = this,
    	        a = x.s;

    	      y = new BigNumber(y, b);
    	      b = y.s;

    	      // Either NaN?
    	      if (!a || !b) return new BigNumber(NaN);

    	      // Signs differ?
    	      if (a != b) {
    	        y.s = -b;
    	        return x.plus(y);
    	      }

    	      var xe = x.e / LOG_BASE,
    	        ye = y.e / LOG_BASE,
    	        xc = x.c,
    	        yc = y.c;

    	      if (!xe || !ye) {

    	        // Either Infinity?
    	        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

    	        // Either zero?
    	        if (!xc[0] || !yc[0]) {

    	          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
    	          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

    	           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
    	           ROUNDING_MODE == 3 ? -0 : 0);
    	        }
    	      }

    	      xe = bitFloor(xe);
    	      ye = bitFloor(ye);
    	      xc = xc.slice();

    	      // Determine which is the bigger number.
    	      if (a = xe - ye) {

    	        if (xLTy = a < 0) {
    	          a = -a;
    	          t = xc;
    	        } else {
    	          ye = xe;
    	          t = yc;
    	        }

    	        t.reverse();

    	        // Prepend zeros to equalise exponents.
    	        for (b = a; b--; t.push(0));
    	        t.reverse();
    	      } else {

    	        // Exponents equal. Check digit by digit.
    	        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

    	        for (a = b = 0; b < j; b++) {

    	          if (xc[b] != yc[b]) {
    	            xLTy = xc[b] < yc[b];
    	            break;
    	          }
    	        }
    	      }

    	      // x < y? Point xc to the array of the bigger number.
    	      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

    	      b = (j = yc.length) - (i = xc.length);

    	      // Append zeros to xc if shorter.
    	      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
    	      if (b > 0) for (; b--; xc[i++] = 0);
    	      b = BASE - 1;

    	      // Subtract yc from xc.
    	      for (; j > a;) {

    	        if (xc[--j] < yc[j]) {
    	          for (i = j; i && !xc[--i]; xc[i] = b);
    	          --xc[i];
    	          xc[j] += BASE;
    	        }

    	        xc[j] -= yc[j];
    	      }

    	      // Remove leading zeros and adjust exponent accordingly.
    	      for (; xc[0] == 0; xc.splice(0, 1), --ye);

    	      // Zero?
    	      if (!xc[0]) {

    	        // Following IEEE 754 (2008) 6.3,
    	        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
    	        y.s = ROUNDING_MODE == 3 ? -1 : 1;
    	        y.c = [y.e = 0];
    	        return y;
    	      }

    	      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
    	      // for finite x and y.
    	      return normalise(y, xc, ye);
    	    };


    	    /*
    	     *   n % 0 =  N
    	     *   n % N =  N
    	     *   n % I =  n
    	     *   0 % n =  0
    	     *  -0 % n = -0
    	     *   0 % 0 =  N
    	     *   0 % N =  N
    	     *   0 % I =  0
    	     *   N % n =  N
    	     *   N % 0 =  N
    	     *   N % N =  N
    	     *   N % I =  N
    	     *   I % n =  N
    	     *   I % 0 =  N
    	     *   I % N =  N
    	     *   I % I =  N
    	     *
    	     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
    	     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
    	     */
    	    P.modulo = P.mod = function (y, b) {
    	      var q, s,
    	        x = this;

    	      y = new BigNumber(y, b);

    	      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
    	      if (!x.c || !y.s || y.c && !y.c[0]) {
    	        return new BigNumber(NaN);

    	      // Return x if y is Infinity or x is zero.
    	      } else if (!y.c || x.c && !x.c[0]) {
    	        return new BigNumber(x);
    	      }

    	      if (MODULO_MODE == 9) {

    	        // Euclidian division: q = sign(y) * floor(x / abs(y))
    	        // r = x - qy    where  0 <= r < abs(y)
    	        s = y.s;
    	        y.s = 1;
    	        q = div(x, y, 0, 3);
    	        y.s = s;
    	        q.s *= s;
    	      } else {
    	        q = div(x, y, 0, MODULO_MODE);
    	      }

    	      y = x.minus(q.times(y));

    	      // To match JavaScript %, ensure sign of zero is sign of dividend.
    	      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

    	      return y;
    	    };


    	    /*
    	     *  n * 0 = 0
    	     *  n * N = N
    	     *  n * I = I
    	     *  0 * n = 0
    	     *  0 * 0 = 0
    	     *  0 * N = N
    	     *  0 * I = N
    	     *  N * n = N
    	     *  N * 0 = N
    	     *  N * N = N
    	     *  N * I = N
    	     *  I * n = I
    	     *  I * 0 = N
    	     *  I * N = N
    	     *  I * I = I
    	     *
    	     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
    	     * of BigNumber(y, b).
    	     */
    	    P.multipliedBy = P.times = function (y, b) {
    	      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
    	        base, sqrtBase,
    	        x = this,
    	        xc = x.c,
    	        yc = (y = new BigNumber(y, b)).c;

    	      // Either NaN, ±Infinity or ±0?
    	      if (!xc || !yc || !xc[0] || !yc[0]) {

    	        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
    	        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
    	          y.c = y.e = y.s = null;
    	        } else {
    	          y.s *= x.s;

    	          // Return ±Infinity if either is ±Infinity.
    	          if (!xc || !yc) {
    	            y.c = y.e = null;

    	          // Return ±0 if either is ±0.
    	          } else {
    	            y.c = [0];
    	            y.e = 0;
    	          }
    	        }

    	        return y;
    	      }

    	      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
    	      y.s *= x.s;
    	      xcL = xc.length;
    	      ycL = yc.length;

    	      // Ensure xc points to longer array and xcL to its length.
    	      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

    	      // Initialise the result array with zeros.
    	      for (i = xcL + ycL, zc = []; i--; zc.push(0));

    	      base = BASE;
    	      sqrtBase = SQRT_BASE;

    	      for (i = ycL; --i >= 0;) {
    	        c = 0;
    	        ylo = yc[i] % sqrtBase;
    	        yhi = yc[i] / sqrtBase | 0;

    	        for (k = xcL, j = i + k; j > i;) {
    	          xlo = xc[--k] % sqrtBase;
    	          xhi = xc[k] / sqrtBase | 0;
    	          m = yhi * xlo + xhi * ylo;
    	          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
    	          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
    	          zc[j--] = xlo % base;
    	        }

    	        zc[j] = c;
    	      }

    	      if (c) {
    	        ++e;
    	      } else {
    	        zc.splice(0, 1);
    	      }

    	      return normalise(y, zc, e);
    	    };


    	    /*
    	     * Return a new BigNumber whose value is the value of this BigNumber negated,
    	     * i.e. multiplied by -1.
    	     */
    	    P.negated = function () {
    	      var x = new BigNumber(this);
    	      x.s = -x.s || null;
    	      return x;
    	    };


    	    /*
    	     *  n + 0 = n
    	     *  n + N = N
    	     *  n + I = I
    	     *  0 + n = n
    	     *  0 + 0 = 0
    	     *  0 + N = N
    	     *  0 + I = I
    	     *  N + n = N
    	     *  N + 0 = N
    	     *  N + N = N
    	     *  N + I = N
    	     *  I + n = I
    	     *  I + 0 = I
    	     *  I + N = N
    	     *  I + I = I
    	     *
    	     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
    	     * BigNumber(y, b).
    	     */
    	    P.plus = function (y, b) {
    	      var t,
    	        x = this,
    	        a = x.s;

    	      y = new BigNumber(y, b);
    	      b = y.s;

    	      // Either NaN?
    	      if (!a || !b) return new BigNumber(NaN);

    	      // Signs differ?
    	       if (a != b) {
    	        y.s = -b;
    	        return x.minus(y);
    	      }

    	      var xe = x.e / LOG_BASE,
    	        ye = y.e / LOG_BASE,
    	        xc = x.c,
    	        yc = y.c;

    	      if (!xe || !ye) {

    	        // Return ±Infinity if either ±Infinity.
    	        if (!xc || !yc) return new BigNumber(a / 0);

    	        // Either zero?
    	        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
    	        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
    	      }

    	      xe = bitFloor(xe);
    	      ye = bitFloor(ye);
    	      xc = xc.slice();

    	      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
    	      if (a = xe - ye) {
    	        if (a > 0) {
    	          ye = xe;
    	          t = yc;
    	        } else {
    	          a = -a;
    	          t = xc;
    	        }

    	        t.reverse();
    	        for (; a--; t.push(0));
    	        t.reverse();
    	      }

    	      a = xc.length;
    	      b = yc.length;

    	      // Point xc to the longer array, and b to the shorter length.
    	      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

    	      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
    	      for (a = 0; b;) {
    	        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
    	        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
    	      }

    	      if (a) {
    	        xc = [a].concat(xc);
    	        ++ye;
    	      }

    	      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    	      // ye = MAX_EXP + 1 possible
    	      return normalise(y, xc, ye);
    	    };


    	    /*
    	     * If sd is undefined or null or true or false, return the number of significant digits of
    	     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
    	     * If sd is true include integer-part trailing zeros in the count.
    	     *
    	     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
    	     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
    	     * ROUNDING_MODE if rm is omitted.
    	     *
    	     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
    	     *                     boolean: whether to count integer-part trailing zeros: true or false.
    	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
    	     */
    	    P.precision = P.sd = function (sd, rm) {
    	      var c, n, v,
    	        x = this;

    	      if (sd != null && sd !== !!sd) {
    	        intCheck(sd, 1, MAX);
    	        if (rm == null) rm = ROUNDING_MODE;
    	        else intCheck(rm, 0, 8);

    	        return round(new BigNumber(x), sd, rm);
    	      }

    	      if (!(c = x.c)) return null;
    	      v = c.length - 1;
    	      n = v * LOG_BASE + 1;

    	      if (v = c[v]) {

    	        // Subtract the number of trailing zeros of the last element.
    	        for (; v % 10 == 0; v /= 10, n--);

    	        // Add the number of digits of the first element.
    	        for (v = c[0]; v >= 10; v /= 10, n++);
    	      }

    	      if (sd && x.e + 1 > n) n = x.e + 1;

    	      return n;
    	    };


    	    /*
    	     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
    	     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
    	     *
    	     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
    	     */
    	    P.shiftedBy = function (k) {
    	      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    	      return this.times('1e' + k);
    	    };


    	    /*
    	     *  sqrt(-n) =  N
    	     *  sqrt(N) =  N
    	     *  sqrt(-I) =  N
    	     *  sqrt(I) =  I
    	     *  sqrt(0) =  0
    	     *  sqrt(-0) = -0
    	     *
    	     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
    	     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
    	     */
    	    P.squareRoot = P.sqrt = function () {
    	      var m, n, r, rep, t,
    	        x = this,
    	        c = x.c,
    	        s = x.s,
    	        e = x.e,
    	        dp = DECIMAL_PLACES + 4,
    	        half = new BigNumber('0.5');

    	      // Negative/NaN/Infinity/zero?
    	      if (s !== 1 || !c || !c[0]) {
    	        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
    	      }

    	      // Initial estimate.
    	      s = Math.sqrt(+valueOf(x));

    	      // Math.sqrt underflow/overflow?
    	      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    	      if (s == 0 || s == 1 / 0) {
    	        n = coeffToString(c);
    	        if ((n.length + e) % 2 == 0) n += '0';
    	        s = Math.sqrt(+n);
    	        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

    	        if (s == 1 / 0) {
    	          n = '5e' + e;
    	        } else {
    	          n = s.toExponential();
    	          n = n.slice(0, n.indexOf('e') + 1) + e;
    	        }

    	        r = new BigNumber(n);
    	      } else {
    	        r = new BigNumber(s + '');
    	      }

    	      // Check for zero.
    	      // r could be zero if MIN_EXP is changed after the this value was created.
    	      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
    	      // coeffToString to throw.
    	      if (r.c[0]) {
    	        e = r.e;
    	        s = e + dp;
    	        if (s < 3) s = 0;

    	        // Newton-Raphson iteration.
    	        for (; ;) {
    	          t = r;
    	          r = half.times(t.plus(div(x, t, dp, 1)));

    	          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

    	            // The exponent of r may here be one less than the final result exponent,
    	            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
    	            // are indexed correctly.
    	            if (r.e < e) --s;
    	            n = n.slice(s - 3, s + 1);

    	            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
    	            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
    	            // iteration.
    	            if (n == '9999' || !rep && n == '4999') {

    	              // On the first iteration only, check to see if rounding up gives the
    	              // exact result as the nines may infinitely repeat.
    	              if (!rep) {
    	                round(t, t.e + DECIMAL_PLACES + 2, 0);

    	                if (t.times(t).eq(x)) {
    	                  r = t;
    	                  break;
    	                }
    	              }

    	              dp += 4;
    	              s += 4;
    	              rep = 1;
    	            } else {

    	              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
    	              // result. If not, then there are further digits and m will be truthy.
    	              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

    	                // Truncate to the first rounding digit.
    	                round(r, r.e + DECIMAL_PLACES + 2, 1);
    	                m = !r.times(r).eq(x);
    	              }

    	              break;
    	            }
    	          }
    	        }
    	      }

    	      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    	    };


    	    /*
    	     * Return a string representing the value of this BigNumber in exponential notation and
    	     * rounded using ROUNDING_MODE to dp fixed decimal places.
    	     *
    	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
    	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
    	     */
    	    P.toExponential = function (dp, rm) {
    	      if (dp != null) {
    	        intCheck(dp, 0, MAX);
    	        dp++;
    	      }
    	      return format(this, dp, rm, 1);
    	    };


    	    /*
    	     * Return a string representing the value of this BigNumber in fixed-point notation rounding
    	     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
    	     *
    	     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
    	     * but e.g. (-0.00001).toFixed(0) is '-0'.
    	     *
    	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
    	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
    	     */
    	    P.toFixed = function (dp, rm) {
    	      if (dp != null) {
    	        intCheck(dp, 0, MAX);
    	        dp = dp + this.e + 1;
    	      }
    	      return format(this, dp, rm);
    	    };


    	    /*
    	     * Return a string representing the value of this BigNumber in fixed-point notation rounded
    	     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
    	     * of the format or FORMAT object (see BigNumber.set).
    	     *
    	     * The formatting object may contain some or all of the properties shown below.
    	     *
    	     * FORMAT = {
    	     *   prefix: '',
    	     *   groupSize: 3,
    	     *   secondaryGroupSize: 0,
    	     *   groupSeparator: ',',
    	     *   decimalSeparator: '.',
    	     *   fractionGroupSize: 0,
    	     *   fractionGroupSeparator: '\xA0',      // non-breaking space
    	     *   suffix: ''
    	     * };
    	     *
    	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
    	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
    	     * [format] {object} Formatting options. See FORMAT pbject above.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
    	     * '[BigNumber Error] Argument not an object: {format}'
    	     */
    	    P.toFormat = function (dp, rm, format) {
    	      var str,
    	        x = this;

    	      if (format == null) {
    	        if (dp != null && rm && typeof rm == 'object') {
    	          format = rm;
    	          rm = null;
    	        } else if (dp && typeof dp == 'object') {
    	          format = dp;
    	          dp = rm = null;
    	        } else {
    	          format = FORMAT;
    	        }
    	      } else if (typeof format != 'object') {
    	        throw Error
    	          (bignumberError + 'Argument not an object: ' + format);
    	      }

    	      str = x.toFixed(dp, rm);

    	      if (x.c) {
    	        var i,
    	          arr = str.split('.'),
    	          g1 = +format.groupSize,
    	          g2 = +format.secondaryGroupSize,
    	          groupSeparator = format.groupSeparator || '',
    	          intPart = arr[0],
    	          fractionPart = arr[1],
    	          isNeg = x.s < 0,
    	          intDigits = isNeg ? intPart.slice(1) : intPart,
    	          len = intDigits.length;

    	        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

    	        if (g1 > 0 && len > 0) {
    	          i = len % g1 || g1;
    	          intPart = intDigits.substr(0, i);
    	          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
    	          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
    	          if (isNeg) intPart = '-' + intPart;
    	        }

    	        str = fractionPart
    	         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
    	          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
    	           '$&' + (format.fractionGroupSeparator || ''))
    	          : fractionPart)
    	         : intPart;
    	      }

    	      return (format.prefix || '') + str + (format.suffix || '');
    	    };


    	    /*
    	     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
    	     * fraction with an integer numerator and an integer denominator.
    	     * The denominator will be a positive non-zero value less than or equal to the specified
    	     * maximum denominator. If a maximum denominator is not specified, the denominator will be
    	     * the lowest value necessary to represent the number exactly.
    	     *
    	     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
    	     *
    	     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
    	     */
    	    P.toFraction = function (md) {
    	      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
    	        x = this,
    	        xc = x.c;

    	      if (md != null) {
    	        n = new BigNumber(md);

    	        // Throw if md is less than one or is not an integer, unless it is Infinity.
    	        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
    	          throw Error
    	            (bignumberError + 'Argument ' +
    	              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
    	        }
    	      }

    	      if (!xc) return new BigNumber(x);

    	      d = new BigNumber(ONE);
    	      n1 = d0 = new BigNumber(ONE);
    	      d1 = n0 = new BigNumber(ONE);
    	      s = coeffToString(xc);

    	      // Determine initial denominator.
    	      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
    	      e = d.e = s.length - x.e - 1;
    	      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
    	      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

    	      exp = MAX_EXP;
    	      MAX_EXP = 1 / 0;
    	      n = new BigNumber(s);

    	      // n0 = d1 = 0
    	      n0.c[0] = 0;

    	      for (; ;)  {
    	        q = div(n, d, 0, 1);
    	        d2 = d0.plus(q.times(d1));
    	        if (d2.comparedTo(md) == 1) break;
    	        d0 = d1;
    	        d1 = d2;
    	        n1 = n0.plus(q.times(d2 = n1));
    	        n0 = d2;
    	        d = n.minus(q.times(d2 = d));
    	        n = d2;
    	      }

    	      d2 = div(md.minus(d0), d1, 0, 1);
    	      n0 = n0.plus(d2.times(n1));
    	      d0 = d0.plus(d2.times(d1));
    	      n0.s = n1.s = x.s;
    	      e = e * 2;

    	      // Determine which fraction is closer to x, n0/d0 or n1/d1
    	      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
    	          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

    	      MAX_EXP = exp;

    	      return r;
    	    };


    	    /*
    	     * Return the value of this BigNumber converted to a number primitive.
    	     */
    	    P.toNumber = function () {
    	      return +valueOf(this);
    	    };


    	    /*
    	     * Return a string representing the value of this BigNumber rounded to sd significant digits
    	     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
    	     * necessary to represent the integer part of the value in fixed-point notation, then use
    	     * exponential notation.
    	     *
    	     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
    	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
    	     *
    	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
    	     */
    	    P.toPrecision = function (sd, rm) {
    	      if (sd != null) intCheck(sd, 1, MAX);
    	      return format(this, sd, rm, 2);
    	    };


    	    /*
    	     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
    	     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
    	     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
    	     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
    	     * TO_EXP_NEG, return exponential notation.
    	     *
    	     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
    	     *
    	     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
    	     */
    	    P.toString = function (b) {
    	      var str,
    	        n = this,
    	        s = n.s,
    	        e = n.e;

    	      // Infinity or NaN?
    	      if (e === null) {
    	        if (s) {
    	          str = 'Infinity';
    	          if (s < 0) str = '-' + str;
    	        } else {
    	          str = 'NaN';
    	        }
    	      } else {
    	        if (b == null) {
    	          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
    	           ? toExponential(coeffToString(n.c), e)
    	           : toFixedPoint(coeffToString(n.c), e, '0');
    	        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
    	          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
    	          str = toFixedPoint(coeffToString(n.c), n.e, '0');
    	        } else {
    	          intCheck(b, 2, ALPHABET.length, 'Base');
    	          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
    	        }

    	        if (s < 0 && n.c[0]) str = '-' + str;
    	      }

    	      return str;
    	    };


    	    /*
    	     * Return as toString, but do not accept a base argument, and include the minus sign for
    	     * negative zero.
    	     */
    	    P.valueOf = P.toJSON = function () {
    	      return valueOf(this);
    	    };


    	    P._isBigNumber = true;

    	    if (configObject != null) BigNumber.set(configObject);

    	    return BigNumber;
    	  }


    	  // PRIVATE HELPER FUNCTIONS

    	  // These functions don't need access to variables,
    	  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


    	  function bitFloor(n) {
    	    var i = n | 0;
    	    return n > 0 || n === i ? i : i - 1;
    	  }


    	  // Return a coefficient array as a string of base 10 digits.
    	  function coeffToString(a) {
    	    var s, z,
    	      i = 1,
    	      j = a.length,
    	      r = a[0] + '';

    	    for (; i < j;) {
    	      s = a[i++] + '';
    	      z = LOG_BASE - s.length;
    	      for (; z--; s = '0' + s);
    	      r += s;
    	    }

    	    // Determine trailing zeros.
    	    for (j = r.length; r.charCodeAt(--j) === 48;);

    	    return r.slice(0, j + 1 || 1);
    	  }


    	  // Compare the value of BigNumbers x and y.
    	  function compare(x, y) {
    	    var a, b,
    	      xc = x.c,
    	      yc = y.c,
    	      i = x.s,
    	      j = y.s,
    	      k = x.e,
    	      l = y.e;

    	    // Either NaN?
    	    if (!i || !j) return null;

    	    a = xc && !xc[0];
    	    b = yc && !yc[0];

    	    // Either zero?
    	    if (a || b) return a ? b ? 0 : -j : i;

    	    // Signs differ?
    	    if (i != j) return i;

    	    a = i < 0;
    	    b = k == l;

    	    // Either Infinity?
    	    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

    	    // Compare exponents.
    	    if (!b) return k > l ^ a ? 1 : -1;

    	    j = (k = xc.length) < (l = yc.length) ? k : l;

    	    // Compare digit by digit.
    	    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

    	    // Compare lengths.
    	    return k == l ? 0 : k > l ^ a ? 1 : -1;
    	  }


    	  /*
    	   * Check that n is a primitive number, an integer, and in range, otherwise throw.
    	   */
    	  function intCheck(n, min, max, name) {
    	    if (n < min || n > max || n !== mathfloor(n)) {
    	      throw Error
    	       (bignumberError + (name || 'Argument') + (typeof n == 'number'
    	         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
    	         : ' not a primitive number: ') + String(n));
    	    }
    	  }


    	  // Assumes finite n.
    	  function isOdd(n) {
    	    var k = n.c.length - 1;
    	    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    	  }


    	  function toExponential(str, e) {
    	    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
    	     (e < 0 ? 'e' : 'e+') + e;
    	  }


    	  function toFixedPoint(str, e, z) {
    	    var len, zs;

    	    // Negative exponent?
    	    if (e < 0) {

    	      // Prepend zeros.
    	      for (zs = z + '.'; ++e; zs += z);
    	      str = zs + str;

    	    // Positive exponent
    	    } else {
    	      len = str.length;

    	      // Append zeros.
    	      if (++e > len) {
    	        for (zs = z, e -= len; --e; zs += z);
    	        str += zs;
    	      } else if (e < len) {
    	        str = str.slice(0, e) + '.' + str.slice(e);
    	      }
    	    }

    	    return str;
    	  }


    	  // EXPORT


    	  BigNumber = clone();
    	  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

    	  // AMD.
    	  if (module.exports) {
    	    module.exports = BigNumber;

    	  // Browser.
    	  } else {
    	    if (!globalObject) {
    	      globalObject = typeof self != 'undefined' && self ? self : window;
    	    }

    	    globalObject.BigNumber = BigNumber;
    	  }
    	})(commonjsGlobal); 
    } (bignumber));

    var bignumberExports = bignumber.exports;

    var decoder_asm = function decodeAsm (stdlib, foreign, buffer) {
      'use asm';

      // -- Imports

      var heap = new stdlib.Uint8Array(buffer);
      // var log = foreign.log
      var pushInt = foreign.pushInt;
      var pushInt32 = foreign.pushInt32;
      var pushInt32Neg = foreign.pushInt32Neg;
      var pushInt64 = foreign.pushInt64;
      var pushInt64Neg = foreign.pushInt64Neg;
      var pushFloat = foreign.pushFloat;
      var pushFloatSingle = foreign.pushFloatSingle;
      var pushFloatDouble = foreign.pushFloatDouble;
      var pushTrue = foreign.pushTrue;
      var pushFalse = foreign.pushFalse;
      var pushUndefined = foreign.pushUndefined;
      var pushNull = foreign.pushNull;
      var pushInfinity = foreign.pushInfinity;
      var pushInfinityNeg = foreign.pushInfinityNeg;
      var pushNaN = foreign.pushNaN;
      var pushNaNNeg = foreign.pushNaNNeg;

      var pushArrayStart = foreign.pushArrayStart;
      var pushArrayStartFixed = foreign.pushArrayStartFixed;
      var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;
      var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;
      var pushObjectStart = foreign.pushObjectStart;
      var pushObjectStartFixed = foreign.pushObjectStartFixed;
      var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;
      var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;

      var pushByteString = foreign.pushByteString;
      var pushByteStringStart = foreign.pushByteStringStart;
      var pushUtf8String = foreign.pushUtf8String;
      var pushUtf8StringStart = foreign.pushUtf8StringStart;

      var pushSimpleUnassigned = foreign.pushSimpleUnassigned;

      var pushTagStart = foreign.pushTagStart;
      var pushTagStart4 = foreign.pushTagStart4;
      var pushTagStart8 = foreign.pushTagStart8;
      var pushTagUnassigned = foreign.pushTagUnassigned;

      var pushBreak = foreign.pushBreak;

      var pow = stdlib.Math.pow;

      // -- Constants


      // -- Mutable Variables

      var offset = 0;
      var inputLength = 0;
      var code = 0;

      // Decode a cbor string represented as Uint8Array
      // which is allocated on the heap from 0 to inputLength
      //
      // input - Int
      //
      // Returns Code - Int,
      // Success = 0
      // Error > 0
      function parse (input) {
        input = input | 0;

        offset = 0;
        inputLength = input;

        while ((offset | 0) < (inputLength | 0)) {
          code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;

          if ((code | 0) > 0) {
            break
          }
        }

        return code | 0
      }

      // -- Helper Function

      function checkOffset (n) {
        n = n | 0;

        if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {
          return 0
        }

        return 1
      }

      function readUInt16 (n) {
        n = n | 0;

        return (
          (heap[n | 0] << 8) | heap[(n + 1) | 0]
        ) | 0
      }

      function readUInt32 (n) {
        n = n | 0;

        return (
          (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]
        ) | 0
      }

      // -- Initial Byte Handlers

      function INT_P (octet) {
        octet = octet | 0;

        pushInt(octet | 0);

        offset = (offset + 1) | 0;

        return 0
      }

      function UINT_P_8 (octet) {
        octet = octet | 0;

        if (checkOffset(1) | 0) {
          return 1
        }

        pushInt(heap[(offset + 1) | 0] | 0);

        offset = (offset + 2) | 0;

        return 0
      }

      function UINT_P_16 (octet) {
        octet = octet | 0;

        if (checkOffset(2) | 0) {
          return 1
        }

        pushInt(
          readUInt16((offset + 1) | 0) | 0
        );

        offset = (offset + 3) | 0;

        return 0
      }

      function UINT_P_32 (octet) {
        octet = octet | 0;

        if (checkOffset(4) | 0) {
          return 1
        }

        pushInt32(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0
        );

        offset = (offset + 5) | 0;

        return 0
      }

      function UINT_P_64 (octet) {
        octet = octet | 0;

        if (checkOffset(8) | 0) {
          return 1
        }

        pushInt64(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0,
          readUInt16((offset + 5) | 0) | 0,
          readUInt16((offset + 7) | 0) | 0
        );

        offset = (offset + 9) | 0;

        return 0
      }

      function INT_N (octet) {
        octet = octet | 0;

        pushInt((-1 - ((octet - 32) | 0)) | 0);

        offset = (offset + 1) | 0;

        return 0
      }

      function UINT_N_8 (octet) {
        octet = octet | 0;

        if (checkOffset(1) | 0) {
          return 1
        }

        pushInt(
          (-1 - (heap[(offset + 1) | 0] | 0)) | 0
        );

        offset = (offset + 2) | 0;

        return 0
      }

      function UINT_N_16 (octet) {
        octet = octet | 0;

        var val = 0;

        if (checkOffset(2) | 0) {
          return 1
        }

        val = readUInt16((offset + 1) | 0) | 0;
        pushInt((-1 - (val | 0)) | 0);

        offset = (offset + 3) | 0;

        return 0
      }

      function UINT_N_32 (octet) {
        octet = octet | 0;

        if (checkOffset(4) | 0) {
          return 1
        }

        pushInt32Neg(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0
        );

        offset = (offset + 5) | 0;

        return 0
      }

      function UINT_N_64 (octet) {
        octet = octet | 0;

        if (checkOffset(8) | 0) {
          return 1
        }

        pushInt64Neg(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0,
          readUInt16((offset + 5) | 0) | 0,
          readUInt16((offset + 7) | 0) | 0
        );

        offset = (offset + 9) | 0;

        return 0
      }

      function BYTE_STRING (octet) {
        octet = octet | 0;

        var start = 0;
        var end = 0;
        var step = 0;

        step = (octet - 64) | 0;
        if (checkOffset(step | 0) | 0) {
          return 1
        }

        start = (offset + 1) | 0;
        end = (((offset + 1) | 0) + (step | 0)) | 0;

        pushByteString(start | 0, end | 0);

        offset = end | 0;

        return 0
      }

      function BYTE_STRING_8 (octet) {
        octet = octet | 0;

        var start = 0;
        var end = 0;
        var length = 0;

        if (checkOffset(1) | 0) {
          return 1
        }

        length = heap[(offset + 1) | 0] | 0;
        start = (offset + 2) | 0;
        end = (((offset + 2) | 0) + (length | 0)) | 0;

        if (checkOffset((length + 1) | 0) | 0) {
          return 1
        }

        pushByteString(start | 0, end | 0);

        offset = end | 0;

        return 0
      }

      function BYTE_STRING_16 (octet) {
        octet = octet | 0;

        var start = 0;
        var end = 0;
        var length = 0;

        if (checkOffset(2) | 0) {
          return 1
        }

        length = readUInt16((offset + 1) | 0) | 0;
        start = (offset + 3) | 0;
        end = (((offset + 3) | 0) + (length | 0)) | 0;


        if (checkOffset((length + 2) | 0) | 0) {
          return 1
        }

        pushByteString(start | 0, end | 0);

        offset = end | 0;

        return 0
      }

      function BYTE_STRING_32 (octet) {
        octet = octet | 0;

        var start = 0;
        var end = 0;
        var length = 0;

        if (checkOffset(4) | 0) {
          return 1
        }

        length = readUInt32((offset + 1) | 0) | 0;
        start = (offset + 5) | 0;
        end = (((offset + 5) | 0) + (length | 0)) | 0;


        if (checkOffset((length + 4) | 0) | 0) {
          return 1
        }

        pushByteString(start | 0, end | 0);

        offset = end | 0;

        return 0
      }

      function BYTE_STRING_64 (octet) {
        // NOT IMPLEMENTED
        octet = octet | 0;

        return 1
      }

      function BYTE_STRING_BREAK (octet) {
        octet = octet | 0;

        pushByteStringStart();

        offset = (offset + 1) | 0;

        return 0
      }

      function UTF8_STRING (octet) {
        octet = octet | 0;

        var start = 0;
        var end = 0;
        var step = 0;

        step = (octet - 96) | 0;

        if (checkOffset(step | 0) | 0) {
          return 1
        }

        start = (offset + 1) | 0;
        end = (((offset + 1) | 0) + (step | 0)) | 0;

        pushUtf8String(start | 0, end | 0);

        offset = end | 0;

        return 0
      }

      function UTF8_STRING_8 (octet) {
        octet = octet | 0;

        var start = 0;
        var end = 0;
        var length = 0;

        if (checkOffset(1) | 0) {
          return 1
        }

        length = heap[(offset + 1) | 0] | 0;
        start = (offset + 2) | 0;
        end = (((offset + 2) | 0) + (length | 0)) | 0;

        if (checkOffset((length + 1) | 0) | 0) {
          return 1
        }

        pushUtf8String(start | 0, end | 0);

        offset = end | 0;

        return 0
      }

      function UTF8_STRING_16 (octet) {
        octet = octet | 0;

        var start = 0;
        var end = 0;
        var length = 0;

        if (checkOffset(2) | 0) {
          return 1
        }

        length = readUInt16((offset + 1) | 0) | 0;
        start = (offset + 3) | 0;
        end = (((offset + 3) | 0) + (length | 0)) | 0;

        if (checkOffset((length + 2) | 0) | 0) {
          return 1
        }

        pushUtf8String(start | 0, end | 0);

        offset = end | 0;

        return 0
      }

      function UTF8_STRING_32 (octet) {
        octet = octet | 0;

        var start = 0;
        var end = 0;
        var length = 0;

        if (checkOffset(4) | 0) {
          return 1
        }

        length = readUInt32((offset + 1) | 0) | 0;
        start = (offset + 5) | 0;
        end = (((offset + 5) | 0) + (length | 0)) | 0;

        if (checkOffset((length + 4) | 0) | 0) {
          return 1
        }

        pushUtf8String(start | 0, end | 0);

        offset = end | 0;

        return 0
      }

      function UTF8_STRING_64 (octet) {
        // NOT IMPLEMENTED
        octet = octet | 0;

        return 1
      }

      function UTF8_STRING_BREAK (octet) {
        octet = octet | 0;

        pushUtf8StringStart();

        offset = (offset + 1) | 0;

        return 0
      }

      function ARRAY (octet) {
        octet = octet | 0;

        pushArrayStartFixed((octet - 128) | 0);

        offset = (offset + 1) | 0;

        return 0
      }

      function ARRAY_8 (octet) {
        octet = octet | 0;

        if (checkOffset(1) | 0) {
          return 1
        }

        pushArrayStartFixed(heap[(offset + 1) | 0] | 0);

        offset = (offset + 2) | 0;

        return 0
      }

      function ARRAY_16 (octet) {
        octet = octet | 0;

        if (checkOffset(2) | 0) {
          return 1
        }

        pushArrayStartFixed(
          readUInt16((offset + 1) | 0) | 0
        );

        offset = (offset + 3) | 0;

        return 0
      }

      function ARRAY_32 (octet) {
        octet = octet | 0;

        if (checkOffset(4) | 0) {
          return 1
        }

        pushArrayStartFixed32(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0
        );

        offset = (offset + 5) | 0;

        return 0
      }

      function ARRAY_64 (octet) {
        octet = octet | 0;

        if (checkOffset(8) | 0) {
          return 1
        }

        pushArrayStartFixed64(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0,
          readUInt16((offset + 5) | 0) | 0,
          readUInt16((offset + 7) | 0) | 0
        );

        offset = (offset + 9) | 0;

        return 0
      }

      function ARRAY_BREAK (octet) {
        octet = octet | 0;

        pushArrayStart();

        offset = (offset + 1) | 0;

        return 0
      }

      function MAP (octet) {
        octet = octet | 0;

        var step = 0;

        step = (octet - 160) | 0;

        if (checkOffset(step | 0) | 0) {
          return 1
        }

        pushObjectStartFixed(step | 0);

        offset = (offset + 1) | 0;

        return 0
      }

      function MAP_8 (octet) {
        octet = octet | 0;

        if (checkOffset(1) | 0) {
          return 1
        }

        pushObjectStartFixed(heap[(offset + 1) | 0] | 0);

        offset = (offset + 2) | 0;

        return 0
      }

      function MAP_16 (octet) {
        octet = octet | 0;

        if (checkOffset(2) | 0) {
          return 1
        }

        pushObjectStartFixed(
          readUInt16((offset + 1) | 0) | 0
        );

        offset = (offset + 3) | 0;

        return 0
      }

      function MAP_32 (octet) {
        octet = octet | 0;

        if (checkOffset(4) | 0) {
          return 1
        }

        pushObjectStartFixed32(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0
        );

        offset = (offset + 5) | 0;

        return 0
      }

      function MAP_64 (octet) {
        octet = octet | 0;

        if (checkOffset(8) | 0) {
          return 1
        }

        pushObjectStartFixed64(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0,
          readUInt16((offset + 5) | 0) | 0,
          readUInt16((offset + 7) | 0) | 0
        );

        offset = (offset + 9) | 0;

        return 0
      }

      function MAP_BREAK (octet) {
        octet = octet | 0;

        pushObjectStart();

        offset = (offset + 1) | 0;

        return 0
      }

      function TAG_KNOWN (octet) {
        octet = octet | 0;

        pushTagStart((octet - 192| 0) | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_BIGNUM_POS (octet) {
        octet = octet | 0;

        pushTagStart(octet | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_BIGNUM_NEG (octet) {
        octet = octet | 0;

        pushTagStart(octet | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_FRAC (octet) {
        octet = octet | 0;

        pushTagStart(octet | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_BIGNUM_FLOAT (octet) {
        octet = octet | 0;

        pushTagStart(octet | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_UNASSIGNED (octet) {
        octet = octet | 0;

        pushTagStart((octet - 192| 0) | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_BASE64_URL (octet) {
        octet = octet | 0;

        pushTagStart(octet | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_BASE64 (octet) {
        octet = octet | 0;

        pushTagStart(octet | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_BASE16 (octet) {
        octet = octet | 0;

        pushTagStart(octet | 0);

        offset = (offset + 1 | 0);

        return 0
      }

      function TAG_MORE_1 (octet) {
        octet = octet | 0;

        if (checkOffset(1) | 0) {
          return 1
        }

        pushTagStart(heap[(offset + 1) | 0] | 0);

        offset = (offset + 2 | 0);

        return 0
      }

      function TAG_MORE_2 (octet) {
        octet = octet | 0;

        if (checkOffset(2) | 0) {
          return 1
        }

        pushTagStart(
          readUInt16((offset + 1) | 0) | 0
        );

        offset = (offset + 3 | 0);

        return 0
      }

      function TAG_MORE_4 (octet) {
        octet = octet | 0;

        if (checkOffset(4) | 0) {
          return 1
        }

        pushTagStart4(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0
        );

        offset = (offset + 5 | 0);

        return 0
      }

      function TAG_MORE_8 (octet) {
        octet = octet | 0;

        if (checkOffset(8) | 0) {
          return 1
        }

        pushTagStart8(
          readUInt16((offset + 1) | 0) | 0,
          readUInt16((offset + 3) | 0) | 0,
          readUInt16((offset + 5) | 0) | 0,
          readUInt16((offset + 7) | 0) | 0
        );

        offset = (offset + 9 | 0);

        return 0
      }

      function SIMPLE_UNASSIGNED (octet) {
        octet = octet | 0;

        pushSimpleUnassigned(((octet | 0) - 224) | 0);

        offset = (offset + 1) | 0;

        return 0
      }

      function SIMPLE_FALSE (octet) {
        octet = octet | 0;

        pushFalse();

        offset = (offset + 1) | 0;

        return 0
      }

      function SIMPLE_TRUE (octet) {
        octet = octet | 0;

        pushTrue();

        offset = (offset + 1) | 0;

        return 0
      }

      function SIMPLE_NULL (octet) {
        octet = octet | 0;

        pushNull();

        offset = (offset + 1) | 0;

        return 0
      }

      function SIMPLE_UNDEFINED (octet) {
        octet = octet | 0;

        pushUndefined();

        offset = (offset + 1) | 0;

        return 0
      }

      function SIMPLE_BYTE (octet) {
        octet = octet | 0;

        if (checkOffset(1) | 0) {
          return 1
        }

        pushSimpleUnassigned(heap[(offset + 1) | 0] | 0);

        offset = (offset + 2)  | 0;

        return 0
      }

      function SIMPLE_FLOAT_HALF (octet) {
        octet = octet | 0;

        var f = 0;
        var g = 0;
        var sign = 1.0;
        var exp = 0.0;
        var mant = 0.0;
        var r = 0.0;
        if (checkOffset(2) | 0) {
          return 1
        }

        f = heap[(offset + 1) | 0] | 0;
        g = heap[(offset + 2) | 0] | 0;

        if ((f | 0) & 0x80) {
          sign = -1.0;
        }

        exp = +(((f | 0) & 0x7C) >> 2);
        mant = +((((f | 0) & 0x03) << 8) | g);

        if (+exp == 0.0) {
          pushFloat(+(
            (+sign) * +5.9604644775390625e-8 * (+mant)
          ));
        } else if (+exp == 31.0) {
          if (+sign == 1.0) {
            if (+mant > 0.0) {
              pushNaN();
            } else {
              pushInfinity();
            }
          } else {
            if (+mant > 0.0) {
              pushNaNNeg();
            } else {
              pushInfinityNeg();
            }
          }
        } else {
          pushFloat(+(
            +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)
          ));
        }

        offset = (offset + 3) | 0;

        return 0
      }

      function SIMPLE_FLOAT_SINGLE (octet) {
        octet = octet | 0;

        if (checkOffset(4) | 0) {
          return 1
        }

        pushFloatSingle(
          heap[(offset + 1) | 0] | 0,
          heap[(offset + 2) | 0] | 0,
          heap[(offset + 3) | 0] | 0,
          heap[(offset + 4) | 0] | 0
        );

        offset = (offset + 5) | 0;

        return 0
      }

      function SIMPLE_FLOAT_DOUBLE (octet) {
        octet = octet | 0;

        if (checkOffset(8) | 0) {
          return 1
        }

        pushFloatDouble(
          heap[(offset + 1) | 0] | 0,
          heap[(offset + 2) | 0] | 0,
          heap[(offset + 3) | 0] | 0,
          heap[(offset + 4) | 0] | 0,
          heap[(offset + 5) | 0] | 0,
          heap[(offset + 6) | 0] | 0,
          heap[(offset + 7) | 0] | 0,
          heap[(offset + 8) | 0] | 0
        );

        offset = (offset + 9) | 0;

        return 0
      }

      function ERROR (octet) {
        octet = octet | 0;

        return 1
      }

      function BREAK (octet) {
        octet = octet | 0;

        pushBreak();

        offset = (offset + 1) | 0;

        return 0
      }

      // -- Jump Table

      var jumpTable = [
        // Integer 0x00..0x17 (0..23)
        INT_P, // 0x00
        INT_P, // 0x01
        INT_P, // 0x02
        INT_P, // 0x03
        INT_P, // 0x04
        INT_P, // 0x05
        INT_P, // 0x06
        INT_P, // 0x07
        INT_P, // 0x08
        INT_P, // 0x09
        INT_P, // 0x0A
        INT_P, // 0x0B
        INT_P, // 0x0C
        INT_P, // 0x0D
        INT_P, // 0x0E
        INT_P, // 0x0F
        INT_P, // 0x10
        INT_P, // 0x11
        INT_P, // 0x12
        INT_P, // 0x13
        INT_P, // 0x14
        INT_P, // 0x15
        INT_P, // 0x16
        INT_P, // 0x17
        // Unsigned integer (one-byte uint8_t follows)
        UINT_P_8, // 0x18
        // Unsigned integer (two-byte uint16_t follows)
        UINT_P_16, // 0x19
        // Unsigned integer (four-byte uint32_t follows)
        UINT_P_32, // 0x1a
        // Unsigned integer (eight-byte uint64_t follows)
        UINT_P_64, // 0x1b
        ERROR, // 0x1c
        ERROR, // 0x1d
        ERROR, // 0x1e
        ERROR, // 0x1f
        // Negative integer -1-0x00..-1-0x17 (-1..-24)
        INT_N, // 0x20
        INT_N, // 0x21
        INT_N, // 0x22
        INT_N, // 0x23
        INT_N, // 0x24
        INT_N, // 0x25
        INT_N, // 0x26
        INT_N, // 0x27
        INT_N, // 0x28
        INT_N, // 0x29
        INT_N, // 0x2A
        INT_N, // 0x2B
        INT_N, // 0x2C
        INT_N, // 0x2D
        INT_N, // 0x2E
        INT_N, // 0x2F
        INT_N, // 0x30
        INT_N, // 0x31
        INT_N, // 0x32
        INT_N, // 0x33
        INT_N, // 0x34
        INT_N, // 0x35
        INT_N, // 0x36
        INT_N, // 0x37
        // Negative integer -1-n (one-byte uint8_t for n follows)
        UINT_N_8, // 0x38
        // Negative integer -1-n (two-byte uint16_t for n follows)
        UINT_N_16, // 0x39
        // Negative integer -1-n (four-byte uint32_t for nfollows)
        UINT_N_32, // 0x3a
        // Negative integer -1-n (eight-byte uint64_t for n follows)
        UINT_N_64, // 0x3b
        ERROR, // 0x3c
        ERROR, // 0x3d
        ERROR, // 0x3e
        ERROR, // 0x3f
        // byte string (0x00..0x17 bytes follow)
        BYTE_STRING, // 0x40
        BYTE_STRING, // 0x41
        BYTE_STRING, // 0x42
        BYTE_STRING, // 0x43
        BYTE_STRING, // 0x44
        BYTE_STRING, // 0x45
        BYTE_STRING, // 0x46
        BYTE_STRING, // 0x47
        BYTE_STRING, // 0x48
        BYTE_STRING, // 0x49
        BYTE_STRING, // 0x4A
        BYTE_STRING, // 0x4B
        BYTE_STRING, // 0x4C
        BYTE_STRING, // 0x4D
        BYTE_STRING, // 0x4E
        BYTE_STRING, // 0x4F
        BYTE_STRING, // 0x50
        BYTE_STRING, // 0x51
        BYTE_STRING, // 0x52
        BYTE_STRING, // 0x53
        BYTE_STRING, // 0x54
        BYTE_STRING, // 0x55
        BYTE_STRING, // 0x56
        BYTE_STRING, // 0x57
        // byte string (one-byte uint8_t for n, and then n bytes follow)
        BYTE_STRING_8, // 0x58
        // byte string (two-byte uint16_t for n, and then n bytes follow)
        BYTE_STRING_16, // 0x59
        // byte string (four-byte uint32_t for n, and then n bytes follow)
        BYTE_STRING_32, // 0x5a
        // byte string (eight-byte uint64_t for n, and then n bytes follow)
        BYTE_STRING_64, // 0x5b
        ERROR, // 0x5c
        ERROR, // 0x5d
        ERROR, // 0x5e
        // byte string, byte strings follow, terminated by "break"
        BYTE_STRING_BREAK, // 0x5f
        // UTF-8 string (0x00..0x17 bytes follow)
        UTF8_STRING, // 0x60
        UTF8_STRING, // 0x61
        UTF8_STRING, // 0x62
        UTF8_STRING, // 0x63
        UTF8_STRING, // 0x64
        UTF8_STRING, // 0x65
        UTF8_STRING, // 0x66
        UTF8_STRING, // 0x67
        UTF8_STRING, // 0x68
        UTF8_STRING, // 0x69
        UTF8_STRING, // 0x6A
        UTF8_STRING, // 0x6B
        UTF8_STRING, // 0x6C
        UTF8_STRING, // 0x6D
        UTF8_STRING, // 0x6E
        UTF8_STRING, // 0x6F
        UTF8_STRING, // 0x70
        UTF8_STRING, // 0x71
        UTF8_STRING, // 0x72
        UTF8_STRING, // 0x73
        UTF8_STRING, // 0x74
        UTF8_STRING, // 0x75
        UTF8_STRING, // 0x76
        UTF8_STRING, // 0x77
        // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)
        UTF8_STRING_8, // 0x78
        // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)
        UTF8_STRING_16, // 0x79
        // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)
        UTF8_STRING_32, // 0x7a
        // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)
        UTF8_STRING_64, // 0x7b
        // UTF-8 string, UTF-8 strings follow, terminated by "break"
        ERROR, // 0x7c
        ERROR, // 0x7d
        ERROR, // 0x7e
        UTF8_STRING_BREAK, // 0x7f
        // array (0x00..0x17 data items follow)
        ARRAY, // 0x80
        ARRAY, // 0x81
        ARRAY, // 0x82
        ARRAY, // 0x83
        ARRAY, // 0x84
        ARRAY, // 0x85
        ARRAY, // 0x86
        ARRAY, // 0x87
        ARRAY, // 0x88
        ARRAY, // 0x89
        ARRAY, // 0x8A
        ARRAY, // 0x8B
        ARRAY, // 0x8C
        ARRAY, // 0x8D
        ARRAY, // 0x8E
        ARRAY, // 0x8F
        ARRAY, // 0x90
        ARRAY, // 0x91
        ARRAY, // 0x92
        ARRAY, // 0x93
        ARRAY, // 0x94
        ARRAY, // 0x95
        ARRAY, // 0x96
        ARRAY, // 0x97
        // array (one-byte uint8_t fo, and then n data items follow)
        ARRAY_8, // 0x98
        // array (two-byte uint16_t for n, and then n data items follow)
        ARRAY_16, // 0x99
        // array (four-byte uint32_t for n, and then n data items follow)
        ARRAY_32, // 0x9a
        // array (eight-byte uint64_t for n, and then n data items follow)
        ARRAY_64, // 0x9b
        // array, data items follow, terminated by "break"
        ERROR, // 0x9c
        ERROR, // 0x9d
        ERROR, // 0x9e
        ARRAY_BREAK, // 0x9f
        // map (0x00..0x17 pairs of data items follow)
        MAP, // 0xa0
        MAP, // 0xa1
        MAP, // 0xa2
        MAP, // 0xa3
        MAP, // 0xa4
        MAP, // 0xa5
        MAP, // 0xa6
        MAP, // 0xa7
        MAP, // 0xa8
        MAP, // 0xa9
        MAP, // 0xaA
        MAP, // 0xaB
        MAP, // 0xaC
        MAP, // 0xaD
        MAP, // 0xaE
        MAP, // 0xaF
        MAP, // 0xb0
        MAP, // 0xb1
        MAP, // 0xb2
        MAP, // 0xb3
        MAP, // 0xb4
        MAP, // 0xb5
        MAP, // 0xb6
        MAP, // 0xb7
        // map (one-byte uint8_t for n, and then n pairs of data items follow)
        MAP_8, // 0xb8
        // map (two-byte uint16_t for n, and then n pairs of data items follow)
        MAP_16, // 0xb9
        // map (four-byte uint32_t for n, and then n pairs of data items follow)
        MAP_32, // 0xba
        // map (eight-byte uint64_t for n, and then n pairs of data items follow)
        MAP_64, // 0xbb
        ERROR, // 0xbc
        ERROR, // 0xbd
        ERROR, // 0xbe
        // map, pairs of data items follow, terminated by "break"
        MAP_BREAK, // 0xbf
        // Text-based date/time (data item follows; see Section 2.4.1)
        TAG_KNOWN, // 0xc0
        // Epoch-based date/time (data item follows; see Section 2.4.1)
        TAG_KNOWN, // 0xc1
        // Positive bignum (data item "byte string" follows)
        TAG_KNOWN, // 0xc2
        // Negative bignum (data item "byte string" follows)
        TAG_KNOWN, // 0xc3
        // Decimal Fraction (data item "array" follows; see Section 2.4.3)
        TAG_KNOWN, // 0xc4
        // Bigfloat (data item "array" follows; see Section 2.4.3)
        TAG_KNOWN, // 0xc5
        // (tagged item)
        TAG_UNASSIGNED, // 0xc6
        TAG_UNASSIGNED, // 0xc7
        TAG_UNASSIGNED, // 0xc8
        TAG_UNASSIGNED, // 0xc9
        TAG_UNASSIGNED, // 0xca
        TAG_UNASSIGNED, // 0xcb
        TAG_UNASSIGNED, // 0xcc
        TAG_UNASSIGNED, // 0xcd
        TAG_UNASSIGNED, // 0xce
        TAG_UNASSIGNED, // 0xcf
        TAG_UNASSIGNED, // 0xd0
        TAG_UNASSIGNED, // 0xd1
        TAG_UNASSIGNED, // 0xd2
        TAG_UNASSIGNED, // 0xd3
        TAG_UNASSIGNED, // 0xd4
        // Expected Conversion (data item follows; see Section 2.4.4.2)
        TAG_UNASSIGNED, // 0xd5
        TAG_UNASSIGNED, // 0xd6
        TAG_UNASSIGNED, // 0xd7
        // (more tagged items, 1/2/4/8 bytes and then a data item follow)
        TAG_MORE_1, // 0xd8
        TAG_MORE_2, // 0xd9
        TAG_MORE_4, // 0xda
        TAG_MORE_8, // 0xdb
        ERROR, // 0xdc
        ERROR, // 0xdd
        ERROR, // 0xde
        ERROR, // 0xdf
        // (simple value)
        SIMPLE_UNASSIGNED, // 0xe0
        SIMPLE_UNASSIGNED, // 0xe1
        SIMPLE_UNASSIGNED, // 0xe2
        SIMPLE_UNASSIGNED, // 0xe3
        SIMPLE_UNASSIGNED, // 0xe4
        SIMPLE_UNASSIGNED, // 0xe5
        SIMPLE_UNASSIGNED, // 0xe6
        SIMPLE_UNASSIGNED, // 0xe7
        SIMPLE_UNASSIGNED, // 0xe8
        SIMPLE_UNASSIGNED, // 0xe9
        SIMPLE_UNASSIGNED, // 0xea
        SIMPLE_UNASSIGNED, // 0xeb
        SIMPLE_UNASSIGNED, // 0xec
        SIMPLE_UNASSIGNED, // 0xed
        SIMPLE_UNASSIGNED, // 0xee
        SIMPLE_UNASSIGNED, // 0xef
        SIMPLE_UNASSIGNED, // 0xf0
        SIMPLE_UNASSIGNED, // 0xf1
        SIMPLE_UNASSIGNED, // 0xf2
        SIMPLE_UNASSIGNED, // 0xf3
        // False
        SIMPLE_FALSE, // 0xf4
        // True
        SIMPLE_TRUE, // 0xf5
        // Null
        SIMPLE_NULL, // 0xf6
        // Undefined
        SIMPLE_UNDEFINED, // 0xf7
        // (simple value, one byte follows)
        SIMPLE_BYTE, // 0xf8
        // Half-Precision Float (two-byte IEEE 754)
        SIMPLE_FLOAT_HALF, // 0xf9
        // Single-Precision Float (four-byte IEEE 754)
        SIMPLE_FLOAT_SINGLE, // 0xfa
        // Double-Precision Float (eight-byte IEEE 754)
        SIMPLE_FLOAT_DOUBLE, // 0xfb
        ERROR, // 0xfc
        ERROR, // 0xfd
        ERROR, // 0xfe
        // "break" stop code
        BREAK // 0xff
      ];

      // --

      return {
        parse: parse
      }
    };

    var utils$3 = {};

    var constants$2 = {};

    const Bignumber$2 = bignumberExports.BigNumber;

    constants$2.MT = {
      POS_INT: 0,
      NEG_INT: 1,
      BYTE_STRING: 2,
      UTF8_STRING: 3,
      ARRAY: 4,
      MAP: 5,
      TAG: 6,
      SIMPLE_FLOAT: 7
    };

    constants$2.TAG = {
      DATE_STRING: 0,
      DATE_EPOCH: 1,
      POS_BIGINT: 2,
      NEG_BIGINT: 3,
      DECIMAL_FRAC: 4,
      BIGFLOAT: 5,
      BASE64URL_EXPECTED: 21,
      BASE64_EXPECTED: 22,
      BASE16_EXPECTED: 23,
      CBOR: 24,
      URI: 32,
      BASE64URL: 33,
      BASE64: 34,
      REGEXP: 35,
      MIME: 36
    };

    constants$2.NUMBYTES = {
      ZERO: 0,
      ONE: 24,
      TWO: 25,
      FOUR: 26,
      EIGHT: 27,
      INDEFINITE: 31
    };

    constants$2.SIMPLE = {
      FALSE: 20,
      TRUE: 21,
      NULL: 22,
      UNDEFINED: 23
    };

    constants$2.SYMS = {
      NULL: Symbol('null'),
      UNDEFINED: Symbol('undef'),
      PARENT: Symbol('parent'),
      BREAK: Symbol('break'),
      STREAM: Symbol('stream')
    };

    constants$2.SHIFT32 = Math.pow(2, 32);
    constants$2.SHIFT16 = Math.pow(2, 16);

    constants$2.MAX_SAFE_HIGH = 0x1fffff;
    constants$2.NEG_ONE = new Bignumber$2(-1);
    constants$2.TEN = new Bignumber$2(10);
    constants$2.TWO = new Bignumber$2(2);

    constants$2.PARENT = {
      ARRAY: 0,
      OBJECT: 1,
      MAP: 2,
      TAG: 3,
      BYTE_STRING: 4,
      UTF8_STRING: 5
    };

    (function (exports) {

    	const { Buffer } = buffer;
    	const Bignumber = bignumberExports.BigNumber;

    	const constants = constants$2;
    	const SHIFT32 = constants.SHIFT32;
    	const SHIFT16 = constants.SHIFT16;
    	const MAX_SAFE_HIGH = 0x1fffff;

    	exports.parseHalf = function parseHalf (buf) {
    	  var exp, mant, sign;
    	  sign = buf[0] & 0x80 ? -1 : 1;
    	  exp = (buf[0] & 0x7C) >> 2;
    	  mant = ((buf[0] & 0x03) << 8) | buf[1];
    	  if (!exp) {
    	    return sign * 5.9604644775390625e-8 * mant
    	  } else if (exp === 0x1f) {
    	    return sign * (mant ? 0 / 0 : 2e308)
    	  } else {
    	    return sign * Math.pow(2, exp - 25) * (1024 + mant)
    	  }
    	};

    	function toHex (n) {
    	  if (n < 16) {
    	    return '0' + n.toString(16)
    	  }

    	  return n.toString(16)
    	}

    	exports.arrayBufferToBignumber = function (buf) {
    	  const len = buf.byteLength;
    	  let res = '';
    	  for (let i = 0; i < len; i++) {
    	    res += toHex(buf[i]);
    	  }

    	  return new Bignumber(res, 16)
    	};

    	// convert an Object into a Map
    	exports.buildMap = (obj) => {
    	  const res = new Map();
    	  const keys = Object.keys(obj);
    	  const length = keys.length;
    	  for (let i = 0; i < length; i++) {
    	    res.set(keys[i], obj[keys[i]]);
    	  }
    	  return res
    	};

    	exports.buildInt32 = (f, g) => {
    	  return f * SHIFT16 + g
    	};

    	exports.buildInt64 = (f1, f2, g1, g2) => {
    	  const f = exports.buildInt32(f1, f2);
    	  const g = exports.buildInt32(g1, g2);

    	  if (f > MAX_SAFE_HIGH) {
    	    return new Bignumber(f).times(SHIFT32).plus(g)
    	  } else {
    	    return (f * SHIFT32) + g
    	  }
    	};

    	exports.writeHalf = function writeHalf (buf, half) {
    	  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught

    	  // HACK: everyone settle in.  This isn't going to be pretty.
    	  // Translate cn-cbor's C code (from Carsten Borman):

    	  // uint32_t be32;
    	  // uint16_t be16, u16;
    	  // union {
    	  //   float f;
    	  //   uint32_t u;
    	  // } u32;
    	  // u32.f = float_val;

    	  const u32 = Buffer.allocUnsafe(4);
    	  u32.writeFloatBE(half, 0);
    	  const u = u32.readUInt32BE(0);

    	  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */

    	  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion
    	  if ((u & 0x1FFF) !== 0) {
    	    return false
    	  }

    	  //   int s16 = (u32.u >> 16) & 0x8000;
    	  //   int exp = (u32.u >> 23) & 0xff;
    	  //   int mant = u32.u & 0x7fffff;

    	  var s16 = (u >> 16) & 0x8000; // top bit is sign
    	  const exp = (u >> 23) & 0xff; // then 5 bits of exponent
    	  const mant = u & 0x7fffff;

    	  //   if (exp == 0 && mant == 0)
    	  //     ;              /* 0.0, -0.0 */

    	  // hildjj: zeros already handled.  Assert if you don't believe me.

    	  //   else if (exp >= 113 && exp <= 142) /* normalized */
    	  //     s16 += ((exp - 112) << 10) + (mant >> 13);
    	  if ((exp >= 113) && (exp <= 142)) {
    	    s16 += ((exp - 112) << 10) + (mant >> 13);

    	  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
    	  //     if (mant & ((1 << (126 - exp)) - 1))
    	  //       goto float32;         /* loss of precision */
    	  //     s16 += ((mant + 0x800000) >> (126 - exp));
    	  } else if ((exp >= 103) && (exp < 113)) {
    	    if (mant & ((1 << (126 - exp)) - 1)) {
    	      return false
    	    }
    	    s16 += ((mant + 0x800000) >> (126 - exp));

    	    //   } else if (exp == 255 && mant == 0) { /* Inf */
    	    //     s16 += 0x7c00;

    	    // hildjj: Infinity already handled

    	  //   } else
    	  //     goto float32;           /* loss of range */
    	  } else {
    	    return false
    	  }

    	  //   ensure_writable(3);
    	  //   u16 = s16;
    	  //   be16 = hton16p((const uint8_t*)&u16);
    	  buf.writeUInt16BE(s16, 0);
    	  return true
    	};

    	exports.keySorter = function (a, b) {
    	  var lenA = a[0].byteLength;
    	  var lenB = b[0].byteLength;

    	  if (lenA > lenB) {
    	    return 1
    	  }

    	  if (lenB > lenA) {
    	    return -1
    	  }

    	  return a[0].compare(b[0])
    	};

    	// Adapted from http://www.2ality.com/2012/03/signedzero.html
    	exports.isNegativeZero = (x) => {
    	  return x === 0 && (1 / x < 0)
    	};

    	exports.nextPowerOf2 = (n) => {
    	  let count = 0;
    	  // First n in the below condition is for
    	  // the case where n is 0
    	  if (n && !(n & (n - 1))) {
    	    return n
    	  }

    	  while (n !== 0) {
    	    n >>= 1;
    	    count += 1;
    	  }

    	  return 1 << count
    	}; 
    } (utils$3));

    const constants$1 = constants$2;
    const MT$1 = constants$1.MT;
    const SIMPLE = constants$1.SIMPLE;
    const SYMS$1 = constants$1.SYMS;

    /**
     * A CBOR Simple Value that does not map onto a known constant.
     */
    let Simple$1 = class Simple {
      /**
       * Creates an instance of Simple.
       *
       * @param {integer} value - the simple value's integer value
       */
      constructor (value) {
        if (typeof value !== 'number') {
          throw new Error('Invalid Simple type: ' + (typeof value))
        }
        if ((value < 0) || (value > 255) || ((value | 0) !== value)) {
          throw new Error('value must be a small positive integer: ' + value)
        }
        this.value = value;
      }

      /**
       * Debug string for simple value
       *
       * @returns {string} simple(value)
       */
      toString () {
        return 'simple(' + this.value + ')'
      }

      /**
       * Debug string for simple value
       *
       * @returns {string} simple(value)
       */
      inspect () {
        return 'simple(' + this.value + ')'
      }

      /**
       * Push the simple value onto the CBOR stream
       *
       * @param {cbor.Encoder} gen The generator to push onto
       * @returns {number}
       */
      encodeCBOR (gen) {
        return gen._pushInt(this.value, MT$1.SIMPLE_FLOAT)
      }

      /**
       * Is the given object a Simple?
       *
       * @param {any} obj - object to test
       * @returns {bool} - is it Simple?
       */
      static isSimple (obj) {
        return obj instanceof Simple
      }

      /**
       * Decode from the CBOR additional information into a JavaScript value.
       * If the CBOR item has no parent, return a "safe" symbol instead of
       * `null` or `undefined`, so that the value can be passed through a
       * stream in object mode.
       *
       * @param {Number} val - the CBOR additional info to convert
       * @param {bool} hasParent - Does the CBOR item have a parent?
       * @returns {(null|undefined|Boolean|Symbol)} - the decoded value
       */
      static decode (val, hasParent) {
        if (hasParent == null) {
          hasParent = true;
        }
        switch (val) {
          case SIMPLE.FALSE:
            return false
          case SIMPLE.TRUE:
            return true
          case SIMPLE.NULL:
            if (hasParent) {
              return null
            } else {
              return SYMS$1.NULL
            }
          case SIMPLE.UNDEFINED:
            if (hasParent) {
              return undefined
            } else {
              return SYMS$1.UNDEFINED
            }
          case -1:
            if (!hasParent) {
              throw new Error('Invalid BREAK')
            }
            return SYMS$1.BREAK
          default:
            return new Simple(val)
        }
      }
    };

    var simple = Simple$1;

    /**
     * A CBOR tagged item, where the tag does not have semantics specified at the
     * moment, or those semantics threw an error during parsing. Typically this will
     * be an extension point you're not yet expecting.
     */
    let Tagged$1 = class Tagged {
      /**
       * Creates an instance of Tagged.
       *
       * @param {Number} tag - the number of the tag
       * @param {any} value - the value inside the tag
       * @param {Error} err - the error that was thrown parsing the tag, or null
       */
      constructor (tag, value, err) {
        this.tag = tag;
        this.value = value;
        this.err = err;
        if (typeof this.tag !== 'number') {
          throw new Error('Invalid tag type (' + (typeof this.tag) + ')')
        }
        if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {
          throw new Error('Tag must be a positive integer: ' + this.tag)
        }
      }

      /**
       * Convert to a String
       *
       * @returns {String} string of the form '1(2)'
       */
      toString () {
        return `${this.tag}(${JSON.stringify(this.value)})`
      }

      /**
       * Push the simple value onto the CBOR stream
       *
       * @param {cbor.Encoder} gen The generator to push onto
       * @returns {number}
       */
      encodeCBOR (gen) {
        gen._pushTag(this.tag);
        return gen.pushAny(this.value)
      }

      /**
       * If we have a converter for this type, do the conversion.  Some converters
       * are built-in.  Additional ones can be passed in.  If you want to remove
       * a built-in converter, pass a converter in whose value is 'null' instead
       * of a function.
       *
       * @param {Object} converters - keys in the object are a tag number, the value
       *   is a function that takes the decoded CBOR and returns a JavaScript value
       *   of the appropriate type.  Throw an exception in the function on errors.
       * @returns {any} - the converted item
       */
      convert (converters) {
        var er, f;
        f = converters != null ? converters[this.tag] : undefined;
        if (typeof f !== 'function') {
          f = Tagged['_tag' + this.tag];
          if (typeof f !== 'function') {
            return this
          }
        }
        try {
          return f.call(Tagged, this.value)
        } catch (error) {
          er = error;
          this.err = er;
          return this
        }
      }
    };

    var tagged$1 = Tagged$1;

    const defaultBase$1 = self.location ?
        self.location.protocol + '//' + self.location.host :
        '';
    const URL$3 = self.URL;

    let URLWithLegacySupport$2 = class URLWithLegacySupport {
        constructor(url = '', base = defaultBase$1) {
            this.super = new URL$3(url, base);
            this.path = this.pathname + this.search;
            this.auth =
                this.username && this.password ?
                    this.username + ':' + this.password :
                    null;

            this.query =
                this.search && this.search.startsWith('?') ?
                    this.search.slice(1) :
                    null;
        }

        get hash() {
            return this.super.hash;
        }
        get host() {
            return this.super.host;
        }
        get hostname() {
            return this.super.hostname;
        }
        get href() {
            return this.super.href;
        }
        get origin() {
            return this.super.origin;
        }
        get password() {
            return this.super.password;
        }
        get pathname() {
            return this.super.pathname;
        }
        get port() {
            return this.super.port;
        }
        get protocol() {
            return this.super.protocol;
        }
        get search() {
            return this.super.search;
        }
        get searchParams() {
            return this.super.searchParams;
        }
        get username() {
            return this.super.username;
        }

        set hash(hash) {
            this.super.hash = hash;
        }
        set host(host) {
            this.super.host = host;
        }
        set hostname(hostname) {
            this.super.hostname = hostname;
        }
        set href(href) {
            this.super.href = href;
        }
        set origin(origin) {
            this.super.origin = origin;
        }
        set password(password) {
            this.super.password = password;
        }
        set pathname(pathname) {
            this.super.pathname = pathname;
        }
        set port(port) {
            this.super.port = port;
        }
        set protocol(protocol) {
            this.super.protocol = protocol;
        }
        set search(search) {
            this.super.search = search;
        }
        set searchParams(searchParams) {
            this.super.searchParams = searchParams;
        }
        set username(username) {
            this.super.username = username;
        }

        createObjectURL(o) {
            return this.super.createObjectURL(o);
        }
        revokeObjectURL(o) {
            this.super.revokeObjectURL(o);
        }
        toJSON() {
            return this.super.toJSON();
        }
        toString() {
            return this.super.toString();
        }
        format() {
            return this.toString();
        }
    };

    function format$4(obj) {
        if (typeof obj === 'string') {
            const url = new URL$3(obj);

            return url.toString();
        }

        if (!(obj instanceof URL$3)) {
            const userPass =
                obj.username && obj.password ?
                    `${obj.username}:${obj.password}@` :
                    '';
            const auth = obj.auth ? obj.auth + '@' : '';
            const port = obj.port ? ':' + obj.port : '';
            const protocol = obj.protocol ? obj.protocol + '//' : '';
            const host = obj.host || '';
            const hostname = obj.hostname || '';
            const search = obj.search || (obj.query ? '?' + obj.query : '');
            const hash = obj.hash || '';
            const pathname = obj.pathname || '';
            const path = obj.path || pathname + search;

            return `${protocol}${userPass || auth}${host ||
            hostname + port}${path}${hash}`;
        }
    }

    var urlBrowser = {
        URLWithLegacySupport: URLWithLegacySupport$2,
        URLSearchParams: self.URLSearchParams,
        defaultBase: defaultBase$1,
        format: format$4
    };

    const { URLWithLegacySupport: URLWithLegacySupport$1, format: format$3 } = urlBrowser;

    var relative$1 = (url, location = {}, protocolMap = {}, defaultProtocol) => {
        let protocol = location.protocol ?
            location.protocol.replace(':', '') :
            'http';

        // Check protocol map
        protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';
        let urlParsed;

        try {
            urlParsed = new URLWithLegacySupport$1(url);
        } catch (err) {
            urlParsed = {};
        }

        const base = Object.assign({}, location, {
            protocol: protocol || urlParsed.protocol,
            host: location.host || urlParsed.host
        });

        return new URLWithLegacySupport$1(url, format$3(base)).toString();
    };

    const {
        URLWithLegacySupport,
        format: format$2,
        URLSearchParams,
        defaultBase
    } = urlBrowser;
    const relative = relative$1;

    var isoUrl = {
        URL: URLWithLegacySupport,
        URLSearchParams,
        format: format$2,
        relative,
        defaultBase
    };

    const { Buffer: Buffer$3 } = buffer;
    const ieee754 = ieee754$1;
    const Bignumber$1 = bignumberExports.BigNumber;

    const parser = decoder_asm;
    const utils$2 = utils$3;
    const c = constants$2;
    const Simple = simple;
    const Tagged = tagged$1;
    const { URL: URL$2 } = isoUrl;

    /**
     * Transform binary cbor data into JavaScript objects.
     */
    let Decoder$1 = class Decoder {
      /**
       * @param {Object} [opts={}]
       * @param {number} [opts.size=65536] - Size of the allocated heap.
       */
      constructor (opts) {
        opts = opts || {};

        if (!opts.size || opts.size < 0x10000) {
          opts.size = 0x10000;
        } else {
          // Ensure the size is a power of 2
          opts.size = utils$2.nextPowerOf2(opts.size);
        }

        // Heap use to share the input with the parser
        this._heap = new ArrayBuffer(opts.size);
        this._heap8 = new Uint8Array(this._heap);
        this._buffer = Buffer$3.from(this._heap);

        this._reset();

        // Known tags
        this._knownTags = Object.assign({
          0: (val) => new Date(val),
          1: (val) => new Date(val * 1000),
          2: (val) => utils$2.arrayBufferToBignumber(val),
          3: (val) => c.NEG_ONE.minus(utils$2.arrayBufferToBignumber(val)),
          4: (v) => {
            // const v = new Uint8Array(val)
            return c.TEN.pow(v[0]).times(v[1])
          },
          5: (v) => {
            // const v = new Uint8Array(val)
            return c.TWO.pow(v[0]).times(v[1])
          },
          32: (val) => new URL$2(val),
          35: (val) => new RegExp(val)
        }, opts.tags);

        // Initialize asm based parser
        this.parser = parser(commonjsGlobal, {
          // eslint-disable-next-line no-console
          log: console.log.bind(console),
          pushInt: this.pushInt.bind(this),
          pushInt32: this.pushInt32.bind(this),
          pushInt32Neg: this.pushInt32Neg.bind(this),
          pushInt64: this.pushInt64.bind(this),
          pushInt64Neg: this.pushInt64Neg.bind(this),
          pushFloat: this.pushFloat.bind(this),
          pushFloatSingle: this.pushFloatSingle.bind(this),
          pushFloatDouble: this.pushFloatDouble.bind(this),
          pushTrue: this.pushTrue.bind(this),
          pushFalse: this.pushFalse.bind(this),
          pushUndefined: this.pushUndefined.bind(this),
          pushNull: this.pushNull.bind(this),
          pushInfinity: this.pushInfinity.bind(this),
          pushInfinityNeg: this.pushInfinityNeg.bind(this),
          pushNaN: this.pushNaN.bind(this),
          pushNaNNeg: this.pushNaNNeg.bind(this),
          pushArrayStart: this.pushArrayStart.bind(this),
          pushArrayStartFixed: this.pushArrayStartFixed.bind(this),
          pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),
          pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),
          pushObjectStart: this.pushObjectStart.bind(this),
          pushObjectStartFixed: this.pushObjectStartFixed.bind(this),
          pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),
          pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),
          pushByteString: this.pushByteString.bind(this),
          pushByteStringStart: this.pushByteStringStart.bind(this),
          pushUtf8String: this.pushUtf8String.bind(this),
          pushUtf8StringStart: this.pushUtf8StringStart.bind(this),
          pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),
          pushTagUnassigned: this.pushTagUnassigned.bind(this),
          pushTagStart: this.pushTagStart.bind(this),
          pushTagStart4: this.pushTagStart4.bind(this),
          pushTagStart8: this.pushTagStart8.bind(this),
          pushBreak: this.pushBreak.bind(this)
        }, this._heap);
      }

      get _depth () {
        return this._parents.length
      }

      get _currentParent () {
        return this._parents[this._depth - 1]
      }

      get _ref () {
        return this._currentParent.ref
      }

      // Finish the current parent
      _closeParent () {
        var p = this._parents.pop();

        if (p.length > 0) {
          throw new Error(`Missing ${p.length} elements`)
        }

        switch (p.type) {
          case c.PARENT.TAG:
            this._push(
              this.createTag(p.ref[0], p.ref[1])
            );
            break
          case c.PARENT.BYTE_STRING:
            this._push(this.createByteString(p.ref, p.length));
            break
          case c.PARENT.UTF8_STRING:
            this._push(this.createUtf8String(p.ref, p.length));
            break
          case c.PARENT.MAP:
            if (p.values % 2 > 0) {
              throw new Error('Odd number of elements in the map')
            }
            this._push(this.createMap(p.ref, p.length));
            break
          case c.PARENT.OBJECT:
            if (p.values % 2 > 0) {
              throw new Error('Odd number of elements in the map')
            }
            this._push(this.createObject(p.ref, p.length));
            break
          case c.PARENT.ARRAY:
            this._push(this.createArray(p.ref, p.length));
            break
        }

        if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {
          this._dec();
        }
      }

      // Reduce the expected length of the current parent by one
      _dec () {
        const p = this._currentParent;
        // The current parent does not know the epxected child length

        if (p.length < 0) {
          return
        }

        p.length--;

        // All children were seen, we can close the current parent
        if (p.length === 0) {
          this._closeParent();
        }
      }

      // Push any value to the current parent
      _push (val, hasChildren) {
        const p = this._currentParent;
        p.values++;

        switch (p.type) {
          case c.PARENT.ARRAY:
          case c.PARENT.BYTE_STRING:
          case c.PARENT.UTF8_STRING:
            if (p.length > -1) {
              this._ref[this._ref.length - p.length] = val;
            } else {
              this._ref.push(val);
            }
            this._dec();
            break
          case c.PARENT.OBJECT:
            if (p.tmpKey != null) {
              this._ref[p.tmpKey] = val;
              p.tmpKey = null;
              this._dec();
            } else {
              p.tmpKey = val;

              if (typeof p.tmpKey !== 'string') {
                // too bad, convert to a Map
                p.type = c.PARENT.MAP;
                p.ref = utils$2.buildMap(p.ref);
              }
            }
            break
          case c.PARENT.MAP:
            if (p.tmpKey != null) {
              this._ref.set(p.tmpKey, val);
              p.tmpKey = null;
              this._dec();
            } else {
              p.tmpKey = val;
            }
            break
          case c.PARENT.TAG:
            this._ref.push(val);
            if (!hasChildren) {
              this._dec();
            }
            break
          default:
            throw new Error('Unknown parent type')
        }
      }

      // Create a new parent in the parents list
      _createParent (obj, type, len) {
        this._parents[this._depth] = {
          type: type,
          length: len,
          ref: obj,
          values: 0,
          tmpKey: null
        };
      }

      // Reset all state back to the beginning, also used for initiatlization
      _reset () {
        this._res = [];
        this._parents = [{
          type: c.PARENT.ARRAY,
          length: -1,
          ref: this._res,
          values: 0,
          tmpKey: null
        }];
      }

      // -- Interface to customize deoding behaviour
      createTag (tagNumber, value) {
        const typ = this._knownTags[tagNumber];

        if (!typ) {
          return new Tagged(tagNumber, value)
        }

        return typ(value)
      }

      createMap (obj, len) {
        return obj
      }

      createObject (obj, len) {
        return obj
      }

      createArray (arr, len) {
        return arr
      }

      createByteString (raw, len) {
        return Buffer$3.concat(raw)
      }

      createByteStringFromHeap (start, end) {
        if (start === end) {
          return Buffer$3.alloc(0)
        }

        return Buffer$3.from(this._heap.slice(start, end))
      }

      createInt (val) {
        return val
      }

      createInt32 (f, g) {
        return utils$2.buildInt32(f, g)
      }

      createInt64 (f1, f2, g1, g2) {
        return utils$2.buildInt64(f1, f2, g1, g2)
      }

      createFloat (val) {
        return val
      }

      createFloatSingle (a, b, c, d) {
        return ieee754.read([a, b, c, d], 0, false, 23, 4)
      }

      createFloatDouble (a, b, c, d, e, f, g, h) {
        return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8)
      }

      createInt32Neg (f, g) {
        return -1 - utils$2.buildInt32(f, g)
      }

      createInt64Neg (f1, f2, g1, g2) {
        const f = utils$2.buildInt32(f1, f2);
        const g = utils$2.buildInt32(g1, g2);

        if (f > c.MAX_SAFE_HIGH) {
          return c.NEG_ONE.minus(new Bignumber$1(f).times(c.SHIFT32).plus(g))
        }

        return -1 - ((f * c.SHIFT32) + g)
      }

      createTrue () {
        return true
      }

      createFalse () {
        return false
      }

      createNull () {
        return null
      }

      createUndefined () {
        return undefined
      }

      createInfinity () {
        return Infinity
      }

      createInfinityNeg () {
        return -Infinity
      }

      createNaN () {
        return NaN
      }

      createNaNNeg () {
        return -NaN
      }

      createUtf8String (raw, len) {
        return raw.join('')
      }

      createUtf8StringFromHeap (start, end) {
        if (start === end) {
          return ''
        }

        return this._buffer.toString('utf8', start, end)
      }

      createSimpleUnassigned (val) {
        return new Simple(val)
      }

      // -- Interface for decoder.asm.js

      pushInt (val) {
        this._push(this.createInt(val));
      }

      pushInt32 (f, g) {
        this._push(this.createInt32(f, g));
      }

      pushInt64 (f1, f2, g1, g2) {
        this._push(this.createInt64(f1, f2, g1, g2));
      }

      pushFloat (val) {
        this._push(this.createFloat(val));
      }

      pushFloatSingle (a, b, c, d) {
        this._push(this.createFloatSingle(a, b, c, d));
      }

      pushFloatDouble (a, b, c, d, e, f, g, h) {
        this._push(this.createFloatDouble(a, b, c, d, e, f, g, h));
      }

      pushInt32Neg (f, g) {
        this._push(this.createInt32Neg(f, g));
      }

      pushInt64Neg (f1, f2, g1, g2) {
        this._push(this.createInt64Neg(f1, f2, g1, g2));
      }

      pushTrue () {
        this._push(this.createTrue());
      }

      pushFalse () {
        this._push(this.createFalse());
      }

      pushNull () {
        this._push(this.createNull());
      }

      pushUndefined () {
        this._push(this.createUndefined());
      }

      pushInfinity () {
        this._push(this.createInfinity());
      }

      pushInfinityNeg () {
        this._push(this.createInfinityNeg());
      }

      pushNaN () {
        this._push(this.createNaN());
      }

      pushNaNNeg () {
        this._push(this.createNaNNeg());
      }

      pushArrayStart () {
        this._createParent([], c.PARENT.ARRAY, -1);
      }

      pushArrayStartFixed (len) {
        this._createArrayStartFixed(len);
      }

      pushArrayStartFixed32 (len1, len2) {
        const len = utils$2.buildInt32(len1, len2);
        this._createArrayStartFixed(len);
      }

      pushArrayStartFixed64 (len1, len2, len3, len4) {
        const len = utils$2.buildInt64(len1, len2, len3, len4);
        this._createArrayStartFixed(len);
      }

      pushObjectStart () {
        this._createObjectStartFixed(-1);
      }

      pushObjectStartFixed (len) {
        this._createObjectStartFixed(len);
      }

      pushObjectStartFixed32 (len1, len2) {
        const len = utils$2.buildInt32(len1, len2);
        this._createObjectStartFixed(len);
      }

      pushObjectStartFixed64 (len1, len2, len3, len4) {
        const len = utils$2.buildInt64(len1, len2, len3, len4);
        this._createObjectStartFixed(len);
      }

      pushByteStringStart () {
        this._parents[this._depth] = {
          type: c.PARENT.BYTE_STRING,
          length: -1,
          ref: [],
          values: 0,
          tmpKey: null
        };
      }

      pushByteString (start, end) {
        this._push(this.createByteStringFromHeap(start, end));
      }

      pushUtf8StringStart () {
        this._parents[this._depth] = {
          type: c.PARENT.UTF8_STRING,
          length: -1,
          ref: [],
          values: 0,
          tmpKey: null
        };
      }

      pushUtf8String (start, end) {
        this._push(this.createUtf8StringFromHeap(start, end));
      }

      pushSimpleUnassigned (val) {
        this._push(this.createSimpleUnassigned(val));
      }

      pushTagStart (tag) {
        this._parents[this._depth] = {
          type: c.PARENT.TAG,
          length: 1,
          ref: [tag]
        };
      }

      pushTagStart4 (f, g) {
        this.pushTagStart(utils$2.buildInt32(f, g));
      }

      pushTagStart8 (f1, f2, g1, g2) {
        this.pushTagStart(utils$2.buildInt64(f1, f2, g1, g2));
      }

      pushTagUnassigned (tagNumber) {
        this._push(this.createTag(tagNumber));
      }

      pushBreak () {
        if (this._currentParent.length > -1) {
          throw new Error('Unexpected break')
        }

        this._closeParent();
      }

      _createObjectStartFixed (len) {
        if (len === 0) {
          this._push(this.createObject({}));
          return
        }

        this._createParent({}, c.PARENT.OBJECT, len);
      }

      _createArrayStartFixed (len) {
        if (len === 0) {
          this._push(this.createArray([]));
          return
        }

        this._createParent(new Array(len), c.PARENT.ARRAY, len);
      }

      _decode (input) {
        if (input.byteLength === 0) {
          throw new Error('Input too short')
        }

        this._reset();
        this._heap8.set(input);
        const code = this.parser.parse(input.byteLength);

        if (this._depth > 1) {
          while (this._currentParent.length === 0) {
            this._closeParent();
          }
          if (this._depth > 1) {
            throw new Error('Undeterminated nesting')
          }
        }

        if (code > 0) {
          throw new Error('Failed to parse')
        }

        if (this._res.length === 0) {
          throw new Error('No valid result')
        }
      }

      // -- Public Interface

      decodeFirst (input) {
        this._decode(input);

        return this._res[0]
      }

      decodeAll (input) {
        this._decode(input);

        return this._res
      }

      /**
       * Decode the first cbor object.
       *
       * @param {Buffer|string} input
       * @param {string} [enc='hex'] - Encoding used if a string is passed.
       * @returns {*}
       */
      static decode (input, enc) {
        if (typeof input === 'string') {
          input = Buffer$3.from(input, enc || 'hex');
        }

        const dec = new Decoder({ size: input.length });
        return dec.decodeFirst(input)
      }

      /**
       * Decode all cbor objects.
       *
       * @param {Buffer|string} input
       * @param {string} [enc='hex'] - Encoding used if a string is passed.
       * @returns {Array<*>}
       */
      static decodeAll (input, enc) {
        if (typeof input === 'string') {
          input = Buffer$3.from(input, enc || 'hex');
        }

        const dec = new Decoder({ size: input.length });
        return dec.decodeAll(input)
      }
    };

    Decoder$1.decodeFirst = Decoder$1.decode;

    var decoder = Decoder$1;

    const { Buffer: Buffer$2 } = buffer;
    const Decoder = decoder;
    const utils$1 = utils$3;

    /**
     * Output the diagnostic format from a stream of CBOR bytes.
     *
     */
    class Diagnose extends Decoder {
      createTag (tagNumber, value) {
        return `${tagNumber}(${value})`
      }

      createInt (val) {
        return super.createInt(val).toString()
      }

      createInt32 (f, g) {
        return super.createInt32(f, g).toString()
      }

      createInt64 (f1, f2, g1, g2) {
        return super.createInt64(f1, f2, g1, g2).toString()
      }

      createInt32Neg (f, g) {
        return super.createInt32Neg(f, g).toString()
      }

      createInt64Neg (f1, f2, g1, g2) {
        return super.createInt64Neg(f1, f2, g1, g2).toString()
      }

      createTrue () {
        return 'true'
      }

      createFalse () {
        return 'false'
      }

      createFloat (val) {
        const fl = super.createFloat(val);
        if (utils$1.isNegativeZero(val)) {
          return '-0_1'
        }

        return `${fl}_1`
      }

      createFloatSingle (a, b, c, d) {
        const fl = super.createFloatSingle(a, b, c, d);
        return `${fl}_2`
      }

      createFloatDouble (a, b, c, d, e, f, g, h) {
        const fl = super.createFloatDouble(a, b, c, d, e, f, g, h);
        return `${fl}_3`
      }

      createByteString (raw, len) {
        const val = raw.join(', ');

        if (len === -1) {
          return `(_ ${val})`
        }
        return `h'${val}`
      }

      createByteStringFromHeap (start, end) {
        const val = (Buffer$2.from(
          super.createByteStringFromHeap(start, end)
        )).toString('hex');

        return `h'${val}'`
      }

      createInfinity () {
        return 'Infinity_1'
      }

      createInfinityNeg () {
        return '-Infinity_1'
      }

      createNaN () {
        return 'NaN_1'
      }

      createNaNNeg () {
        return '-NaN_1'
      }

      createNull () {
        return 'null'
      }

      createUndefined () {
        return 'undefined'
      }

      createSimpleUnassigned (val) {
        return `simple(${val})`
      }

      createArray (arr, len) {
        const val = super.createArray(arr, len);

        if (len === -1) {
          // indefinite
          return `[_ ${val.join(', ')}]`
        }

        return `[${val.join(', ')}]`
      }

      createMap (map, len) {
        const val = super.createMap(map);
        const list = Array.from(val.keys())
          .reduce(collectObject(val), '');

        if (len === -1) {
          return `{_ ${list}}`
        }

        return `{${list}}`
      }

      createObject (obj, len) {
        const val = super.createObject(obj);
        const map = Object.keys(val)
          .reduce(collectObject(val), '');

        if (len === -1) {
          return `{_ ${map}}`
        }

        return `{${map}}`
      }

      createUtf8String (raw, len) {
        const val = raw.join(', ');

        if (len === -1) {
          return `(_ ${val})`
        }

        return `"${val}"`
      }

      createUtf8StringFromHeap (start, end) {
        const val = (Buffer$2.from(
          super.createUtf8StringFromHeap(start, end)
        )).toString('utf8');

        return `"${val}"`
      }

      static diagnose (input, enc) {
        if (typeof input === 'string') {
          input = Buffer$2.from(input, enc || 'hex');
        }

        const dec = new Diagnose();
        return dec.decodeFirst(input)
      }
    }

    var diagnose = Diagnose;

    function collectObject (val) {
      return (acc, key) => {
        if (acc) {
          return `${acc}, ${key}: ${val[key]}`
        }
        return `${key}: ${val[key]}`
      }
    }

    const { Buffer: Buffer$1 } = buffer;
    const { URL: URL$1 } = isoUrl;
    const Bignumber = bignumberExports.BigNumber;

    const utils = utils$3;
    const constants = constants$2;
    const MT = constants.MT;
    const NUMBYTES = constants.NUMBYTES;
    const SHIFT32 = constants.SHIFT32;
    const SYMS = constants.SYMS;
    const TAG = constants.TAG;
    const HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO;
    const FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR;
    const DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT;
    const TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE;
    const FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE;
    const UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED;
    const NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL;

    const MAXINT_BN = new Bignumber('0x20000000000000');
    const BUF_NAN = Buffer$1.from('f97e00', 'hex');
    const BUF_INF_NEG = Buffer$1.from('f9fc00', 'hex');
    const BUF_INF_POS = Buffer$1.from('f97c00', 'hex');

    function toType (obj) {
      // [object Type]
      // --------8---1
      return ({}).toString.call(obj).slice(8, -1)
    }

    /**
     * Transform JavaScript values into CBOR bytes
     *
     */
    class Encoder {
      /**
       * @param {Object} [options={}]
       * @param {function(Buffer)} options.stream
       */
      constructor (options) {
        options = options || {};

        this.streaming = typeof options.stream === 'function';
        this.onData = options.stream;

        this.semanticTypes = [
          [URL$1, this._pushUrl],
          [Bignumber, this._pushBigNumber]
        ];

        const addTypes = options.genTypes || [];
        const len = addTypes.length;
        for (let i = 0; i < len; i++) {
          this.addSemanticType(
            addTypes[i][0],
            addTypes[i][1]
          );
        }

        this._reset();
      }

      addSemanticType (type, fun) {
        const len = this.semanticTypes.length;
        for (let i = 0; i < len; i++) {
          const typ = this.semanticTypes[i][0];
          if (typ === type) {
            const old = this.semanticTypes[i][1];
            this.semanticTypes[i][1] = fun;
            return old
          }
        }
        this.semanticTypes.push([type, fun]);
        return null
      }

      push (val) {
        if (!val) {
          return true
        }

        this.result[this.offset] = val;
        this.resultMethod[this.offset] = 0;
        this.resultLength[this.offset] = val.length;
        this.offset++;

        if (this.streaming) {
          this.onData(this.finalize());
        }

        return true
      }

      pushWrite (val, method, len) {
        this.result[this.offset] = val;
        this.resultMethod[this.offset] = method;
        this.resultLength[this.offset] = len;
        this.offset++;

        if (this.streaming) {
          this.onData(this.finalize());
        }

        return true
      }

      _pushUInt8 (val) {
        return this.pushWrite(val, 1, 1)
      }

      _pushUInt16BE (val) {
        return this.pushWrite(val, 2, 2)
      }

      _pushUInt32BE (val) {
        return this.pushWrite(val, 3, 4)
      }

      _pushDoubleBE (val) {
        return this.pushWrite(val, 4, 8)
      }

      _pushNaN () {
        return this.push(BUF_NAN)
      }

      _pushInfinity (obj) {
        const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS;
        return this.push(half)
      }

      _pushFloat (obj) {
        const b2 = Buffer$1.allocUnsafe(2);

        if (utils.writeHalf(b2, obj)) {
          if (utils.parseHalf(b2) === obj) {
            return this._pushUInt8(HALF) && this.push(b2)
          }
        }

        const b4 = Buffer$1.allocUnsafe(4);
        b4.writeFloatBE(obj, 0);
        if (b4.readFloatBE(0) === obj) {
          return this._pushUInt8(FLOAT) && this.push(b4)
        }

        return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)
      }

      _pushInt (obj, mt, orig) {
        const m = mt << 5;
        if (obj < 24) {
          return this._pushUInt8(m | obj)
        }

        if (obj <= 0xff) {
          return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)
        }

        if (obj <= 0xffff) {
          return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)
        }

        if (obj <= 0xffffffff) {
          return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)
        }

        if (obj <= Number.MAX_SAFE_INTEGER) {
          return this._pushUInt8(m | NUMBYTES.EIGHT) &&
            this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&
            this._pushUInt32BE(obj % SHIFT32)
        }

        if (mt === MT.NEG_INT) {
          return this._pushFloat(orig)
        }

        return this._pushFloat(obj)
      }

      _pushIntNum (obj) {
        if (obj < 0) {
          return this._pushInt(-obj - 1, MT.NEG_INT, obj)
        } else {
          return this._pushInt(obj, MT.POS_INT)
        }
      }

      _pushNumber (obj) {
        switch (false) {
          case (obj === obj): // eslint-disable-line
            return this._pushNaN(obj)
          case isFinite(obj):
            return this._pushInfinity(obj)
          case ((obj % 1) !== 0):
            return this._pushIntNum(obj)
          default:
            return this._pushFloat(obj)
        }
      }

      _pushString (obj) {
        const len = Buffer$1.byteLength(obj, 'utf8');
        return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)
      }

      _pushBoolean (obj) {
        return this._pushUInt8(obj ? TRUE : FALSE)
      }

      _pushUndefined (obj) {
        return this._pushUInt8(UNDEFINED)
      }

      _pushArray (gen, obj) {
        const len = obj.length;
        if (!gen._pushInt(len, MT.ARRAY)) {
          return false
        }
        for (let j = 0; j < len; j++) {
          if (!gen.pushAny(obj[j])) {
            return false
          }
        }
        return true
      }

      _pushTag (tag) {
        return this._pushInt(tag, MT.TAG)
      }

      _pushDate (gen, obj) {
        // Round date, to get seconds since 1970-01-01 00:00:00 as defined in
        // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is
        // still allowed to encode fractions of seconds which can be achieved by
        // changing overwriting the encode function for Date objects.
        return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))
      }

      _pushBuffer (gen, obj) {
        return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)
      }

      _pushNoFilter (gen, obj) {
        return gen._pushBuffer(gen, obj.slice())
      }

      _pushRegexp (gen, obj) {
        return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)
      }

      _pushSet (gen, obj) {
        if (!gen._pushInt(obj.size, MT.ARRAY)) {
          return false
        }
        for (const x of obj) {
          if (!gen.pushAny(x)) {
            return false
          }
        }
        return true
      }

      _pushUrl (gen, obj) {
        return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())
      }

      _pushBigint (obj) {
        let tag = TAG.POS_BIGINT;
        if (obj.isNegative()) {
          obj = obj.negated().minus(1);
          tag = TAG.NEG_BIGINT;
        }
        let str = obj.toString(16);
        if (str.length % 2) {
          str = '0' + str;
        }
        const buf = Buffer$1.from(str, 'hex');
        return this._pushTag(tag) && this._pushBuffer(this, buf)
      }

      _pushBigNumber (gen, obj) {
        if (obj.isNaN()) {
          return gen._pushNaN()
        }
        if (!obj.isFinite()) {
          return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)
        }
        if (obj.isInteger()) {
          return gen._pushBigint(obj)
        }
        if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&
          gen._pushInt(2, MT.ARRAY))) {
          return false
        }

        const dec = obj.decimalPlaces();
        const slide = obj.multipliedBy(new Bignumber(10).pow(dec));
        if (!gen._pushIntNum(-dec)) {
          return false
        }
        if (slide.abs().isLessThan(MAXINT_BN)) {
          return gen._pushIntNum(slide.toNumber())
        } else {
          return gen._pushBigint(slide)
        }
      }

      _pushMap (gen, obj) {
        if (!gen._pushInt(obj.size, MT.MAP)) {
          return false
        }

        return this._pushRawMap(
          obj.size,
          Array.from(obj)
        )
      }

      _pushObject (obj) {
        if (!obj) {
          return this._pushUInt8(NULL)
        }

        var len = this.semanticTypes.length;
        for (var i = 0; i < len; i++) {
          if (obj instanceof this.semanticTypes[i][0]) {
            return this.semanticTypes[i][1].call(obj, this, obj)
          }
        }

        var f = obj.encodeCBOR;
        if (typeof f === 'function') {
          return f.call(obj, this)
        }

        var keys = Object.keys(obj);
        var keyLength = keys.length;
        if (!this._pushInt(keyLength, MT.MAP)) {
          return false
        }

        return this._pushRawMap(
          keyLength,
          keys.map((k) => [k, obj[k]])
        )
      }

      _pushRawMap (len, map) {
        // Sort keys for canoncialization
        // 1. encode key
        // 2. shorter key comes before longer key
        // 3. same length keys are sorted with lower
        //    byte value before higher

        map = map.map(function (a) {
          a[0] = Encoder.encode(a[0]);
          return a
        }).sort(utils.keySorter);

        for (var j = 0; j < len; j++) {
          if (!this.push(map[j][0])) {
            return false
          }

          if (!this.pushAny(map[j][1])) {
            return false
          }
        }

        return true
      }

      /**
       * Alias for `.pushAny`
       *
       * @param {*} obj
       * @returns {boolean} true on success
       */
      write (obj) {
        return this.pushAny(obj)
      }

      /**
       * Push any supported type onto the encoded stream
       *
       * @param {any} obj
       * @returns {boolean} true on success
       */
      pushAny (obj) {
        var typ = toType(obj);

        switch (typ) {
          case 'Number':
            return this._pushNumber(obj)
          case 'String':
            return this._pushString(obj)
          case 'Boolean':
            return this._pushBoolean(obj)
          case 'Object':
            return this._pushObject(obj)
          case 'Array':
            return this._pushArray(this, obj)
          case 'Uint8Array':
            return this._pushBuffer(this, Buffer$1.isBuffer(obj) ? obj : Buffer$1.from(obj))
          case 'Null':
            return this._pushUInt8(NULL)
          case 'Undefined':
            return this._pushUndefined(obj)
          case 'Map':
            return this._pushMap(this, obj)
          case 'Set':
            return this._pushSet(this, obj)
          case 'URL':
            return this._pushUrl(this, obj)
          case 'BigNumber':
            return this._pushBigNumber(this, obj)
          case 'Date':
            return this._pushDate(this, obj)
          case 'RegExp':
            return this._pushRegexp(this, obj)
          case 'Symbol':
            switch (obj) {
              case SYMS.NULL:
                return this._pushObject(null)
              case SYMS.UNDEFINED:
                return this._pushUndefined(undefined)
              // TODO: Add pluggable support for other symbols
              default:
                throw new Error('Unknown symbol: ' + obj.toString())
            }
          default:
            throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))
        }
      }

      finalize () {
        if (this.offset === 0) {
          return null
        }

        var result = this.result;
        var resultLength = this.resultLength;
        var resultMethod = this.resultMethod;
        var offset = this.offset;

        // Determine the size of the buffer
        var size = 0;
        var i = 0;

        for (; i < offset; i++) {
          size += resultLength[i];
        }

        var res = Buffer$1.allocUnsafe(size);
        var index = 0;
        var length = 0;

        // Write the content into the result buffer
        for (i = 0; i < offset; i++) {
          length = resultLength[i];

          switch (resultMethod[i]) {
            case 0:
              result[i].copy(res, index);
              break
            case 1:
              res.writeUInt8(result[i], index, true);
              break
            case 2:
              res.writeUInt16BE(result[i], index, true);
              break
            case 3:
              res.writeUInt32BE(result[i], index, true);
              break
            case 4:
              res.writeDoubleBE(result[i], index, true);
              break
            case 5:
              res.write(result[i], index, length, 'utf8');
              break
            default:
              throw new Error('unkown method')
          }

          index += length;
        }

        var tmp = res;

        this._reset();

        return tmp
      }

      _reset () {
        this.result = [];
        this.resultMethod = [];
        this.resultLength = [];
        this.offset = 0;
      }

      /**
       * Encode the given value
       * @param {*} o
       * @returns {Buffer}
       */
      static encode (o) {
        const enc = new Encoder();
        const ret = enc.pushAny(o);
        if (!ret) {
          throw new Error('Failed to encode input')
        }

        return enc.finalize()
      }
    }

    var encoder = Encoder;

    (function (exports) {

    	// exports.Commented = require('./commented')
    	exports.Diagnose = diagnose;
    	exports.Decoder = decoder;
    	exports.Encoder = encoder;
    	exports.Simple = simple;
    	exports.Tagged = tagged$1;

    	// exports.comment = exports.Commented.comment
    	exports.decodeAll = exports.Decoder.decodeAll;
    	exports.decodeFirst = exports.Decoder.decodeFirst;
    	exports.diagnose = exports.Diagnose.diagnose;
    	exports.encode = exports.Encoder.encode;
    	exports.decode = exports.Decoder.decode;

    	exports.leveldb = {
    	  decode: exports.Decoder.decodeAll,
    	  encode: exports.Encoder.encode,
    	  buffer: true,
    	  name: 'cbor'
    	}; 
    } (src$1));

    var borc = /*@__PURE__*/getDefaultExportFromCjs(src$1);

    /**
     * Concatenate multiple array buffers.
     * @param buffers The buffers to concatenate.
     */
    function concat(...buffers) {
        const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));
        let index = 0;
        for (const b of buffers) {
            result.set(new Uint8Array(b), index);
            index += b.byteLength;
        }
        return result.buffer;
    }
    /**
     * Transforms a buffer to an hexadecimal string. This will use the buffer as an Uint8Array.
     * @param buffer The buffer to return the hexadecimal string of.
     */
    function toHex(buffer) {
        return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');
    }
    const hexRe = new RegExp(/^([0-9A-F]{2})*$/i);
    /**
     * Transforms a hexadecimal string into an array buffer.
     * @param hex The hexadecimal string to use.
     */
    function fromHex(hex) {
        if (!hexRe.test(hex)) {
            throw new Error('Invalid hexadecimal string.');
        }
        const buffer = [...hex]
            .reduce((acc, curr, i) => {
            // tslint:disable-next-line:no-bitwise
            acc[(i / 2) | 0] = (acc[(i / 2) | 0] || '') + curr;
            return acc;
        }, [])
            .map(x => Number.parseInt(x, 16));
        return new Uint8Array(buffer).buffer;
    }
    function compare(b1, b2) {
        if (b1.byteLength !== b2.byteLength) {
            return b1.byteLength - b2.byteLength;
        }
        const u1 = new Uint8Array(b1);
        const u2 = new Uint8Array(b2);
        for (let i = 0; i < u1.length; i++) {
            if (u1[i] !== u2[i]) {
                return u1[i] - u2[i];
            }
        }
        return 0;
    }

    /**
     * sha256 hash the provided Buffer
     * @param data - input to hash function
     */
    function hash$2(data) {
        return sha256Exports.sha256.create().update(new Uint8Array(data)).arrayBuffer();
    }
    /**
     *
     * @param value unknown value
     * @returns ArrayBuffer
     */
    function hashValue(value) {
        if (value instanceof borc.Tagged) {
            return hashValue(value.value);
        }
        else if (typeof value === 'string') {
            return hashString(value);
        }
        else if (typeof value === 'number') {
            return hash$2(lebEncode(value));
        }
        else if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {
            return hash$2(value);
        }
        else if (Array.isArray(value)) {
            const vals = value.map(hashValue);
            return hash$2(concat(...vals));
        }
        else if (value && typeof value === 'object' && value._isPrincipal) {
            return hash$2(value.toUint8Array());
        }
        else if (typeof value === 'object' &&
            value !== null &&
            typeof value.toHash === 'function') {
            return hashValue(value.toHash());
            // TODO This should be move to a specific async method as the webauthn flow required
            // the flow to be synchronous to ensure Safari touch id works.
            // } else if (value instanceof Promise) {
            //   return value.then(x => hashValue(x));
        }
        else if (typeof value === 'bigint') {
            // Do this check much later than the other bigint check because this one is much less
            // type-safe.
            // So we want to try all the high-assurance type guards before this 'probable' one.
            return hash$2(lebEncode(value));
        }
        throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {
            // include so logs/callers can understand the confusing value.
            // (when stringified in error message, prototype info is lost)
            value,
        });
    }
    const hashString = (value) => {
        const encoded = new TextEncoder().encode(value);
        return hash$2(encoded);
    };
    /**
     * Get the RequestId of the provided ic-ref request.
     * RequestId is the result of the representation-independent-hash function.
     * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map
     * @param request - ic-ref request to hash into RequestId
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function requestIdOf(request) {
        const hashed = Object.entries(request)
            .filter(([, value]) => value !== undefined)
            .map(([key, value]) => {
            const hashedKey = hashString(key);
            const hashedValue = hashValue(value);
            return [hashedKey, hashedValue];
        });
        const traversed = hashed;
        const sorted = traversed.sort(([k1], [k2]) => {
            return compare(k1, k2);
        });
        const concatenated = concat(...sorted.map(x => concat(...x)));
        const requestId = hash$2(concatenated);
        return requestId;
    }

    var __rest$1 = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    const domainSeparator$1 = new TextEncoder().encode('\x0Aic-request');
    /**
     * An Identity that can sign blobs.
     */
    class SignIdentity {
        /**
         * Get the principal represented by this identity. Normally should be a
         * `Principal.selfAuthenticating()`.
         */
        getPrincipal() {
            if (!this._principal) {
                this._principal = Principal$1.selfAuthenticating(new Uint8Array(this.getPublicKey().toDer()));
            }
            return this._principal;
        }
        /**
         * Transform a request into a signed version of the request. This is done last
         * after the transforms on the body of a request. The returned object can be
         * anything, but must be serializable to CBOR.
         * @param request - internet computer request to transform
         */
        async transformRequest(request) {
            const { body } = request, fields = __rest$1(request, ["body"]);
            const requestId = await requestIdOf(body);
            return Object.assign(Object.assign({}, fields), { body: {
                    content: body,
                    sender_pubkey: this.getPublicKey().toDer(),
                    sender_sig: await this.sign(concat(domainSeparator$1, requestId)),
                } });
        }
    }
    class AnonymousIdentity {
        getPrincipal() {
            return Principal$1.anonymous();
        }
        async transformRequest(request) {
            return Object.assign(Object.assign({}, request), { body: { content: request.body } });
        }
    }

    var src = {};

    var serializer$1 = {};

    var value = {};

    Object.defineProperty(value, "__esModule", { value: true });
    const MAX_U64_NUMBER = 0x20000000000000;
    function _concat(a, ...args) {
        const newBuffer = new Uint8Array(a.byteLength + args.reduce((acc, b) => acc + b.byteLength, 0));
        newBuffer.set(new Uint8Array(a), 0);
        let i = a.byteLength;
        for (const b of args) {
            newBuffer.set(new Uint8Array(b), i);
            i += b.byteLength;
        }
        return newBuffer.buffer;
    }
    function _serializeValue(major, minor, value) {
        // Remove everything that's not an hexadecimal character. These are not
        // considered errors since the value was already validated and they might
        // be number decimals or sign.
        value = value.replace(/[^0-9a-fA-F]/g, "");
        // Create the buffer from the value with left padding with 0.
        const length = 2 ** (minor - 24 /* Int8 */);
        value = value.slice(-length * 2).padStart(length * 2, "0");
        const bytes = [(major << 5) + minor].concat(value.match(/../g).map((byte) => parseInt(byte, 16)));
        return new Uint8Array(bytes).buffer;
    }
    function _serializeNumber(major, value) {
        if (value < 24) {
            return new Uint8Array([(major << 5) + value]).buffer;
        }
        else {
            const minor = value <= 0xff
                ? 24 /* Int8 */
                : value <= 0xffff
                    ? 25 /* Int16 */
                    : value <= 0xffffffff
                        ? 26 /* Int32 */
                        : 27 /* Int64 */;
            return _serializeValue(major, minor, value.toString(16));
        }
    }
    function _serializeString(str) {
        const utf8 = [];
        for (let i = 0; i < str.length; i++) {
            let charcode = str.charCodeAt(i);
            if (charcode < 0x80) {
                utf8.push(charcode);
            }
            else if (charcode < 0x800) {
                utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));
            }
            else if (charcode < 0xd800 || charcode >= 0xe000) {
                utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
            }
            else {
                // Surrogate pair
                i++;
                charcode = ((charcode & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff);
                utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
            }
        }
        return _concat(new Uint8Array(_serializeNumber(3 /* TextString */, str.length)), new Uint8Array(utf8));
    }
    /**
     * Tag a value.
     */
    function tagged(tag, value) {
        if (tag == 0xd9d9f7) {
            return _concat(new Uint8Array([0xd9, 0xd9, 0xf7]), value);
        }
        if (tag < 24) {
            return _concat(new Uint8Array([(6 /* Tag */ << 5) + tag]), value);
        }
        else {
            const minor = tag <= 0xff
                ? 24 /* Int8 */
                : tag <= 0xffff
                    ? 25 /* Int16 */
                    : tag <= 0xffffffff
                        ? 26 /* Int32 */
                        : 27 /* Int64 */;
            const length = 2 ** (minor - 24 /* Int8 */);
            const value = tag
                .toString(16)
                .slice(-length * 2)
                .padStart(length * 2, "0");
            const bytes = [(6 /* Tag */ << 5) + minor].concat(value.match(/../g).map((byte) => parseInt(byte, 16)));
            return new Uint8Array(bytes).buffer;
        }
    }
    value.tagged = tagged;
    /**
     * Set the raw bytes contained by this value. This should only be used with another
     * CborValue, or if you are implementing extensions to CBOR.
     * @param bytes A buffer containing the value.
     */
    function raw(bytes) {
        return new Uint8Array(bytes).buffer;
    }
    value.raw = raw;
    /**
     * Encode a number that is between [0, 23].
     * @param n
     */
    function uSmall(n) {
        if (isNaN(n)) {
            throw new RangeError("Invalid number.");
        }
        n = Math.min(Math.max(0, n), 23); // Clamp it.
        const bytes = [(0 /* UnsignedInteger */ << 5) + n];
        return new Uint8Array(bytes).buffer;
    }
    value.uSmall = uSmall;
    function u8(u8, radix) {
        // Force u8 into a number, and validate it.
        u8 = parseInt("" + u8, radix);
        if (isNaN(u8)) {
            throw new RangeError("Invalid number.");
        }
        u8 = Math.min(Math.max(0, u8), 0xff); // Clamp it.
        u8 = u8.toString(16);
        return _serializeValue(0 /* UnsignedInteger */, 24 /* Int8 */, u8);
    }
    value.u8 = u8;
    function u16(u16, radix) {
        // Force u16 into a number, and validate it.
        u16 = parseInt("" + u16, radix);
        if (isNaN(u16)) {
            throw new RangeError("Invalid number.");
        }
        u16 = Math.min(Math.max(0, u16), 0xffff); // Clamp it.
        u16 = u16.toString(16);
        return _serializeValue(0 /* UnsignedInteger */, 25 /* Int16 */, u16);
    }
    value.u16 = u16;
    function u32(u32, radix) {
        // Force u32 into a number, and validate it.
        u32 = parseInt("" + u32, radix);
        if (isNaN(u32)) {
            throw new RangeError("Invalid number.");
        }
        u32 = Math.min(Math.max(0, u32), 0xffffffff); // Clamp it.
        u32 = u32.toString(16);
        return _serializeValue(0 /* UnsignedInteger */, 26 /* Int32 */, u32);
    }
    value.u32 = u32;
    function u64(u64, radix) {
        // Special consideration for numbers that might be larger than expected.
        if (typeof u64 == "string" && radix == 16) {
            // This is the only case where we guarantee we'll encode the number directly.
            // Validate it's all hexadecimal first.
            if (u64.match(/[^0-9a-fA-F]/)) {
                throw new RangeError("Invalid number.");
            }
            return _serializeValue(0 /* UnsignedInteger */, 27 /* Int64 */, u64);
        }
        // Force u64 into a number, and validate it.
        u64 = parseInt("" + u64, radix);
        if (isNaN(u64)) {
            throw new RangeError("Invalid number.");
        }
        u64 = Math.min(Math.max(0, u64), MAX_U64_NUMBER); // Clamp it to actual limit.
        u64 = u64.toString(16);
        return _serializeValue(0 /* UnsignedInteger */, 27 /* Int64 */, u64);
    }
    value.u64 = u64;
    /**
     * Encode a negative number that is between [-24, -1].
     */
    function iSmall(n) {
        if (isNaN(n)) {
            throw new RangeError("Invalid number.");
        }
        if (n === 0) {
            return uSmall(0);
        }
        // Negative n, clamped to [1, 24], minus 1 (there's no negative 0).
        n = Math.min(Math.max(0, -n), 24) - 1;
        const bytes = [(1 /* SignedInteger */ << 5) + n];
        return new Uint8Array(bytes).buffer;
    }
    value.iSmall = iSmall;
    function i8(i8, radix) {
        // Force i8 into a number, and validate it.
        i8 = parseInt("" + i8, radix);
        if (isNaN(i8)) {
            throw new RangeError("Invalid number.");
        }
        // Negative n, clamped, minus 1 (there's no negative 0).
        i8 = Math.min(Math.max(0, -i8 - 1), 0xff);
        i8 = i8.toString(16);
        return _serializeValue(1 /* SignedInteger */, 24 /* Int8 */, i8);
    }
    value.i8 = i8;
    function i16(i16, radix) {
        // Force i16 into a number, and validate it.
        i16 = parseInt("" + i16, radix);
        if (isNaN(i16)) {
            throw new RangeError("Invalid number.");
        }
        // Negative n, clamped, minus 1 (there's no negative 0).
        i16 = Math.min(Math.max(0, -i16 - 1), 0xffff);
        i16 = i16.toString(16);
        return _serializeValue(1 /* SignedInteger */, 25 /* Int16 */, i16);
    }
    value.i16 = i16;
    function i32(i32, radix) {
        // Force i32 into a number, and validate it.
        i32 = parseInt("" + i32, radix);
        if (isNaN(i32)) {
            throw new RangeError("Invalid number.");
        }
        // Negative n, clamped, minus 1 (there's no negative 0).
        i32 = Math.min(Math.max(0, -i32 - 1), 0xffffffff);
        i32 = i32.toString(16);
        return _serializeValue(1 /* SignedInteger */, 26 /* Int32 */, i32);
    }
    value.i32 = i32;
    function i64(i64, radix) {
        // Special consideration for numbers that might be larger than expected.
        if (typeof i64 == "string" && radix == 16) {
            if (i64.startsWith("-")) {
                i64 = i64.slice(1);
            }
            else {
                // Clamp it.
                i64 = "0";
            }
            // This is the only case where we guarantee we'll encode the number directly.
            // Validate it's all hexadecimal first.
            if (i64.match(/[^0-9a-fA-F]/) || i64.length > 16) {
                throw new RangeError("Invalid number.");
            }
            // We need to do -1 to the number.
            let done = false;
            let newI64 = i64.split("").reduceRight((acc, x) => {
                if (done) {
                    return x + acc;
                }
                let n = parseInt(x, 16) - 1;
                if (n >= 0) {
                    done = true;
                    return n.toString(16) + acc;
                }
                else {
                    return "f" + acc;
                }
            }, "");
            if (!done) {
                // This number was 0.
                return u64(0);
            }
            return _serializeValue(1 /* SignedInteger */, 27 /* Int64 */, newI64);
        }
        // Force i64 into a number, and validate it.
        i64 = parseInt("" + i64, radix);
        if (isNaN(i64)) {
            throw new RangeError("Invalid number.");
        }
        i64 = Math.min(Math.max(0, -i64 - 1), 0x20000000000000); // Clamp it to actual.
        i64 = i64.toString(16);
        return _serializeValue(1 /* SignedInteger */, 27 /* Int64 */, i64);
    }
    value.i64 = i64;
    /**
     * Encode a number using the smallest amount of bytes, by calling the methods
     * above. e.g. If the number fits in a u8, it will use that.
     */
    function number(n) {
        if (n >= 0) {
            if (n < 24) {
                return uSmall(n);
            }
            else if (n <= 0xff) {
                return u8(n);
            }
            else if (n <= 0xffff) {
                return u16(n);
            }
            else if (n <= 0xffffffff) {
                return u32(n);
            }
            else {
                return u64(n);
            }
        }
        else {
            if (n >= -24) {
                return iSmall(n);
            }
            else if (n >= -0xff) {
                return i8(n);
            }
            else if (n >= -0xffff) {
                return i16(n);
            }
            else if (n >= -0xffffffff) {
                return i32(n);
            }
            else {
                return i64(n);
            }
        }
    }
    value.number = number;
    /**
     * Encode a byte array. This is different than the `raw()` method.
     */
    function bytes(bytes) {
        return _concat(_serializeNumber(2 /* ByteString */, bytes.byteLength), bytes);
    }
    value.bytes = bytes;
    /**
     * Encode a JavaScript string.
     */
    function string(str) {
        return _serializeString(str);
    }
    value.string = string;
    /**
     * Encode an array of cbor values.
     */
    function array(items) {
        return _concat(_serializeNumber(4 /* Array */, items.length), ...items);
    }
    value.array = array;
    /**
     * Encode a map of key-value pairs. The keys are string, and the values are CBOR
     * encoded.
     */
    function map(items, stable = false) {
        if (!(items instanceof Map)) {
            items = new Map(Object.entries(items));
        }
        let entries = Array.from(items.entries());
        if (stable) {
            entries = entries.sort(([keyA], [keyB]) => keyA.localeCompare(keyB));
        }
        return _concat(_serializeNumber(5 /* Map */, items.size), ...entries.map(([k, v]) => _concat(_serializeString(k), v)));
    }
    value.map = map;
    /**
     * Encode a single (32 bits) precision floating point number.
     */
    function singleFloat(f) {
        const single = new Float32Array([f]);
        return _concat(new Uint8Array([(7 /* SimpleValue */ << 5) + 26]), new Uint8Array(single.buffer));
    }
    value.singleFloat = singleFloat;
    /**
     * Encode a double (64 bits) precision floating point number.
     */
    function doubleFloat(f) {
        const single = new Float64Array([f]);
        return _concat(new Uint8Array([(7 /* SimpleValue */ << 5) + 27]), new Uint8Array(single.buffer));
    }
    value.doubleFloat = doubleFloat;
    function bool(v) {
        return v ? true_() : false_();
    }
    value.bool = bool;
    /**
     * Encode the boolean true.
     */
    function true_() {
        return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 21]));
    }
    value.true_ = true_;
    /**
     * Encode the boolean false.
     */
    function false_() {
        return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 20]));
    }
    value.false_ = false_;
    /**
     * Encode the constant null.
     */
    function null_() {
        return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 22]));
    }
    value.null_ = null_;
    /**
     * Encode the constant undefined.
     */
    function undefined_() {
        return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 23]));
    }
    value.undefined_ = undefined_;

    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    Object.defineProperty(serializer$1, "__esModule", { value: true });
    const cbor = __importStar(value);
    const BufferClasses = [
        ArrayBuffer,
        Uint8Array,
        Uint16Array,
        Uint32Array,
        Int8Array,
        Int16Array,
        Int32Array,
        Float32Array,
        Float64Array,
    ];
    class JsonDefaultCborEncoder {
        // @param _serializer The CBOR Serializer to use.
        // @param _stable Whether or not keys from objects should be sorted (stable). This is
        //     particularly useful when testing encodings between JSON objects.
        constructor(_serializer, _stable = false) {
            this._serializer = _serializer;
            this._stable = _stable;
            this.name = "jsonDefault";
            this.priority = -100;
        }
        match(value) {
            return ["undefined", "boolean", "number", "string", "object"].indexOf(typeof value) != -1;
        }
        encode(value) {
            switch (typeof value) {
                case "undefined":
                    return cbor.undefined_();
                case "boolean":
                    return cbor.bool(value);
                case "number":
                    if (Math.floor(value) === value) {
                        return cbor.number(value);
                    }
                    else {
                        return cbor.doubleFloat(value);
                    }
                case "string":
                    return cbor.string(value);
                case "object":
                    if (value === null) {
                        return cbor.null_();
                    }
                    else if (Array.isArray(value)) {
                        return cbor.array(value.map((x) => this._serializer.serializeValue(x)));
                    }
                    else if (BufferClasses.find((x) => value instanceof x)) {
                        return cbor.bytes(value.buffer);
                    }
                    else if (Object.getOwnPropertyNames(value).indexOf("toJSON") !== -1) {
                        return this.encode(value.toJSON());
                    }
                    else if (value instanceof Map) {
                        const m = new Map();
                        for (const [key, item] of value.entries()) {
                            m.set(key, this._serializer.serializeValue(item));
                        }
                        return cbor.map(m, this._stable);
                    }
                    else {
                        const m = new Map();
                        for (const [key, item] of Object.entries(value)) {
                            m.set(key, this._serializer.serializeValue(item));
                        }
                        return cbor.map(m, this._stable);
                    }
                default:
                    throw new Error("Invalid value.");
            }
        }
    }
    serializer$1.JsonDefaultCborEncoder = JsonDefaultCborEncoder;
    class ToCborEncoder {
        constructor() {
            this.name = "cborEncoder";
            this.priority = -90;
        }
        match(value) {
            return typeof value == "object" && typeof value["toCBOR"] == "function";
        }
        encode(value) {
            return value.toCBOR();
        }
    }
    serializer$1.ToCborEncoder = ToCborEncoder;
    class CborSerializer {
        constructor() {
            this._encoders = new Set();
        }
        static withDefaultEncoders(stable = false) {
            const s = new this();
            s.addEncoder(new JsonDefaultCborEncoder(s, stable));
            s.addEncoder(new ToCborEncoder());
            return s;
        }
        removeEncoder(name) {
            // Has to make an extra call to values() to ensure it doesn't break on iteration.
            for (const encoder of this._encoders.values()) {
                if (encoder.name == name) {
                    this._encoders.delete(encoder);
                }
            }
        }
        addEncoder(encoder) {
            this._encoders.add(encoder);
        }
        getEncoderFor(value) {
            let chosenEncoder = null;
            for (const encoder of this._encoders) {
                if (!chosenEncoder || encoder.priority > chosenEncoder.priority) {
                    if (encoder.match(value)) {
                        chosenEncoder = encoder;
                    }
                }
            }
            if (chosenEncoder === null) {
                throw new Error("Could not find an encoder for value.");
            }
            return chosenEncoder;
        }
        serializeValue(value) {
            return this.getEncoderFor(value).encode(value);
        }
        serialize(value) {
            return this.serializeValue(value);
        }
    }
    serializer$1.CborSerializer = CborSerializer;
    class SelfDescribeCborSerializer extends CborSerializer {
        serialize(value) {
            return cbor.raw(new Uint8Array([
                // Self describe CBOR.
                ...new Uint8Array([0xd9, 0xd9, 0xf7]),
                ...new Uint8Array(super.serializeValue(value)),
            ]));
        }
    }
    serializer$1.SelfDescribeCborSerializer = SelfDescribeCborSerializer;

    (function (exports) {
    	function __export(m) {
    	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    	}
    	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    	    result["default"] = mod;
    	    return result;
    	};
    	Object.defineProperty(exports, "__esModule", { value: true });
    	__export(serializer$1);
    	const value$1 = __importStar(value);
    	exports.value = value$1;
    	
    } (src));

    // We are using hansl/simple-cbor for CBOR serialization, to avoid issues with
    // encoding the uint64 values that the HTTP handler of the client expects for
    // canister IDs. However, simple-cbor does not yet provide deserialization so
    // we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR
    // decoder.
    class PrincipalEncoder {
        get name() {
            return 'Principal';
        }
        get priority() {
            return 0;
        }
        match(value) {
            return value && value._isPrincipal === true;
        }
        encode(v) {
            return src.value.bytes(v.toUint8Array());
        }
    }
    class BufferEncoder {
        get name() {
            return 'Buffer';
        }
        get priority() {
            return 1;
        }
        match(value) {
            return value instanceof ArrayBuffer || ArrayBuffer.isView(value);
        }
        encode(v) {
            return src.value.bytes(new Uint8Array(v));
        }
    }
    class BigIntEncoder {
        get name() {
            return 'BigInt';
        }
        get priority() {
            return 1;
        }
        match(value) {
            return typeof value === `bigint`;
        }
        encode(v) {
            // Always use a bigint encoding.
            if (v > BigInt(0)) {
                return src.value.tagged(2, src.value.bytes(fromHex(v.toString(16))));
            }
            else {
                return src.value.tagged(3, src.value.bytes(fromHex((BigInt('-1') * v).toString(16))));
            }
        }
    }
    const serializer = src.SelfDescribeCborSerializer.withDefaultEncoders(true);
    serializer.addEncoder(new PrincipalEncoder());
    serializer.addEncoder(new BufferEncoder());
    serializer.addEncoder(new BigIntEncoder());
    var CborTag;
    (function (CborTag) {
        CborTag[CborTag["Uint64LittleEndian"] = 71] = "Uint64LittleEndian";
        CborTag[CborTag["Semantic"] = 55799] = "Semantic";
    })(CborTag || (CborTag = {}));
    /**
     * Encode a JavaScript value into CBOR.
     */
    function encode(value) {
        return serializer.serialize(value);
    }
    function decodePositiveBigInt(buf) {
        const len = buf.byteLength;
        let res = BigInt(0);
        for (let i = 0; i < len; i++) {
            // tslint:disable-next-line:no-bitwise
            res = res * BigInt(0x100) + BigInt(buf[i]);
        }
        return res;
    }
    // A BORC subclass that decodes byte strings to ArrayBuffer instead of the Buffer class.
    class Uint8ArrayDecoder extends borc.Decoder {
        createByteString(raw) {
            return concat(...raw);
        }
        createByteStringFromHeap(start, end) {
            if (start === end) {
                return new ArrayBuffer(0);
            }
            return new Uint8Array(this._heap.slice(start, end));
        }
    }
    function decode$1(input) {
        const buffer = new Uint8Array(input);
        const decoder = new Uint8ArrayDecoder({
            size: buffer.byteLength,
            tags: {
                // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).
                2: val => decodePositiveBigInt(val),
                3: val => -decodePositiveBigInt(val),
                [CborTag.Semantic]: (value) => value,
            },
        });
        return decoder.decodeFirst(buffer);
    }

    // tslint:enable:camel-case
    // The types of values allowed in the `request_type` field for submit requests.
    var SubmitRequestType;
    (function (SubmitRequestType) {
        SubmitRequestType["Call"] = "call";
    })(SubmitRequestType || (SubmitRequestType = {}));
    /**
     * Create a random Nonce, based on date and a random suffix.
     */
    function makeNonce() {
        // Encode 128 bits.
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        const now = BigInt(+Date.now());
        const randHi = Math.floor(Math.random() * 0xffffffff);
        const randLo = Math.floor(Math.random() * 0xffffffff);
        // Fix for IOS < 14.8 setBigUint64 absence
        if (typeof view.setBigUint64 === 'function') {
            view.setBigUint64(0, now);
        }
        else {
            const TWO_TO_THE_32 = BigInt(1) << BigInt(32);
            view.setUint32(0, Number(now >> BigInt(32)));
            view.setUint32(4, Number(now % TWO_TO_THE_32));
        }
        view.setUint32(8, randHi);
        view.setUint32(12, randLo);
        return buffer;
    }

    const NANOSECONDS_PER_MILLISECONDS = BigInt(1000000);
    const REPLICA_PERMITTED_DRIFT_MILLISECONDS = BigInt(60 * 1000);
    class Expiry {
        constructor(deltaInMSec) {
            // Use bigint because it can overflow the maximum number allowed in a double float.
            this._value =
                (BigInt(Date.now()) + BigInt(deltaInMSec) - REPLICA_PERMITTED_DRIFT_MILLISECONDS) *
                    NANOSECONDS_PER_MILLISECONDS;
        }
        toCBOR() {
            // TODO: change this to take the minimum amount of space (it always takes 8 bytes now).
            return src.value.u64(this._value.toString(16), 16);
        }
        toHash() {
            return lebEncode(this._value);
        }
    }
    /**
     * Create a Nonce transform, which takes a function that returns a Buffer, and adds it
     * as the nonce to every call requests.
     * @param nonceFn A function that returns a buffer. By default uses a semi-random method.
     */
    function makeNonceTransform(nonceFn = makeNonce) {
        return async (request) => {
            // Nonce are only useful for async calls, to prevent replay attacks. Other types of
            // calls don't need Nonce so we just skip creating one.
            if (request.endpoint === "call" /* Endpoint.Call */) {
                request.body.nonce = nonceFn();
            }
        };
    }

    var RequestStatusResponseStatus;
    (function (RequestStatusResponseStatus) {
        RequestStatusResponseStatus["Received"] = "received";
        RequestStatusResponseStatus["Processing"] = "processing";
        RequestStatusResponseStatus["Replied"] = "replied";
        RequestStatusResponseStatus["Rejected"] = "rejected";
        RequestStatusResponseStatus["Unknown"] = "unknown";
        RequestStatusResponseStatus["Done"] = "done";
    })(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));
    // Default delta for ingress expiry is 5 minutes.
    const DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;
    // Root public key for the IC, encoded as hex
    const IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +
        'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +
        '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +
        'b01291091c5f87b98883463f98091a0baaae';
    // IC0 domain info
    const IC0_DOMAIN = 'ic0.app';
    const IC0_SUB_DOMAIN = '.ic0.app';
    class HttpDefaultFetchError extends AgentError {
        constructor(message) {
            super(message);
            this.message = message;
        }
    }
    class IdentityInvalidError extends AgentError {
        constructor(message) {
            super(message);
            this.message = message;
        }
    }
    function getDefaultFetch() {
        let defaultFetch;
        if (typeof window !== 'undefined') {
            // Browser context
            if (window.fetch) {
                defaultFetch = window.fetch.bind(window);
            }
            else {
                throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.');
            }
        }
        else if (typeof global !== 'undefined') {
            // Node context
            if (global.fetch) {
                defaultFetch = global.fetch.bind(global);
            }
            else {
                throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.');
            }
        }
        else if (typeof self !== 'undefined') {
            if (self.fetch) {
                defaultFetch = self.fetch.bind(self);
            }
        }
        if (defaultFetch) {
            return defaultFetch;
        }
        throw new HttpDefaultFetchError('Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.');
    }
    // A HTTP agent allows users to interact with a client of the internet computer
    // using the available methods. It exposes an API that closely follows the
    // public view of the internet computer, and is not intended to be exposed
    // directly to the majority of users due to its low-level interface.
    //
    // There is a pipeline to apply transformations to the request before sending
    // it to the client. This is to decouple signature, nonce generation and
    // other computations so that this class can stay as simple as possible while
    // allowing extensions.
    class HttpAgent {
        constructor(options = {}) {
            this.rootKey = fromHex(IC_ROOT_KEY);
            this._pipeline = [];
            this._timeDiffMsecs = 0;
            this._rootKeyFetched = false;
            this._retryTimes = 3; // Retry requests 3 times before erroring by default
            this._isAgent = true;
            if (options.source) {
                if (!(options.source instanceof HttpAgent)) {
                    throw new Error("An Agent's source can only be another HttpAgent");
                }
                this._pipeline = [...options.source._pipeline];
                this._identity = options.source._identity;
                this._fetch = options.source._fetch;
                this._host = options.source._host;
                this._credentials = options.source._credentials;
            }
            else {
                this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);
                this._fetchOptions = options.fetchOptions;
                this._callOptions = options.callOptions;
            }
            if (options.host !== undefined) {
                if (!options.host.match(/^[a-z]+:/) && typeof window !== 'undefined') {
                    this._host = new URL(window.location.protocol + '//' + options.host);
                }
                else {
                    this._host = new URL(options.host);
                }
            }
            else if (options.source !== undefined) {
                // Safe to ignore here.
                this._host = options.source._host;
            }
            else {
                const location = typeof window !== 'undefined' ? window.location : undefined;
                if (!location) {
                    throw new Error('Must specify a host to connect to.');
                }
                this._host = new URL(location + '');
            }
            // Default is 3, only set if option is provided
            if (options.retryTimes !== undefined) {
                this._retryTimes = options.retryTimes;
            }
            // Rewrite to avoid redirects
            if (this._host.hostname.endsWith(IC0_SUB_DOMAIN)) {
                this._host.hostname = IC0_DOMAIN;
            }
            if (options.credentials) {
                const { name, password } = options.credentials;
                this._credentials = `${name}${password ? ':' + password : ''}`;
            }
            this._identity = Promise.resolve(options.identity || new AnonymousIdentity());
            // Add a nonce transform to ensure calls are unique
            if (!options.disableNonce) {
                this.addTransform(makeNonceTransform(makeNonce));
            }
        }
        isLocal() {
            const hostname = this._host.hostname;
            return hostname === '127.0.0.1' || hostname.endsWith('localhost');
        }
        addTransform(fn, priority = fn.priority || 0) {
            // Keep the pipeline sorted at all time, by priority.
            const i = this._pipeline.findIndex(x => (x.priority || 0) < priority);
            this._pipeline.splice(i >= 0 ? i : this._pipeline.length, 0, Object.assign(fn, { priority }));
        }
        async getPrincipal() {
            if (!this._identity) {
                throw new IdentityInvalidError("This identity has expired due this application's security policy. Please refresh your authentication.");
            }
            return (await this._identity).getPrincipal();
        }
        async call(canisterId, options, identity) {
            const id = await (identity !== undefined ? await identity : await this._identity);
            if (!id) {
                throw new IdentityInvalidError("This identity has expired due this application's security policy. Please refresh your authentication.");
            }
            const canister = Principal$1.from(canisterId);
            const ecid = options.effectiveCanisterId
                ? Principal$1.from(options.effectiveCanisterId)
                : canister;
            const sender = id.getPrincipal() || Principal$1.anonymous();
            let ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS);
            // If the value is off by more than 30 seconds, reconcile system time with the network
            if (Math.abs(this._timeDiffMsecs) > 1000 * 30) {
                ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS + this._timeDiffMsecs);
            }
            const submit = {
                request_type: SubmitRequestType.Call,
                canister_id: canister,
                method_name: options.methodName,
                arg: options.arg,
                sender,
                ingress_expiry,
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let transformedRequest = (await this._transform({
                request: {
                    body: null,
                    method: 'POST',
                    headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),
                },
                endpoint: "call" /* Endpoint.Call */,
                body: submit,
            }));
            // Apply transform for identity.
            transformedRequest = await id.transformRequest(transformedRequest);
            const body = encode(transformedRequest.body);
            // Run both in parallel. The fetch is quite expensive, so we have plenty of time to
            // calculate the requestId locally.
            const request = this._requestAndRetry(() => this._fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), Object.assign(Object.assign(Object.assign({}, this._callOptions), transformedRequest.request), { body })));
            const [response, requestId] = await Promise.all([request, requestIdOf(submit)]);
            return {
                requestId,
                response: {
                    ok: response.ok,
                    status: response.status,
                    statusText: response.statusText,
                },
            };
        }
        async _requestAndRetry(request, tries = 0) {
            if (tries > this._retryTimes && this._retryTimes !== 0) {
                throw new Error(`AgentError: Exceeded configured limit of ${this._retryTimes} retry attempts. Please check your network connection or try again in a few moments`);
            }
            const response = await request();
            if (!response.ok) {
                const responseText = await response.clone().text();
                const errorMessage = `Server returned an error:\n` +
                    `  Code: ${response.status} (${response.statusText})\n` +
                    `  Body: ${responseText}\n`;
                if (this._retryTimes > tries) {
                    console.warn(errorMessage + `  Retrying request.`);
                    return await this._requestAndRetry(request, tries + 1);
                }
                else {
                    throw new Error(errorMessage);
                }
            }
            return response;
        }
        async query(canisterId, fields, identity) {
            const id = await (identity !== undefined ? await identity : await this._identity);
            if (!id) {
                throw new IdentityInvalidError("This identity has expired due this application's security policy. Please refresh your authentication.");
            }
            const canister = typeof canisterId === 'string' ? Principal$1.fromText(canisterId) : canisterId;
            const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal$1.anonymous();
            const request = {
                request_type: "query" /* ReadRequestType.Query */,
                canister_id: canister,
                method_name: fields.methodName,
                arg: fields.arg,
                sender,
                ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),
            };
            // TODO: remove this any. This can be a Signed or UnSigned request.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let transformedRequest = await this._transform({
                request: {
                    method: 'POST',
                    headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),
                },
                endpoint: "read" /* Endpoint.Query */,
                body: request,
            });
            // Apply transform for identity.
            transformedRequest = await (id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest));
            const body = encode(transformedRequest.body);
            const response = await this._requestAndRetry(() => this._fetch('' + new URL(`/api/v2/canister/${canister.toText()}/query`, this._host), Object.assign(Object.assign(Object.assign({}, this._fetchOptions), transformedRequest.request), { body })));
            return decode$1(await response.arrayBuffer());
        }
        async createReadStateRequest(fields, identity) {
            const id = await (identity !== undefined ? await identity : await this._identity);
            if (!id) {
                throw new IdentityInvalidError("This identity has expired due this application's security policy. Please refresh your authentication.");
            }
            const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal$1.anonymous();
            // TODO: remove this any. This can be a Signed or UnSigned request.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const transformedRequest = await this._transform({
                request: {
                    method: 'POST',
                    headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),
                },
                endpoint: "read_state" /* Endpoint.ReadState */,
                body: {
                    request_type: "read_state" /* ReadRequestType.ReadState */,
                    paths: fields.paths,
                    sender,
                    ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),
                },
            });
            // Apply transform for identity.
            return id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest);
        }
        async readState(canisterId, fields, identity, 
        // eslint-disable-next-line
        request) {
            const canister = typeof canisterId === 'string' ? Principal$1.fromText(canisterId) : canisterId;
            const transformedRequest = request !== null && request !== void 0 ? request : (await this.createReadStateRequest(fields, identity));
            const body = encode(transformedRequest.body);
            const response = await this._fetch('' + new URL(`/api/v2/canister/${canister}/read_state`, this._host), Object.assign(Object.assign(Object.assign({}, this._fetchOptions), transformedRequest.request), { body }));
            if (!response.ok) {
                throw new Error(`Server returned an error:\n` +
                    `  Code: ${response.status} (${response.statusText})\n` +
                    `  Body: ${await response.text()}\n`);
            }
            return decode$1(await response.arrayBuffer());
        }
        /**
         * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request
         * @param {PrincipalLike} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default
         */
        async syncTime(canisterId) {
            const CanisterStatus = await Promise.resolve().then(function () { return index; });
            const callTime = Date.now();
            try {
                if (!canisterId) {
                    console.log('Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai');
                }
                const status = await CanisterStatus.request({
                    // Fall back with canisterId of the ICP Ledger
                    canisterId: canisterId !== null && canisterId !== void 0 ? canisterId : Principal$1.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),
                    agent: this,
                    paths: ['time'],
                });
                const replicaTime = status.get('time');
                if (replicaTime) {
                    this._timeDiffMsecs = Number(replicaTime) - Number(callTime);
                }
            }
            catch (error) {
                console.error('Caught exception while attempting to sync time:', error);
            }
        }
        async status() {
            const headers = this._credentials
                ? {
                    Authorization: 'Basic ' + btoa(this._credentials),
                }
                : {};
            const response = await this._requestAndRetry(() => this._fetch('' + new URL(`/api/v2/status`, this._host), Object.assign({ headers }, this._fetchOptions)));
            return decode$1(await response.arrayBuffer());
        }
        async fetchRootKey() {
            if (!this._rootKeyFetched) {
                // Hex-encoded version of the replica root key
                this.rootKey = (await this.status()).root_key;
                this._rootKeyFetched = true;
            }
            return this.rootKey;
        }
        invalidateIdentity() {
            this._identity = null;
        }
        replaceIdentity(identity) {
            this._identity = Promise.resolve(identity);
        }
        _transform(request) {
            let p = Promise.resolve(request);
            for (const fn of this._pipeline) {
                p = p.then(r => fn(r).then(r2 => r2 || r));
            }
            return p;
        }
    }

    var ProxyMessageKind;
    (function (ProxyMessageKind) {
        ProxyMessageKind["Error"] = "err";
        ProxyMessageKind["GetPrincipal"] = "gp";
        ProxyMessageKind["GetPrincipalResponse"] = "gpr";
        ProxyMessageKind["Query"] = "q";
        ProxyMessageKind["QueryResponse"] = "qr";
        ProxyMessageKind["Call"] = "c";
        ProxyMessageKind["CallResponse"] = "cr";
        ProxyMessageKind["ReadState"] = "rs";
        ProxyMessageKind["ReadStateResponse"] = "rsr";
        ProxyMessageKind["Status"] = "s";
        ProxyMessageKind["StatusResponse"] = "sr";
    })(ProxyMessageKind || (ProxyMessageKind = {}));

    function getDefaultAgent() {
        const agent = typeof window === 'undefined'
            ? typeof global === 'undefined'
                ? typeof self === 'undefined'
                    ? undefined
                    : self.ic.agent
                : global.ic.agent
            : window.ic.agent;
        if (!agent) {
            throw new Error('No Agent could be found.');
        }
        return agent;
    }

    /**
     * This file is generated from the candid for asset management.
     */
    /* tslint:disable */
    // @ts-ignore
    var managementCanisterIdl = ({ IDL }) => {
        const canister_id = IDL.Principal;
        const definite_canister_settings = IDL.Record({
            controllers: IDL.Vec(IDL.Principal),
            freezing_threshold: IDL.Nat,
            memory_allocation: IDL.Nat,
            compute_allocation: IDL.Nat,
        });
        const canister_settings = IDL.Record({
            controllers: IDL.Opt(IDL.Vec(IDL.Principal)),
            freezing_threshold: IDL.Opt(IDL.Nat),
            memory_allocation: IDL.Opt(IDL.Nat),
            compute_allocation: IDL.Opt(IDL.Nat),
        });
        const wasm_module = IDL.Vec(IDL.Nat8);
        return IDL.Service({
            canister_status: IDL.Func([IDL.Record({ canister_id: canister_id })], [
                IDL.Record({
                    status: IDL.Variant({
                        stopped: IDL.Null,
                        stopping: IDL.Null,
                        running: IDL.Null,
                    }),
                    memory_size: IDL.Nat,
                    cycles: IDL.Nat,
                    settings: definite_canister_settings,
                    module_hash: IDL.Opt(IDL.Vec(IDL.Nat8)),
                }),
            ], []),
            create_canister: IDL.Func([IDL.Record({ settings: IDL.Opt(canister_settings) })], [IDL.Record({ canister_id: canister_id })], []),
            delete_canister: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),
            deposit_cycles: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),
            install_code: IDL.Func([
                IDL.Record({
                    arg: IDL.Vec(IDL.Nat8),
                    wasm_module: wasm_module,
                    mode: IDL.Variant({
                        reinstall: IDL.Null,
                        upgrade: IDL.Null,
                        install: IDL.Null,
                    }),
                    canister_id: canister_id,
                }),
            ], [], []),
            provisional_create_canister_with_cycles: IDL.Func([
                IDL.Record({
                    settings: IDL.Opt(canister_settings),
                    amount: IDL.Opt(IDL.Nat),
                }),
            ], [IDL.Record({ canister_id: canister_id })], []),
            provisional_top_up_canister: IDL.Func([IDL.Record({ canister_id: canister_id, amount: IDL.Nat })], [], []),
            raw_rand: IDL.Func([], [IDL.Vec(IDL.Nat8)], []),
            start_canister: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),
            stop_canister: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),
            uninstall_code: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),
            update_settings: IDL.Func([
                IDL.Record({
                    canister_id: IDL.Principal,
                    settings: canister_settings,
                }),
            ], [], []),
        });
    };

    /**
     * Create a management canister actor
     * @param config
     */
    function getManagementCanister(config) {
        function transform(_methodName, args, _callConfig) {
            const first = args[0];
            let effectiveCanisterId = Principal$1.fromHex('');
            if (first && typeof first === 'object' && first.canister_id) {
                effectiveCanisterId = Principal$1.from(first.canister_id);
            }
            return { effectiveCanisterId };
        }
        return Actor.createActor(managementCanisterIdl, Object.assign(Object.assign(Object.assign({}, config), { canisterId: Principal$1.fromHex('') }), {
            callTransform: transform,
            queryTransform: transform,
        }));
    }

    var decode;
    (function(){

      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

      // Use a lookup table to find the index.
      var lookup = new Uint8Array(256);
      for (var i = 0; i < chars.length; i++) {
        lookup[chars.charCodeAt(i)] = i;
      }

      decode = function(base64) {
        var bufferLength = base64.length * 0.75,
        len = base64.length, i, p = 0,
        encoded1, encoded2, encoded3, encoded4;

        if (base64[base64.length - 1] === "=") {
          bufferLength--;
          if (base64[base64.length - 2] === "=") {
            bufferLength--;
          }
        }

        var arraybuffer = new ArrayBuffer(bufferLength),
        bytes = new Uint8Array(arraybuffer);

        for (i = 0; i < len; i+=4) {
          encoded1 = lookup[base64.charCodeAt(i)];
          encoded2 = lookup[base64.charCodeAt(i+1)];
          encoded3 = lookup[base64.charCodeAt(i+2)];
          encoded4 = lookup[base64.charCodeAt(i+3)];

          bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
          bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
          bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        }

        return arraybuffer;
      };
    })();

    const wasmBytesBase64 = ``;

    /* tslint:disable */
    /* eslint-disable */
    let wasm$1;
    const wasmBytes = decode(wasmBytesBase64);
    /**
     * @returns {number}
     */
    function bls_init() {
        let ret = wasm$1.bls_init();
        return ret;
    }
    let cachegetUint8Memory0 = null;
    function getUint8Memory0$1() {
        if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm$1.memory.buffer) {
            cachegetUint8Memory0 = new Uint8Array(wasm$1.memory.buffer);
        }
        return cachegetUint8Memory0;
    }
    function passArray8ToWasm0$1(arg, malloc) {
        const ptr = malloc(arg.length * 1);
        getUint8Memory0$1().set(arg, ptr / 1);
        return [ptr, arg.length];
    }
    /**
     * @param {Uint8Array} sig
     * @param {Uint8Array} m
     * @param {Uint8Array} w
     * @returns {number}
     */
    function bls_verify(sig, m, w) {
        const [ptr0, len0] = passArray8ToWasm0$1(sig, wasm$1.__wbindgen_malloc);
        const [ptr1, len1] = passArray8ToWasm0$1(m, wasm$1.__wbindgen_malloc);
        const [ptr2, len2] = passArray8ToWasm0$1(w, wasm$1.__wbindgen_malloc);
        const ret = wasm$1.bls_verify(ptr0, len0, ptr1, len1, ptr2, len2);
        return ret;
    }
    async function load$1(module, imports) {
        if (typeof Response === 'function' && module instanceof Response) {
            const bytes = await module.arrayBuffer();
            return await WebAssembly.instantiate(bytes, imports);
        }
        else {
            const instance = await WebAssembly.instantiate(module, imports);
            if (instance instanceof WebAssembly.Instance) {
                return { instance, module };
            }
            else {
                return instance;
            }
        }
    }
    async function init$2() {
        const imports = {};
        const { instance, module } = await load$1(wasmBytes, imports);
        wasm$1 = instance.exports;
        init$2.__wbindgen_wasm_module = module;
        return wasm$1;
    }

    let verify;
    /**
     *
     * @param pk primary key: Uint8Array
     * @param sig signature: Uint8Array
     * @param msg message: Uint8Array
     * @returns Promise resolving a boolean
     */
    async function blsVerify(pk, sig, msg) {
        if (!verify) {
            await init$2();
            if (bls_init() !== 0) {
                throw new Error('Cannot initialize BLS');
            }
            verify = (pk1, sig1, msg1) => {
                // Reorder things from what the WASM expects (sig, m, w).
                return bls_verify(sig1, msg1, pk1) === 0;
            };
        }
        return verify(pk, sig, msg);
    }

    /**
     * A certificate may fail verification with respect to the provided public key
     */
    class CertificateVerificationError extends AgentError {
        constructor(reason) {
            super(`Invalid certificate: ${reason}`);
        }
    }
    function isBufferEqual(a, b) {
        if (a.byteLength !== b.byteLength) {
            return false;
        }
        const a8 = new Uint8Array(a);
        const b8 = new Uint8Array(b);
        for (let i = 0; i < a8.length; i++) {
            if (a8[i] !== b8[i]) {
                return false;
            }
        }
        return true;
    }
    class Certificate {
        constructor(certificate, _rootKey, _canisterId, _blsVerify) {
            this._rootKey = _rootKey;
            this._canisterId = _canisterId;
            this._blsVerify = _blsVerify;
            this.cert = decode$1(new Uint8Array(certificate));
        }
        /**
         * Create a new instance of a certificate, automatically verifying it. Throws a
         * CertificateVerificationError if the certificate cannot be verified.
         * @constructs {@link AuthClient}
         * @param {CreateCertificateOptions} options
         * @see {@link CreateCertificateOptions}
         * @param {ArrayBuffer} options.certificate The bytes of the certificate
         * @param {ArrayBuffer} options.rootKey The root key to verify against
         * @param {Principal} options.canisterId The effective or signing canister ID
         * @throws {CertificateVerificationError}
         */
        static async create(options) {
            let blsVerify$1 = options.blsVerify;
            if (!blsVerify$1) {
                blsVerify$1 = blsVerify;
            }
            const cert = new Certificate(options.certificate, options.rootKey, options.canisterId, blsVerify$1);
            await cert.verify();
            return cert;
        }
        lookup(path) {
            return lookup_path(path, this.cert.tree);
        }
        async verify() {
            const rootHash = await reconstruct(this.cert.tree);
            const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);
            const sig = this.cert.signature;
            const key = extractDER(derKey);
            const msg = concat(domain_sep('ic-state-root'), rootHash);
            let sigVer = false;
            try {
                sigVer = await this._blsVerify(new Uint8Array(key), new Uint8Array(sig), new Uint8Array(msg));
            }
            catch (err) {
                sigVer = false;
            }
            if (!sigVer) {
                throw new CertificateVerificationError('Signature verification failed');
            }
        }
        async _checkDelegationAndGetKey(d) {
            if (!d) {
                return this._rootKey;
            }
            const cert = await Certificate.create({
                certificate: d.certificate,
                rootKey: this._rootKey,
                canisterId: this._canisterId,
            });
            const rangeLookup = cert.lookup(['subnet', d.subnet_id, 'canister_ranges']);
            if (!rangeLookup) {
                throw new CertificateVerificationError(`Could not find canister ranges for subnet 0x${toHex(d.subnet_id)}`);
            }
            const ranges_arr = decode$1(rangeLookup);
            const ranges = ranges_arr.map(v => [
                Principal$1.fromUint8Array(v[0]),
                Principal$1.fromUint8Array(v[1]),
            ]);
            const canisterInRange = ranges.some(r => r[0].ltEq(this._canisterId) && r[1].gtEq(this._canisterId));
            if (!canisterInRange) {
                throw new CertificateVerificationError(`Canister ${this._canisterId} not in range of delegations for subnet 0x${toHex(d.subnet_id)}`);
            }
            const publicKeyLookup = cert.lookup(['subnet', d.subnet_id, 'public_key']);
            if (!publicKeyLookup) {
                throw new Error(`Could not find subnet key for subnet 0x${toHex(d.subnet_id)}`);
            }
            return publicKeyLookup;
        }
    }
    const DER_PREFIX = fromHex('308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100');
    const KEY_LENGTH = 96;
    function extractDER(buf) {
        const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;
        if (buf.byteLength !== expectedLength) {
            throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);
        }
        const prefix = buf.slice(0, DER_PREFIX.byteLength);
        if (!isBufferEqual(prefix, DER_PREFIX)) {
            throw new TypeError(`BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`);
        }
        return buf.slice(DER_PREFIX.byteLength);
    }
    /**
     * @param t
     */
    async function reconstruct(t) {
        switch (t[0]) {
            case 0 /* NodeId.Empty */:
                return hash$2(domain_sep('ic-hashtree-empty'));
            case 4 /* NodeId.Pruned */:
                return t[1];
            case 3 /* NodeId.Leaf */:
                return hash$2(concat(domain_sep('ic-hashtree-leaf'), t[1]));
            case 2 /* NodeId.Labeled */:
                return hash$2(concat(domain_sep('ic-hashtree-labeled'), t[1], await reconstruct(t[2])));
            case 1 /* NodeId.Fork */:
                return hash$2(concat(domain_sep('ic-hashtree-fork'), await reconstruct(t[1]), await reconstruct(t[2])));
            default:
                throw new Error('unreachable');
        }
    }
    function domain_sep(s) {
        const len = new Uint8Array([s.length]);
        const str = new TextEncoder().encode(s);
        return concat(len, str);
    }
    /**
     * @param path
     * @param tree
     */
    function lookup_path(path, tree) {
        if (path.length === 0) {
            switch (tree[0]) {
                case 3 /* NodeId.Leaf */: {
                    return new Uint8Array(tree[1]).buffer;
                }
                default: {
                    return undefined;
                }
            }
        }
        const label = typeof path[0] === 'string' ? new TextEncoder().encode(path[0]) : path[0];
        const t = find_label(label, flatten_forks(tree));
        if (t) {
            return lookup_path(path.slice(1), t);
        }
    }
    function flatten_forks(t) {
        switch (t[0]) {
            case 0 /* NodeId.Empty */:
                return [];
            case 1 /* NodeId.Fork */:
                return flatten_forks(t[1]).concat(flatten_forks(t[2]));
            default:
                return [t];
        }
    }
    function find_label(l, trees) {
        if (trees.length === 0) {
            return undefined;
        }
        for (const t of trees) {
            if (t[0] === 2 /* NodeId.Labeled */) {
                const p = t[1];
                if (isBufferEqual(l, p)) {
                    return t[2];
                }
            }
        }
    }

    const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;
    /**
     * A best practices polling strategy: wait 2 seconds before the first poll, then 1 second
     * with an exponential backoff factor of 1.2. Timeout after 5 minutes.
     */
    function defaultStrategy() {
        return chain(conditionalDelay(once(), 1000), backoff(1000, 1.2), timeout(FIVE_MINUTES_IN_MSEC));
    }
    /**
     * Predicate that returns true once.
     */
    function once() {
        let first = true;
        return async () => {
            if (first) {
                first = false;
                return true;
            }
            return false;
        };
    }
    /**
     * Delay the polling once.
     * @param condition A predicate that indicates when to delay.
     * @param timeInMsec The amount of time to delay.
     */
    function conditionalDelay(condition, timeInMsec) {
        return async (canisterId, requestId, status) => {
            if (await condition(canisterId, requestId, status)) {
                return new Promise(resolve => setTimeout(resolve, timeInMsec));
            }
        };
    }
    /**
     * Reject a call after a certain amount of time.
     * @param timeInMsec Time in milliseconds before the polling should be rejected.
     */
    function timeout(timeInMsec) {
        const end = Date.now() + timeInMsec;
        return async (canisterId, requestId, status) => {
            if (Date.now() > end) {
                throw new Error(`Request timed out after ${timeInMsec} msec:\n` +
                    `  Request ID: ${toHex(requestId)}\n` +
                    `  Request status: ${status}\n`);
            }
        };
    }
    /**
     * A strategy that throttle, but using an exponential backoff strategy.
     * @param startingThrottleInMsec The throttle in milliseconds to start with.
     * @param backoffFactor The factor to multiple the throttle time between every poll. For
     *   example if using 2, the throttle will double between every run.
     */
    function backoff(startingThrottleInMsec, backoffFactor) {
        let currentThrottling = startingThrottleInMsec;
        return () => new Promise(resolve => setTimeout(() => {
            currentThrottling *= backoffFactor;
            resolve();
        }, currentThrottling));
    }
    /**
     * Chain multiple polling strategy. This _chains_ the strategies, so if you pass in,
     * say, two throttling strategy of 1 second, it will result in a throttle of 2 seconds.
     * @param strategies A strategy list to chain.
     */
    function chain(...strategies) {
        return async (canisterId, requestId, status) => {
            for (const a of strategies) {
                await a(canisterId, requestId, status);
            }
        };
    }

    /**
     * Polls the IC to check the status of the given request then
     * returns the response bytes once the request has been processed.
     * @param agent The agent to use to poll read_state.
     * @param canisterId The effective canister ID.
     * @param requestId The Request ID to poll status for.
     * @param strategy A polling strategy.
     * @param request Request for the readState call.
     */
    async function pollForResponse(agent, canisterId, requestId, strategy, 
    // eslint-disable-next-line
    request, blsVerify) {
        var _a;
        const path = [new TextEncoder().encode('request_status'), requestId];
        const currentRequest = request !== null && request !== void 0 ? request : (await ((_a = agent.createReadStateRequest) === null || _a === void 0 ? void 0 : _a.call(agent, { paths: [path] })));
        const state = await agent.readState(canisterId, { paths: [path] }, undefined, currentRequest);
        if (agent.rootKey == null)
            throw new Error('Agent root key not initialized before polling');
        const cert = await Certificate.create({
            certificate: state.certificate,
            rootKey: agent.rootKey,
            canisterId: canisterId,
            blsVerify,
        });
        const maybeBuf = cert.lookup([...path, new TextEncoder().encode('status')]);
        let status;
        if (typeof maybeBuf === 'undefined') {
            // Missing requestId means we need to wait
            status = RequestStatusResponseStatus.Unknown;
        }
        else {
            status = new TextDecoder().decode(maybeBuf);
        }
        switch (status) {
            case RequestStatusResponseStatus.Replied: {
                return cert.lookup([...path, 'reply']);
            }
            case RequestStatusResponseStatus.Received:
            case RequestStatusResponseStatus.Unknown:
            case RequestStatusResponseStatus.Processing:
                // Execute the polling strategy, then retry.
                await strategy(canisterId, requestId, status);
                return pollForResponse(agent, canisterId, requestId, strategy, currentRequest);
            case RequestStatusResponseStatus.Rejected: {
                const rejectCode = new Uint8Array(cert.lookup([...path, 'reject_code']))[0];
                const rejectMessage = new TextDecoder().decode(cert.lookup([...path, 'reject_message']));
                throw new Error(`Call was rejected:\n` +
                    `  Request ID: ${toHex(requestId)}\n` +
                    `  Reject code: ${rejectCode}\n` +
                    `  Reject text: ${rejectMessage}\n`);
            }
            case RequestStatusResponseStatus.Done:
                // This is _technically_ not an error, but we still didn't see the `Replied` status so
                // we don't know the result and cannot decode it.
                throw new Error(`Call was marked as done but we never saw the reply:\n` +
                    `  Request ID: ${toHex(requestId)}\n`);
        }
        throw new Error('unreachable');
    }

    class ActorCallError extends AgentError {
        constructor(canisterId, methodName, type, props) {
            super([
                `Call failed:`,
                `  Canister: ${canisterId.toText()}`,
                `  Method: ${methodName} (${type})`,
                ...Object.getOwnPropertyNames(props).map(n => `  "${n}": ${JSON.stringify(props[n])}`),
            ].join('\n'));
            this.canisterId = canisterId;
            this.methodName = methodName;
            this.type = type;
            this.props = props;
        }
    }
    class QueryCallRejectedError extends ActorCallError {
        constructor(canisterId, methodName, result) {
            var _a;
            super(canisterId, methodName, 'query', {
                Status: result.status,
                Code: (_a = ReplicaRejectCode[result.reject_code]) !== null && _a !== void 0 ? _a : `Unknown Code "${result.reject_code}"`,
                Message: result.reject_message,
            });
            this.result = result;
        }
    }
    class UpdateCallRejectedError extends ActorCallError {
        constructor(canisterId, methodName, requestId, response) {
            super(canisterId, methodName, 'update', {
                'Request ID': toHex(requestId),
                'HTTP status code': response.status.toString(),
                'HTTP status text': response.statusText,
            });
            this.requestId = requestId;
            this.response = response;
        }
    }
    /**
     * The mode used when installing a canister.
     */
    var CanisterInstallMode;
    (function (CanisterInstallMode) {
        CanisterInstallMode["Install"] = "install";
        CanisterInstallMode["Reinstall"] = "reinstall";
        CanisterInstallMode["Upgrade"] = "upgrade";
    })(CanisterInstallMode || (CanisterInstallMode = {}));
    const metadataSymbol = Symbol.for('ic-agent-metadata');
    /**
     * An actor base class. An actor is an object containing only functions that will
     * return a promise. These functions are derived from the IDL definition.
     */
    class Actor {
        constructor(metadata) {
            this[metadataSymbol] = Object.freeze(metadata);
        }
        /**
         * Get the Agent class this Actor would call, or undefined if the Actor would use
         * the default agent (global.ic.agent).
         * @param actor The actor to get the agent of.
         */
        static agentOf(actor) {
            return actor[metadataSymbol].config.agent;
        }
        /**
         * Get the interface of an actor, in the form of an instance of a Service.
         * @param actor The actor to get the interface of.
         */
        static interfaceOf(actor) {
            return actor[metadataSymbol].service;
        }
        static canisterIdOf(actor) {
            return Principal$1.from(actor[metadataSymbol].config.canisterId);
        }
        static async install(fields, config) {
            const mode = fields.mode === undefined ? CanisterInstallMode.Install : fields.mode;
            // Need to transform the arg into a number array.
            const arg = fields.arg ? [...new Uint8Array(fields.arg)] : [];
            // Same for module.
            const wasmModule = [...new Uint8Array(fields.module)];
            const canisterId = typeof config.canisterId === 'string'
                ? Principal$1.fromText(config.canisterId)
                : config.canisterId;
            await getManagementCanister(config).install_code({
                mode: { [mode]: null },
                arg,
                wasm_module: wasmModule,
                canister_id: canisterId,
            });
        }
        static async createCanister(config) {
            const { canister_id: canisterId } = await getManagementCanister(config || {}).provisional_create_canister_with_cycles({ amount: [], settings: [] });
            return canisterId;
        }
        static async createAndInstallCanister(interfaceFactory, fields, config) {
            const canisterId = await this.createCanister(config);
            await this.install(Object.assign({}, fields), Object.assign(Object.assign({}, config), { canisterId }));
            return this.createActor(interfaceFactory, Object.assign(Object.assign({}, config), { canisterId }));
        }
        static createActorClass(interfaceFactory) {
            const service = interfaceFactory({ IDL });
            class CanisterActor extends Actor {
                constructor(config) {
                    const canisterId = typeof config.canisterId === 'string'
                        ? Principal$1.fromText(config.canisterId)
                        : config.canisterId;
                    super({
                        config: Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), config), { canisterId }),
                        service,
                    });
                    for (const [methodName, func] of service._fields) {
                        this[methodName] = _createActorMethod(this, methodName, func, config.blsVerify);
                    }
                }
            }
            return CanisterActor;
        }
        static createActor(interfaceFactory, configuration) {
            return new (this.createActorClass(interfaceFactory))(configuration);
        }
    }
    // IDL functions can have multiple return values, so decoding always
    // produces an array. Ensure that functions with single or zero return
    // values behave as expected.
    function decodeReturnValue(types, msg) {
        const returnValues = decode$2(types, buffer.Buffer.from(msg));
        switch (returnValues.length) {
            case 0:
                return undefined;
            case 1:
                return returnValues[0];
            default:
                return returnValues;
        }
    }
    const DEFAULT_ACTOR_CONFIG = {
        pollingStrategyFactory: defaultStrategy,
    };
    function _createActorMethod(actor, methodName, func, blsVerify) {
        let caller;
        if (func.annotations.includes('query')) {
            caller = async (options, ...args) => {
                var _a, _b;
                // First, if there's a config transformation, call it.
                options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).queryTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));
                const agent = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();
                const cid = Principal$1.from(options.canisterId || actor[metadataSymbol].config.canisterId);
                const arg = encode$1(func.argTypes, args);
                const result = await agent.query(cid, { methodName, arg });
                switch (result.status) {
                    case "rejected" /* QueryResponseStatus.Rejected */:
                        throw new QueryCallRejectedError(cid, methodName, result);
                    case "replied" /* QueryResponseStatus.Replied */:
                        return decodeReturnValue(func.retTypes, result.reply.arg);
                }
            };
        }
        else {
            caller = async (options, ...args) => {
                var _a, _b;
                // First, if there's a config transformation, call it.
                options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).callTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));
                const agent = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();
                const { canisterId, effectiveCanisterId, pollingStrategyFactory } = Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), actor[metadataSymbol].config), options);
                const cid = Principal$1.from(canisterId);
                const ecid = effectiveCanisterId !== undefined ? Principal$1.from(effectiveCanisterId) : cid;
                const arg = encode$1(func.argTypes, args);
                const { requestId, response } = await agent.call(cid, {
                    methodName,
                    arg,
                    effectiveCanisterId: ecid,
                });
                if (!response.ok) {
                    throw new UpdateCallRejectedError(cid, methodName, requestId, response);
                }
                const pollStrategy = pollingStrategyFactory();
                const responseBytes = await pollForResponse(agent, ecid, requestId, pollStrategy, blsVerify);
                if (responseBytes !== undefined) {
                    return decodeReturnValue(func.retTypes, responseBytes);
                }
                else if (func.retTypes.length === 0) {
                    return undefined;
                }
                else {
                    throw new Error(`Call was returned undefined, but type [${func.retTypes.join(',')}].`);
                }
            };
        }
        const handler = (...args) => caller({}, ...args);
        handler.withOptions =
            (options) => (...args) => caller(options, ...args);
        return handler;
    }

    /**
     *
     * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}
     * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}
     * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private
     * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}
     * @returns {Status} object populated with data from the requested paths
     * @example
     * const status = await canisterStatus({
     *   paths: ['controllers', 'candid'],
     *   ...options
     * });
     *
     * const controllers = status.get('controllers');
     */
    const request = async (options) => {
        const { canisterId, agent, paths } = options;
        const uniquePaths = [...new Set(paths)];
        // Map path options to their correct formats
        const encodedPaths = uniquePaths.map(path => {
            return encodePath(path, canisterId);
        });
        const status = new Map();
        const promises = uniquePaths.map((path, index) => {
            return (async () => {
                var _a;
                try {
                    const response = await agent.readState(canisterId, {
                        paths: [encodedPaths[index]],
                    });
                    const cert = await Certificate.create({
                        certificate: response.certificate,
                        rootKey: agent.rootKey,
                        canisterId: canisterId,
                    });
                    const data = cert.lookup(encodePath(uniquePaths[index], canisterId));
                    if (!data) {
                        // Typically, the cert lookup will throw
                        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);
                        if (typeof path === 'string') {
                            status.set(path, null);
                        }
                        else {
                            status.set(path.key, null);
                        }
                    }
                    else {
                        switch (path) {
                            case 'time': {
                                status.set(path, decodeTime(data));
                                break;
                            }
                            case 'controllers': {
                                status.set(path, decodeControllers(data));
                                break;
                            }
                            case 'module_hash': {
                                status.set(path, decodeHex(data));
                                break;
                            }
                            case 'candid': {
                                status.set(path, new TextDecoder().decode(data));
                                break;
                            }
                            default: {
                                // Check for CustomPath signature
                                if (typeof path !== 'string' && 'key' in path && 'path' in path) {
                                    switch (path.decodeStrategy) {
                                        case 'raw':
                                            status.set(path.key, data);
                                            break;
                                        case 'leb128': {
                                            status.set(path.key, decodeLeb128(data));
                                            break;
                                        }
                                        case 'cbor': {
                                            status.set(path.key, decodeCbor(data));
                                            break;
                                        }
                                        case 'hex': {
                                            status.set(path.key, decodeHex(data));
                                            break;
                                        }
                                        case 'utf-8': {
                                            status.set(path.key, decodeUtf8(data));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (error) {
                    // Break on signature verification errors
                    if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.includes('Invalid certificate')) {
                        throw new AgentError(error.message);
                    }
                    if (typeof path !== 'string' && 'key' in path && 'path' in path) {
                        status.set(path.key, null);
                    }
                    else {
                        status.set(path, null);
                    }
                    console.group();
                    console.warn(`Expected to find result for path ${path}, but instead found nothing.`);
                    console.warn(error);
                    console.groupEnd();
                }
            })();
        });
        // Fetch all values separately, as each option can fail
        await Promise.all(promises);
        return status;
    };
    const encodePath = (path, canisterId) => {
        const encoder = new TextEncoder();
        const encode = (arg) => {
            return new DataView(encoder.encode(arg).buffer).buffer;
        };
        const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;
        switch (path) {
            case 'time':
                return [encode('time')];
            case 'controllers':
                return [encode('canister'), canisterBuffer, encode('controllers')];
            case 'module_hash':
                return [encode('canister'), canisterBuffer, encode('module_hash')];
            case 'subnet':
                return [encode('subnet')];
            case 'candid':
                return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];
            default: {
                // Check for CustomPath signature
                if ('key' in path && 'path' in path) {
                    // For simplified metadata queries
                    if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {
                        const metaPath = path.path;
                        const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;
                        return [encode('canister'), canisterBuffer, encode('metadata'), encoded];
                        // For non-metadata, return the provided custompath
                    }
                    else {
                        return path['path'];
                    }
                }
            }
        }
        throw new Error(`An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`);
    };
    const decodeHex = (buf) => {
        return toHex(buf);
    };
    const decodeLeb128 = (buf) => {
        return lebDecode(new PipeArrayBuffer(buf));
    };
    const decodeCbor = (buf) => {
        return decode$1(buf);
    };
    const decodeUtf8 = (buf) => {
        return new TextDecoder().decode(buf);
    };
    // time is a LEB128-encoded Nat
    const decodeTime = (buf) => {
        const decoded = decodeLeb128(buf);
        return new Date(Number(decoded / BigInt(1000000)));
    };
    // Controllers are CBOR-encoded buffers, starting with a Tag we don't need
    const decodeControllers = (buf) => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const [tag, ...controllersRaw] = decodeCbor(buf);
        return controllersRaw.map((buf) => {
            return Principal$1.fromUint8Array(new Uint8Array(buf));
        });
    };

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        encodePath: encodePath,
        request: request
    });

    const idlFactory = ({ IDL }) => {
      const PrincipalEntry = IDL.Record({
        'name' : IDL.Opt(IDL.Text),
        'when' : IDL.Opt(IDL.Nat64),
      });
      const HistoryEntry = IDL.Record({
        'action' : IDL.Text,
        'user' : IDL.Opt(IDL.Text),
        'when' : IDL.Opt(IDL.Nat64),
        'created_at' : IDL.Nat64,
      });
      const EncryptedNote = IDL.Record({
        'id' : IDL.Nat,
        'updated_at' : IDL.Nat64,
        'encrypted_text' : IDL.Text,
        'owner' : IDL.Text,
        'data' : IDL.Text,
        'locked' : IDL.Bool,
        'history' : IDL.Vec(HistoryEntry),
        'created_at' : IDL.Nat64,
        'users' : IDL.Vec(PrincipalEntry),
      });
      const anon_class_15_1 = IDL.Service({
        'add_user' : IDL.Func([IDL.Nat, PrincipalEntry], [], []),
        'create_note' : IDL.Func([], [IDL.Nat], []),
        'delete_note' : IDL.Func([IDL.Nat], [], []),
        'encrypted_symmetric_key_for_note' : IDL.Func(
            [IDL.Nat, IDL.Vec(IDL.Nat8)],
            [IDL.Text],
            [],
          ),
        'get_notes' : IDL.Func([], [IDL.Vec(EncryptedNote)], []),
        'remove_user' : IDL.Func([IDL.Nat, IDL.Opt(IDL.Text)], [], []),
        'symmetric_key_verification_key_for_note' : IDL.Func([], [IDL.Text], []),
        'update_note' : IDL.Func([IDL.Nat, IDL.Text, IDL.Text], [], []),
        'whoami' : IDL.Func([], [IDL.Text], []),
      });
      return anon_class_15_1;
    };

    const ENCRYPTED_NOTES_CANISTER_ID = process.env.ENCRYPTED_NOTES_RUST_CANISTER_ID;

    function createActor(_options) {
        const hostOptions = {
            host: process.env.DFX_NETWORK === "ic"
                ? `https://${ENCRYPTED_NOTES_CANISTER_ID}.ic0.app`
                : "http://localhost:8000",
        };
        let options = _options;
        if (!options) {
            options = {
                agentOptions: hostOptions,
            };
        }
        else if (!options.agentOptions) {
            options.agentOptions = hostOptions;
        }
        else {
            options.agentOptions.host = hostOptions.host;
        }
        const agent = new HttpAgent(Object.assign({}, options.agentOptions));
        // Fetch root key for certificate validation during development
        if (process.env.NODE_ENV !== "production") {
            console.log("Dev environment - fetching root key...");
            agent.fetchRootKey().catch((err) => {
                console.warn("Unable to fetch root key. Check to ensure that your local replica is running");
                console.error(err);
            });
        }
        // Creates an actor with using the candid interface and the HttpAgent
        return Actor.createActor(idlFactory, Object.assign({ agent, canisterId: ENCRYPTED_NOTES_CANISTER_ID }, options === null || options === void 0 ? void 0 : options.actorOptions));
    }

    function commonjsRequire(path) {
    	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
    }

    var naclFast = {exports: {}};

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        default: _nodeResolve_empty
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

    (function (module) {
    	(function(nacl) {

    	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    	// Public domain.
    	//
    	// Implementation derived from TweetNaCl version 20140427.
    	// See for details: http://tweetnacl.cr.yp.to/

    	var gf = function(init) {
    	  var i, r = new Float64Array(16);
    	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
    	  return r;
    	};

    	//  Pluggable, initialized in high-level API below.
    	var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

    	var _0 = new Uint8Array(16);
    	var _9 = new Uint8Array(32); _9[0] = 9;

    	var gf0 = gf(),
    	    gf1 = gf([1]),
    	    _121665 = gf([0xdb41, 1]),
    	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
    	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
    	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
    	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
    	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

    	function ts64(x, i, h, l) {
    	  x[i]   = (h >> 24) & 0xff;
    	  x[i+1] = (h >> 16) & 0xff;
    	  x[i+2] = (h >>  8) & 0xff;
    	  x[i+3] = h & 0xff;
    	  x[i+4] = (l >> 24)  & 0xff;
    	  x[i+5] = (l >> 16)  & 0xff;
    	  x[i+6] = (l >>  8)  & 0xff;
    	  x[i+7] = l & 0xff;
    	}

    	function vn(x, xi, y, yi, n) {
    	  var i,d = 0;
    	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
    	  return (1 & ((d - 1) >>> 8)) - 1;
    	}

    	function crypto_verify_16(x, xi, y, yi) {
    	  return vn(x,xi,y,yi,16);
    	}

    	function crypto_verify_32(x, xi, y, yi) {
    	  return vn(x,xi,y,yi,32);
    	}

    	function core_salsa20(o, p, k, c) {
    	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
    	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
    	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
    	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
    	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
    	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
    	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
    	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
    	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
    	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
    	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
    	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
    	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
    	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
    	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
    	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

    	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
    	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
    	      x15 = j15, u;

    	  for (var i = 0; i < 20; i += 2) {
    	    u = x0 + x12 | 0;
    	    x4 ^= u<<7 | u>>>(32-7);
    	    u = x4 + x0 | 0;
    	    x8 ^= u<<9 | u>>>(32-9);
    	    u = x8 + x4 | 0;
    	    x12 ^= u<<13 | u>>>(32-13);
    	    u = x12 + x8 | 0;
    	    x0 ^= u<<18 | u>>>(32-18);

    	    u = x5 + x1 | 0;
    	    x9 ^= u<<7 | u>>>(32-7);
    	    u = x9 + x5 | 0;
    	    x13 ^= u<<9 | u>>>(32-9);
    	    u = x13 + x9 | 0;
    	    x1 ^= u<<13 | u>>>(32-13);
    	    u = x1 + x13 | 0;
    	    x5 ^= u<<18 | u>>>(32-18);

    	    u = x10 + x6 | 0;
    	    x14 ^= u<<7 | u>>>(32-7);
    	    u = x14 + x10 | 0;
    	    x2 ^= u<<9 | u>>>(32-9);
    	    u = x2 + x14 | 0;
    	    x6 ^= u<<13 | u>>>(32-13);
    	    u = x6 + x2 | 0;
    	    x10 ^= u<<18 | u>>>(32-18);

    	    u = x15 + x11 | 0;
    	    x3 ^= u<<7 | u>>>(32-7);
    	    u = x3 + x15 | 0;
    	    x7 ^= u<<9 | u>>>(32-9);
    	    u = x7 + x3 | 0;
    	    x11 ^= u<<13 | u>>>(32-13);
    	    u = x11 + x7 | 0;
    	    x15 ^= u<<18 | u>>>(32-18);

    	    u = x0 + x3 | 0;
    	    x1 ^= u<<7 | u>>>(32-7);
    	    u = x1 + x0 | 0;
    	    x2 ^= u<<9 | u>>>(32-9);
    	    u = x2 + x1 | 0;
    	    x3 ^= u<<13 | u>>>(32-13);
    	    u = x3 + x2 | 0;
    	    x0 ^= u<<18 | u>>>(32-18);

    	    u = x5 + x4 | 0;
    	    x6 ^= u<<7 | u>>>(32-7);
    	    u = x6 + x5 | 0;
    	    x7 ^= u<<9 | u>>>(32-9);
    	    u = x7 + x6 | 0;
    	    x4 ^= u<<13 | u>>>(32-13);
    	    u = x4 + x7 | 0;
    	    x5 ^= u<<18 | u>>>(32-18);

    	    u = x10 + x9 | 0;
    	    x11 ^= u<<7 | u>>>(32-7);
    	    u = x11 + x10 | 0;
    	    x8 ^= u<<9 | u>>>(32-9);
    	    u = x8 + x11 | 0;
    	    x9 ^= u<<13 | u>>>(32-13);
    	    u = x9 + x8 | 0;
    	    x10 ^= u<<18 | u>>>(32-18);

    	    u = x15 + x14 | 0;
    	    x12 ^= u<<7 | u>>>(32-7);
    	    u = x12 + x15 | 0;
    	    x13 ^= u<<9 | u>>>(32-9);
    	    u = x13 + x12 | 0;
    	    x14 ^= u<<13 | u>>>(32-13);
    	    u = x14 + x13 | 0;
    	    x15 ^= u<<18 | u>>>(32-18);
    	  }
    	   x0 =  x0 +  j0 | 0;
    	   x1 =  x1 +  j1 | 0;
    	   x2 =  x2 +  j2 | 0;
    	   x3 =  x3 +  j3 | 0;
    	   x4 =  x4 +  j4 | 0;
    	   x5 =  x5 +  j5 | 0;
    	   x6 =  x6 +  j6 | 0;
    	   x7 =  x7 +  j7 | 0;
    	   x8 =  x8 +  j8 | 0;
    	   x9 =  x9 +  j9 | 0;
    	  x10 = x10 + j10 | 0;
    	  x11 = x11 + j11 | 0;
    	  x12 = x12 + j12 | 0;
    	  x13 = x13 + j13 | 0;
    	  x14 = x14 + j14 | 0;
    	  x15 = x15 + j15 | 0;

    	  o[ 0] = x0 >>>  0 & 0xff;
    	  o[ 1] = x0 >>>  8 & 0xff;
    	  o[ 2] = x0 >>> 16 & 0xff;
    	  o[ 3] = x0 >>> 24 & 0xff;

    	  o[ 4] = x1 >>>  0 & 0xff;
    	  o[ 5] = x1 >>>  8 & 0xff;
    	  o[ 6] = x1 >>> 16 & 0xff;
    	  o[ 7] = x1 >>> 24 & 0xff;

    	  o[ 8] = x2 >>>  0 & 0xff;
    	  o[ 9] = x2 >>>  8 & 0xff;
    	  o[10] = x2 >>> 16 & 0xff;
    	  o[11] = x2 >>> 24 & 0xff;

    	  o[12] = x3 >>>  0 & 0xff;
    	  o[13] = x3 >>>  8 & 0xff;
    	  o[14] = x3 >>> 16 & 0xff;
    	  o[15] = x3 >>> 24 & 0xff;

    	  o[16] = x4 >>>  0 & 0xff;
    	  o[17] = x4 >>>  8 & 0xff;
    	  o[18] = x4 >>> 16 & 0xff;
    	  o[19] = x4 >>> 24 & 0xff;

    	  o[20] = x5 >>>  0 & 0xff;
    	  o[21] = x5 >>>  8 & 0xff;
    	  o[22] = x5 >>> 16 & 0xff;
    	  o[23] = x5 >>> 24 & 0xff;

    	  o[24] = x6 >>>  0 & 0xff;
    	  o[25] = x6 >>>  8 & 0xff;
    	  o[26] = x6 >>> 16 & 0xff;
    	  o[27] = x6 >>> 24 & 0xff;

    	  o[28] = x7 >>>  0 & 0xff;
    	  o[29] = x7 >>>  8 & 0xff;
    	  o[30] = x7 >>> 16 & 0xff;
    	  o[31] = x7 >>> 24 & 0xff;

    	  o[32] = x8 >>>  0 & 0xff;
    	  o[33] = x8 >>>  8 & 0xff;
    	  o[34] = x8 >>> 16 & 0xff;
    	  o[35] = x8 >>> 24 & 0xff;

    	  o[36] = x9 >>>  0 & 0xff;
    	  o[37] = x9 >>>  8 & 0xff;
    	  o[38] = x9 >>> 16 & 0xff;
    	  o[39] = x9 >>> 24 & 0xff;

    	  o[40] = x10 >>>  0 & 0xff;
    	  o[41] = x10 >>>  8 & 0xff;
    	  o[42] = x10 >>> 16 & 0xff;
    	  o[43] = x10 >>> 24 & 0xff;

    	  o[44] = x11 >>>  0 & 0xff;
    	  o[45] = x11 >>>  8 & 0xff;
    	  o[46] = x11 >>> 16 & 0xff;
    	  o[47] = x11 >>> 24 & 0xff;

    	  o[48] = x12 >>>  0 & 0xff;
    	  o[49] = x12 >>>  8 & 0xff;
    	  o[50] = x12 >>> 16 & 0xff;
    	  o[51] = x12 >>> 24 & 0xff;

    	  o[52] = x13 >>>  0 & 0xff;
    	  o[53] = x13 >>>  8 & 0xff;
    	  o[54] = x13 >>> 16 & 0xff;
    	  o[55] = x13 >>> 24 & 0xff;

    	  o[56] = x14 >>>  0 & 0xff;
    	  o[57] = x14 >>>  8 & 0xff;
    	  o[58] = x14 >>> 16 & 0xff;
    	  o[59] = x14 >>> 24 & 0xff;

    	  o[60] = x15 >>>  0 & 0xff;
    	  o[61] = x15 >>>  8 & 0xff;
    	  o[62] = x15 >>> 16 & 0xff;
    	  o[63] = x15 >>> 24 & 0xff;
    	}

    	function core_hsalsa20(o,p,k,c) {
    	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
    	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
    	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
    	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
    	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
    	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
    	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
    	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
    	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
    	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
    	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
    	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
    	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
    	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
    	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
    	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

    	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
    	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
    	      x15 = j15, u;

    	  for (var i = 0; i < 20; i += 2) {
    	    u = x0 + x12 | 0;
    	    x4 ^= u<<7 | u>>>(32-7);
    	    u = x4 + x0 | 0;
    	    x8 ^= u<<9 | u>>>(32-9);
    	    u = x8 + x4 | 0;
    	    x12 ^= u<<13 | u>>>(32-13);
    	    u = x12 + x8 | 0;
    	    x0 ^= u<<18 | u>>>(32-18);

    	    u = x5 + x1 | 0;
    	    x9 ^= u<<7 | u>>>(32-7);
    	    u = x9 + x5 | 0;
    	    x13 ^= u<<9 | u>>>(32-9);
    	    u = x13 + x9 | 0;
    	    x1 ^= u<<13 | u>>>(32-13);
    	    u = x1 + x13 | 0;
    	    x5 ^= u<<18 | u>>>(32-18);

    	    u = x10 + x6 | 0;
    	    x14 ^= u<<7 | u>>>(32-7);
    	    u = x14 + x10 | 0;
    	    x2 ^= u<<9 | u>>>(32-9);
    	    u = x2 + x14 | 0;
    	    x6 ^= u<<13 | u>>>(32-13);
    	    u = x6 + x2 | 0;
    	    x10 ^= u<<18 | u>>>(32-18);

    	    u = x15 + x11 | 0;
    	    x3 ^= u<<7 | u>>>(32-7);
    	    u = x3 + x15 | 0;
    	    x7 ^= u<<9 | u>>>(32-9);
    	    u = x7 + x3 | 0;
    	    x11 ^= u<<13 | u>>>(32-13);
    	    u = x11 + x7 | 0;
    	    x15 ^= u<<18 | u>>>(32-18);

    	    u = x0 + x3 | 0;
    	    x1 ^= u<<7 | u>>>(32-7);
    	    u = x1 + x0 | 0;
    	    x2 ^= u<<9 | u>>>(32-9);
    	    u = x2 + x1 | 0;
    	    x3 ^= u<<13 | u>>>(32-13);
    	    u = x3 + x2 | 0;
    	    x0 ^= u<<18 | u>>>(32-18);

    	    u = x5 + x4 | 0;
    	    x6 ^= u<<7 | u>>>(32-7);
    	    u = x6 + x5 | 0;
    	    x7 ^= u<<9 | u>>>(32-9);
    	    u = x7 + x6 | 0;
    	    x4 ^= u<<13 | u>>>(32-13);
    	    u = x4 + x7 | 0;
    	    x5 ^= u<<18 | u>>>(32-18);

    	    u = x10 + x9 | 0;
    	    x11 ^= u<<7 | u>>>(32-7);
    	    u = x11 + x10 | 0;
    	    x8 ^= u<<9 | u>>>(32-9);
    	    u = x8 + x11 | 0;
    	    x9 ^= u<<13 | u>>>(32-13);
    	    u = x9 + x8 | 0;
    	    x10 ^= u<<18 | u>>>(32-18);

    	    u = x15 + x14 | 0;
    	    x12 ^= u<<7 | u>>>(32-7);
    	    u = x12 + x15 | 0;
    	    x13 ^= u<<9 | u>>>(32-9);
    	    u = x13 + x12 | 0;
    	    x14 ^= u<<13 | u>>>(32-13);
    	    u = x14 + x13 | 0;
    	    x15 ^= u<<18 | u>>>(32-18);
    	  }

    	  o[ 0] = x0 >>>  0 & 0xff;
    	  o[ 1] = x0 >>>  8 & 0xff;
    	  o[ 2] = x0 >>> 16 & 0xff;
    	  o[ 3] = x0 >>> 24 & 0xff;

    	  o[ 4] = x5 >>>  0 & 0xff;
    	  o[ 5] = x5 >>>  8 & 0xff;
    	  o[ 6] = x5 >>> 16 & 0xff;
    	  o[ 7] = x5 >>> 24 & 0xff;

    	  o[ 8] = x10 >>>  0 & 0xff;
    	  o[ 9] = x10 >>>  8 & 0xff;
    	  o[10] = x10 >>> 16 & 0xff;
    	  o[11] = x10 >>> 24 & 0xff;

    	  o[12] = x15 >>>  0 & 0xff;
    	  o[13] = x15 >>>  8 & 0xff;
    	  o[14] = x15 >>> 16 & 0xff;
    	  o[15] = x15 >>> 24 & 0xff;

    	  o[16] = x6 >>>  0 & 0xff;
    	  o[17] = x6 >>>  8 & 0xff;
    	  o[18] = x6 >>> 16 & 0xff;
    	  o[19] = x6 >>> 24 & 0xff;

    	  o[20] = x7 >>>  0 & 0xff;
    	  o[21] = x7 >>>  8 & 0xff;
    	  o[22] = x7 >>> 16 & 0xff;
    	  o[23] = x7 >>> 24 & 0xff;

    	  o[24] = x8 >>>  0 & 0xff;
    	  o[25] = x8 >>>  8 & 0xff;
    	  o[26] = x8 >>> 16 & 0xff;
    	  o[27] = x8 >>> 24 & 0xff;

    	  o[28] = x9 >>>  0 & 0xff;
    	  o[29] = x9 >>>  8 & 0xff;
    	  o[30] = x9 >>> 16 & 0xff;
    	  o[31] = x9 >>> 24 & 0xff;
    	}

    	function crypto_core_salsa20(out,inp,k,c) {
    	  core_salsa20(out,inp,k,c);
    	}

    	function crypto_core_hsalsa20(out,inp,k,c) {
    	  core_hsalsa20(out,inp,k,c);
    	}

    	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
    	            // "expand 32-byte k"

    	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
    	  var z = new Uint8Array(16), x = new Uint8Array(64);
    	  var u, i;
    	  for (i = 0; i < 16; i++) z[i] = 0;
    	  for (i = 0; i < 8; i++) z[i] = n[i];
    	  while (b >= 64) {
    	    crypto_core_salsa20(x,z,k,sigma);
    	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
    	    u = 1;
    	    for (i = 8; i < 16; i++) {
    	      u = u + (z[i] & 0xff) | 0;
    	      z[i] = u & 0xff;
    	      u >>>= 8;
    	    }
    	    b -= 64;
    	    cpos += 64;
    	    mpos += 64;
    	  }
    	  if (b > 0) {
    	    crypto_core_salsa20(x,z,k,sigma);
    	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
    	  }
    	  return 0;
    	}

    	function crypto_stream_salsa20(c,cpos,b,n,k) {
    	  var z = new Uint8Array(16), x = new Uint8Array(64);
    	  var u, i;
    	  for (i = 0; i < 16; i++) z[i] = 0;
    	  for (i = 0; i < 8; i++) z[i] = n[i];
    	  while (b >= 64) {
    	    crypto_core_salsa20(x,z,k,sigma);
    	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
    	    u = 1;
    	    for (i = 8; i < 16; i++) {
    	      u = u + (z[i] & 0xff) | 0;
    	      z[i] = u & 0xff;
    	      u >>>= 8;
    	    }
    	    b -= 64;
    	    cpos += 64;
    	  }
    	  if (b > 0) {
    	    crypto_core_salsa20(x,z,k,sigma);
    	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
    	  }
    	  return 0;
    	}

    	function crypto_stream(c,cpos,d,n,k) {
    	  var s = new Uint8Array(32);
    	  crypto_core_hsalsa20(s,n,k,sigma);
    	  var sn = new Uint8Array(8);
    	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
    	  return crypto_stream_salsa20(c,cpos,d,sn,s);
    	}

    	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
    	  var s = new Uint8Array(32);
    	  crypto_core_hsalsa20(s,n,k,sigma);
    	  var sn = new Uint8Array(8);
    	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
    	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
    	}

    	/*
    	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
    	* https://github.com/floodyberry/poly1305-donna
    	*/

    	var poly1305 = function(key) {
    	  this.buffer = new Uint8Array(16);
    	  this.r = new Uint16Array(10);
    	  this.h = new Uint16Array(10);
    	  this.pad = new Uint16Array(8);
    	  this.leftover = 0;
    	  this.fin = 0;

    	  var t0, t1, t2, t3, t4, t5, t6, t7;

    	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
    	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
    	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
    	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
    	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
    	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
    	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
    	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
    	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
    	  this.r[9] = ((t7 >>>  5)) & 0x007f;

    	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
    	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
    	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
    	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
    	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
    	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
    	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
    	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    	};

    	poly1305.prototype.blocks = function(m, mpos, bytes) {
    	  var hibit = this.fin ? 0 : (1 << 11);
    	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
    	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

    	  var h0 = this.h[0],
    	      h1 = this.h[1],
    	      h2 = this.h[2],
    	      h3 = this.h[3],
    	      h4 = this.h[4],
    	      h5 = this.h[5],
    	      h6 = this.h[6],
    	      h7 = this.h[7],
    	      h8 = this.h[8],
    	      h9 = this.h[9];

    	  var r0 = this.r[0],
    	      r1 = this.r[1],
    	      r2 = this.r[2],
    	      r3 = this.r[3],
    	      r4 = this.r[4],
    	      r5 = this.r[5],
    	      r6 = this.r[6],
    	      r7 = this.r[7],
    	      r8 = this.r[8],
    	      r9 = this.r[9];

    	  while (bytes >= 16) {
    	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
    	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
    	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
    	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
    	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
    	    h5 += ((t4 >>>  1)) & 0x1fff;
    	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
    	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
    	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
    	    h9 += ((t7 >>> 5)) | hibit;

    	    c = 0;

    	    d0 = c;
    	    d0 += h0 * r0;
    	    d0 += h1 * (5 * r9);
    	    d0 += h2 * (5 * r8);
    	    d0 += h3 * (5 * r7);
    	    d0 += h4 * (5 * r6);
    	    c = (d0 >>> 13); d0 &= 0x1fff;
    	    d0 += h5 * (5 * r5);
    	    d0 += h6 * (5 * r4);
    	    d0 += h7 * (5 * r3);
    	    d0 += h8 * (5 * r2);
    	    d0 += h9 * (5 * r1);
    	    c += (d0 >>> 13); d0 &= 0x1fff;

    	    d1 = c;
    	    d1 += h0 * r1;
    	    d1 += h1 * r0;
    	    d1 += h2 * (5 * r9);
    	    d1 += h3 * (5 * r8);
    	    d1 += h4 * (5 * r7);
    	    c = (d1 >>> 13); d1 &= 0x1fff;
    	    d1 += h5 * (5 * r6);
    	    d1 += h6 * (5 * r5);
    	    d1 += h7 * (5 * r4);
    	    d1 += h8 * (5 * r3);
    	    d1 += h9 * (5 * r2);
    	    c += (d1 >>> 13); d1 &= 0x1fff;

    	    d2 = c;
    	    d2 += h0 * r2;
    	    d2 += h1 * r1;
    	    d2 += h2 * r0;
    	    d2 += h3 * (5 * r9);
    	    d2 += h4 * (5 * r8);
    	    c = (d2 >>> 13); d2 &= 0x1fff;
    	    d2 += h5 * (5 * r7);
    	    d2 += h6 * (5 * r6);
    	    d2 += h7 * (5 * r5);
    	    d2 += h8 * (5 * r4);
    	    d2 += h9 * (5 * r3);
    	    c += (d2 >>> 13); d2 &= 0x1fff;

    	    d3 = c;
    	    d3 += h0 * r3;
    	    d3 += h1 * r2;
    	    d3 += h2 * r1;
    	    d3 += h3 * r0;
    	    d3 += h4 * (5 * r9);
    	    c = (d3 >>> 13); d3 &= 0x1fff;
    	    d3 += h5 * (5 * r8);
    	    d3 += h6 * (5 * r7);
    	    d3 += h7 * (5 * r6);
    	    d3 += h8 * (5 * r5);
    	    d3 += h9 * (5 * r4);
    	    c += (d3 >>> 13); d3 &= 0x1fff;

    	    d4 = c;
    	    d4 += h0 * r4;
    	    d4 += h1 * r3;
    	    d4 += h2 * r2;
    	    d4 += h3 * r1;
    	    d4 += h4 * r0;
    	    c = (d4 >>> 13); d4 &= 0x1fff;
    	    d4 += h5 * (5 * r9);
    	    d4 += h6 * (5 * r8);
    	    d4 += h7 * (5 * r7);
    	    d4 += h8 * (5 * r6);
    	    d4 += h9 * (5 * r5);
    	    c += (d4 >>> 13); d4 &= 0x1fff;

    	    d5 = c;
    	    d5 += h0 * r5;
    	    d5 += h1 * r4;
    	    d5 += h2 * r3;
    	    d5 += h3 * r2;
    	    d5 += h4 * r1;
    	    c = (d5 >>> 13); d5 &= 0x1fff;
    	    d5 += h5 * r0;
    	    d5 += h6 * (5 * r9);
    	    d5 += h7 * (5 * r8);
    	    d5 += h8 * (5 * r7);
    	    d5 += h9 * (5 * r6);
    	    c += (d5 >>> 13); d5 &= 0x1fff;

    	    d6 = c;
    	    d6 += h0 * r6;
    	    d6 += h1 * r5;
    	    d6 += h2 * r4;
    	    d6 += h3 * r3;
    	    d6 += h4 * r2;
    	    c = (d6 >>> 13); d6 &= 0x1fff;
    	    d6 += h5 * r1;
    	    d6 += h6 * r0;
    	    d6 += h7 * (5 * r9);
    	    d6 += h8 * (5 * r8);
    	    d6 += h9 * (5 * r7);
    	    c += (d6 >>> 13); d6 &= 0x1fff;

    	    d7 = c;
    	    d7 += h0 * r7;
    	    d7 += h1 * r6;
    	    d7 += h2 * r5;
    	    d7 += h3 * r4;
    	    d7 += h4 * r3;
    	    c = (d7 >>> 13); d7 &= 0x1fff;
    	    d7 += h5 * r2;
    	    d7 += h6 * r1;
    	    d7 += h7 * r0;
    	    d7 += h8 * (5 * r9);
    	    d7 += h9 * (5 * r8);
    	    c += (d7 >>> 13); d7 &= 0x1fff;

    	    d8 = c;
    	    d8 += h0 * r8;
    	    d8 += h1 * r7;
    	    d8 += h2 * r6;
    	    d8 += h3 * r5;
    	    d8 += h4 * r4;
    	    c = (d8 >>> 13); d8 &= 0x1fff;
    	    d8 += h5 * r3;
    	    d8 += h6 * r2;
    	    d8 += h7 * r1;
    	    d8 += h8 * r0;
    	    d8 += h9 * (5 * r9);
    	    c += (d8 >>> 13); d8 &= 0x1fff;

    	    d9 = c;
    	    d9 += h0 * r9;
    	    d9 += h1 * r8;
    	    d9 += h2 * r7;
    	    d9 += h3 * r6;
    	    d9 += h4 * r5;
    	    c = (d9 >>> 13); d9 &= 0x1fff;
    	    d9 += h5 * r4;
    	    d9 += h6 * r3;
    	    d9 += h7 * r2;
    	    d9 += h8 * r1;
    	    d9 += h9 * r0;
    	    c += (d9 >>> 13); d9 &= 0x1fff;

    	    c = (((c << 2) + c)) | 0;
    	    c = (c + d0) | 0;
    	    d0 = c & 0x1fff;
    	    c = (c >>> 13);
    	    d1 += c;

    	    h0 = d0;
    	    h1 = d1;
    	    h2 = d2;
    	    h3 = d3;
    	    h4 = d4;
    	    h5 = d5;
    	    h6 = d6;
    	    h7 = d7;
    	    h8 = d8;
    	    h9 = d9;

    	    mpos += 16;
    	    bytes -= 16;
    	  }
    	  this.h[0] = h0;
    	  this.h[1] = h1;
    	  this.h[2] = h2;
    	  this.h[3] = h3;
    	  this.h[4] = h4;
    	  this.h[5] = h5;
    	  this.h[6] = h6;
    	  this.h[7] = h7;
    	  this.h[8] = h8;
    	  this.h[9] = h9;
    	};

    	poly1305.prototype.finish = function(mac, macpos) {
    	  var g = new Uint16Array(10);
    	  var c, mask, f, i;

    	  if (this.leftover) {
    	    i = this.leftover;
    	    this.buffer[i++] = 1;
    	    for (; i < 16; i++) this.buffer[i] = 0;
    	    this.fin = 1;
    	    this.blocks(this.buffer, 0, 16);
    	  }

    	  c = this.h[1] >>> 13;
    	  this.h[1] &= 0x1fff;
    	  for (i = 2; i < 10; i++) {
    	    this.h[i] += c;
    	    c = this.h[i] >>> 13;
    	    this.h[i] &= 0x1fff;
    	  }
    	  this.h[0] += (c * 5);
    	  c = this.h[0] >>> 13;
    	  this.h[0] &= 0x1fff;
    	  this.h[1] += c;
    	  c = this.h[1] >>> 13;
    	  this.h[1] &= 0x1fff;
    	  this.h[2] += c;

    	  g[0] = this.h[0] + 5;
    	  c = g[0] >>> 13;
    	  g[0] &= 0x1fff;
    	  for (i = 1; i < 10; i++) {
    	    g[i] = this.h[i] + c;
    	    c = g[i] >>> 13;
    	    g[i] &= 0x1fff;
    	  }
    	  g[9] -= (1 << 13);

    	  mask = (c ^ 1) - 1;
    	  for (i = 0; i < 10; i++) g[i] &= mask;
    	  mask = ~mask;
    	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

    	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
    	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
    	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
    	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
    	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
    	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
    	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
    	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

    	  f = this.h[0] + this.pad[0];
    	  this.h[0] = f & 0xffff;
    	  for (i = 1; i < 8; i++) {
    	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
    	    this.h[i] = f & 0xffff;
    	  }

    	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
    	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
    	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
    	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
    	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
    	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
    	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
    	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
    	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
    	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
    	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
    	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
    	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
    	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
    	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
    	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
    	};

    	poly1305.prototype.update = function(m, mpos, bytes) {
    	  var i, want;

    	  if (this.leftover) {
    	    want = (16 - this.leftover);
    	    if (want > bytes)
    	      want = bytes;
    	    for (i = 0; i < want; i++)
    	      this.buffer[this.leftover + i] = m[mpos+i];
    	    bytes -= want;
    	    mpos += want;
    	    this.leftover += want;
    	    if (this.leftover < 16)
    	      return;
    	    this.blocks(this.buffer, 0, 16);
    	    this.leftover = 0;
    	  }

    	  if (bytes >= 16) {
    	    want = bytes - (bytes % 16);
    	    this.blocks(m, mpos, want);
    	    mpos += want;
    	    bytes -= want;
    	  }

    	  if (bytes) {
    	    for (i = 0; i < bytes; i++)
    	      this.buffer[this.leftover + i] = m[mpos+i];
    	    this.leftover += bytes;
    	  }
    	};

    	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
    	  var s = new poly1305(k);
    	  s.update(m, mpos, n);
    	  s.finish(out, outpos);
    	  return 0;
    	}

    	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
    	  var x = new Uint8Array(16);
    	  crypto_onetimeauth(x,0,m,mpos,n,k);
    	  return crypto_verify_16(h,hpos,x,0);
    	}

    	function crypto_secretbox(c,m,d,n,k) {
    	  var i;
    	  if (d < 32) return -1;
    	  crypto_stream_xor(c,0,m,0,d,n,k);
    	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
    	  for (i = 0; i < 16; i++) c[i] = 0;
    	  return 0;
    	}

    	function crypto_secretbox_open(m,c,d,n,k) {
    	  var i;
    	  var x = new Uint8Array(32);
    	  if (d < 32) return -1;
    	  crypto_stream(x,0,32,n,k);
    	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
    	  crypto_stream_xor(m,0,c,0,d,n,k);
    	  for (i = 0; i < 32; i++) m[i] = 0;
    	  return 0;
    	}

    	function set25519(r, a) {
    	  var i;
    	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
    	}

    	function car25519(o) {
    	  var i, v, c = 1;
    	  for (i = 0; i < 16; i++) {
    	    v = o[i] + c + 65535;
    	    c = Math.floor(v / 65536);
    	    o[i] = v - c * 65536;
    	  }
    	  o[0] += c-1 + 37 * (c-1);
    	}

    	function sel25519(p, q, b) {
    	  var t, c = ~(b-1);
    	  for (var i = 0; i < 16; i++) {
    	    t = c & (p[i] ^ q[i]);
    	    p[i] ^= t;
    	    q[i] ^= t;
    	  }
    	}

    	function pack25519(o, n) {
    	  var i, j, b;
    	  var m = gf(), t = gf();
    	  for (i = 0; i < 16; i++) t[i] = n[i];
    	  car25519(t);
    	  car25519(t);
    	  car25519(t);
    	  for (j = 0; j < 2; j++) {
    	    m[0] = t[0] - 0xffed;
    	    for (i = 1; i < 15; i++) {
    	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
    	      m[i-1] &= 0xffff;
    	    }
    	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
    	    b = (m[15]>>16) & 1;
    	    m[14] &= 0xffff;
    	    sel25519(t, m, 1-b);
    	  }
    	  for (i = 0; i < 16; i++) {
    	    o[2*i] = t[i] & 0xff;
    	    o[2*i+1] = t[i]>>8;
    	  }
    	}

    	function neq25519(a, b) {
    	  var c = new Uint8Array(32), d = new Uint8Array(32);
    	  pack25519(c, a);
    	  pack25519(d, b);
    	  return crypto_verify_32(c, 0, d, 0);
    	}

    	function par25519(a) {
    	  var d = new Uint8Array(32);
    	  pack25519(d, a);
    	  return d[0] & 1;
    	}

    	function unpack25519(o, n) {
    	  var i;
    	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
    	  o[15] &= 0x7fff;
    	}

    	function A(o, a, b) {
    	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
    	}

    	function Z(o, a, b) {
    	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
    	}

    	function M(o, a, b) {
    	  var v, c,
    	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
    	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
    	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
    	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
    	    b0 = b[0],
    	    b1 = b[1],
    	    b2 = b[2],
    	    b3 = b[3],
    	    b4 = b[4],
    	    b5 = b[5],
    	    b6 = b[6],
    	    b7 = b[7],
    	    b8 = b[8],
    	    b9 = b[9],
    	    b10 = b[10],
    	    b11 = b[11],
    	    b12 = b[12],
    	    b13 = b[13],
    	    b14 = b[14],
    	    b15 = b[15];

    	  v = a[0];
    	  t0 += v * b0;
    	  t1 += v * b1;
    	  t2 += v * b2;
    	  t3 += v * b3;
    	  t4 += v * b4;
    	  t5 += v * b5;
    	  t6 += v * b6;
    	  t7 += v * b7;
    	  t8 += v * b8;
    	  t9 += v * b9;
    	  t10 += v * b10;
    	  t11 += v * b11;
    	  t12 += v * b12;
    	  t13 += v * b13;
    	  t14 += v * b14;
    	  t15 += v * b15;
    	  v = a[1];
    	  t1 += v * b0;
    	  t2 += v * b1;
    	  t3 += v * b2;
    	  t4 += v * b3;
    	  t5 += v * b4;
    	  t6 += v * b5;
    	  t7 += v * b6;
    	  t8 += v * b7;
    	  t9 += v * b8;
    	  t10 += v * b9;
    	  t11 += v * b10;
    	  t12 += v * b11;
    	  t13 += v * b12;
    	  t14 += v * b13;
    	  t15 += v * b14;
    	  t16 += v * b15;
    	  v = a[2];
    	  t2 += v * b0;
    	  t3 += v * b1;
    	  t4 += v * b2;
    	  t5 += v * b3;
    	  t6 += v * b4;
    	  t7 += v * b5;
    	  t8 += v * b6;
    	  t9 += v * b7;
    	  t10 += v * b8;
    	  t11 += v * b9;
    	  t12 += v * b10;
    	  t13 += v * b11;
    	  t14 += v * b12;
    	  t15 += v * b13;
    	  t16 += v * b14;
    	  t17 += v * b15;
    	  v = a[3];
    	  t3 += v * b0;
    	  t4 += v * b1;
    	  t5 += v * b2;
    	  t6 += v * b3;
    	  t7 += v * b4;
    	  t8 += v * b5;
    	  t9 += v * b6;
    	  t10 += v * b7;
    	  t11 += v * b8;
    	  t12 += v * b9;
    	  t13 += v * b10;
    	  t14 += v * b11;
    	  t15 += v * b12;
    	  t16 += v * b13;
    	  t17 += v * b14;
    	  t18 += v * b15;
    	  v = a[4];
    	  t4 += v * b0;
    	  t5 += v * b1;
    	  t6 += v * b2;
    	  t7 += v * b3;
    	  t8 += v * b4;
    	  t9 += v * b5;
    	  t10 += v * b6;
    	  t11 += v * b7;
    	  t12 += v * b8;
    	  t13 += v * b9;
    	  t14 += v * b10;
    	  t15 += v * b11;
    	  t16 += v * b12;
    	  t17 += v * b13;
    	  t18 += v * b14;
    	  t19 += v * b15;
    	  v = a[5];
    	  t5 += v * b0;
    	  t6 += v * b1;
    	  t7 += v * b2;
    	  t8 += v * b3;
    	  t9 += v * b4;
    	  t10 += v * b5;
    	  t11 += v * b6;
    	  t12 += v * b7;
    	  t13 += v * b8;
    	  t14 += v * b9;
    	  t15 += v * b10;
    	  t16 += v * b11;
    	  t17 += v * b12;
    	  t18 += v * b13;
    	  t19 += v * b14;
    	  t20 += v * b15;
    	  v = a[6];
    	  t6 += v * b0;
    	  t7 += v * b1;
    	  t8 += v * b2;
    	  t9 += v * b3;
    	  t10 += v * b4;
    	  t11 += v * b5;
    	  t12 += v * b6;
    	  t13 += v * b7;
    	  t14 += v * b8;
    	  t15 += v * b9;
    	  t16 += v * b10;
    	  t17 += v * b11;
    	  t18 += v * b12;
    	  t19 += v * b13;
    	  t20 += v * b14;
    	  t21 += v * b15;
    	  v = a[7];
    	  t7 += v * b0;
    	  t8 += v * b1;
    	  t9 += v * b2;
    	  t10 += v * b3;
    	  t11 += v * b4;
    	  t12 += v * b5;
    	  t13 += v * b6;
    	  t14 += v * b7;
    	  t15 += v * b8;
    	  t16 += v * b9;
    	  t17 += v * b10;
    	  t18 += v * b11;
    	  t19 += v * b12;
    	  t20 += v * b13;
    	  t21 += v * b14;
    	  t22 += v * b15;
    	  v = a[8];
    	  t8 += v * b0;
    	  t9 += v * b1;
    	  t10 += v * b2;
    	  t11 += v * b3;
    	  t12 += v * b4;
    	  t13 += v * b5;
    	  t14 += v * b6;
    	  t15 += v * b7;
    	  t16 += v * b8;
    	  t17 += v * b9;
    	  t18 += v * b10;
    	  t19 += v * b11;
    	  t20 += v * b12;
    	  t21 += v * b13;
    	  t22 += v * b14;
    	  t23 += v * b15;
    	  v = a[9];
    	  t9 += v * b0;
    	  t10 += v * b1;
    	  t11 += v * b2;
    	  t12 += v * b3;
    	  t13 += v * b4;
    	  t14 += v * b5;
    	  t15 += v * b6;
    	  t16 += v * b7;
    	  t17 += v * b8;
    	  t18 += v * b9;
    	  t19 += v * b10;
    	  t20 += v * b11;
    	  t21 += v * b12;
    	  t22 += v * b13;
    	  t23 += v * b14;
    	  t24 += v * b15;
    	  v = a[10];
    	  t10 += v * b0;
    	  t11 += v * b1;
    	  t12 += v * b2;
    	  t13 += v * b3;
    	  t14 += v * b4;
    	  t15 += v * b5;
    	  t16 += v * b6;
    	  t17 += v * b7;
    	  t18 += v * b8;
    	  t19 += v * b9;
    	  t20 += v * b10;
    	  t21 += v * b11;
    	  t22 += v * b12;
    	  t23 += v * b13;
    	  t24 += v * b14;
    	  t25 += v * b15;
    	  v = a[11];
    	  t11 += v * b0;
    	  t12 += v * b1;
    	  t13 += v * b2;
    	  t14 += v * b3;
    	  t15 += v * b4;
    	  t16 += v * b5;
    	  t17 += v * b6;
    	  t18 += v * b7;
    	  t19 += v * b8;
    	  t20 += v * b9;
    	  t21 += v * b10;
    	  t22 += v * b11;
    	  t23 += v * b12;
    	  t24 += v * b13;
    	  t25 += v * b14;
    	  t26 += v * b15;
    	  v = a[12];
    	  t12 += v * b0;
    	  t13 += v * b1;
    	  t14 += v * b2;
    	  t15 += v * b3;
    	  t16 += v * b4;
    	  t17 += v * b5;
    	  t18 += v * b6;
    	  t19 += v * b7;
    	  t20 += v * b8;
    	  t21 += v * b9;
    	  t22 += v * b10;
    	  t23 += v * b11;
    	  t24 += v * b12;
    	  t25 += v * b13;
    	  t26 += v * b14;
    	  t27 += v * b15;
    	  v = a[13];
    	  t13 += v * b0;
    	  t14 += v * b1;
    	  t15 += v * b2;
    	  t16 += v * b3;
    	  t17 += v * b4;
    	  t18 += v * b5;
    	  t19 += v * b6;
    	  t20 += v * b7;
    	  t21 += v * b8;
    	  t22 += v * b9;
    	  t23 += v * b10;
    	  t24 += v * b11;
    	  t25 += v * b12;
    	  t26 += v * b13;
    	  t27 += v * b14;
    	  t28 += v * b15;
    	  v = a[14];
    	  t14 += v * b0;
    	  t15 += v * b1;
    	  t16 += v * b2;
    	  t17 += v * b3;
    	  t18 += v * b4;
    	  t19 += v * b5;
    	  t20 += v * b6;
    	  t21 += v * b7;
    	  t22 += v * b8;
    	  t23 += v * b9;
    	  t24 += v * b10;
    	  t25 += v * b11;
    	  t26 += v * b12;
    	  t27 += v * b13;
    	  t28 += v * b14;
    	  t29 += v * b15;
    	  v = a[15];
    	  t15 += v * b0;
    	  t16 += v * b1;
    	  t17 += v * b2;
    	  t18 += v * b3;
    	  t19 += v * b4;
    	  t20 += v * b5;
    	  t21 += v * b6;
    	  t22 += v * b7;
    	  t23 += v * b8;
    	  t24 += v * b9;
    	  t25 += v * b10;
    	  t26 += v * b11;
    	  t27 += v * b12;
    	  t28 += v * b13;
    	  t29 += v * b14;
    	  t30 += v * b15;

    	  t0  += 38 * t16;
    	  t1  += 38 * t17;
    	  t2  += 38 * t18;
    	  t3  += 38 * t19;
    	  t4  += 38 * t20;
    	  t5  += 38 * t21;
    	  t6  += 38 * t22;
    	  t7  += 38 * t23;
    	  t8  += 38 * t24;
    	  t9  += 38 * t25;
    	  t10 += 38 * t26;
    	  t11 += 38 * t27;
    	  t12 += 38 * t28;
    	  t13 += 38 * t29;
    	  t14 += 38 * t30;
    	  // t15 left as is

    	  // first car
    	  c = 1;
    	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
    	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
    	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
    	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
    	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
    	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
    	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
    	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
    	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
    	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
    	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
    	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
    	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
    	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
    	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
    	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
    	  t0 += c-1 + 37 * (c-1);

    	  // second car
    	  c = 1;
    	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
    	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
    	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
    	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
    	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
    	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
    	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
    	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
    	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
    	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
    	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
    	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
    	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
    	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
    	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
    	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
    	  t0 += c-1 + 37 * (c-1);

    	  o[ 0] = t0;
    	  o[ 1] = t1;
    	  o[ 2] = t2;
    	  o[ 3] = t3;
    	  o[ 4] = t4;
    	  o[ 5] = t5;
    	  o[ 6] = t6;
    	  o[ 7] = t7;
    	  o[ 8] = t8;
    	  o[ 9] = t9;
    	  o[10] = t10;
    	  o[11] = t11;
    	  o[12] = t12;
    	  o[13] = t13;
    	  o[14] = t14;
    	  o[15] = t15;
    	}

    	function S(o, a) {
    	  M(o, a, a);
    	}

    	function inv25519(o, i) {
    	  var c = gf();
    	  var a;
    	  for (a = 0; a < 16; a++) c[a] = i[a];
    	  for (a = 253; a >= 0; a--) {
    	    S(c, c);
    	    if(a !== 2 && a !== 4) M(c, c, i);
    	  }
    	  for (a = 0; a < 16; a++) o[a] = c[a];
    	}

    	function pow2523(o, i) {
    	  var c = gf();
    	  var a;
    	  for (a = 0; a < 16; a++) c[a] = i[a];
    	  for (a = 250; a >= 0; a--) {
    	      S(c, c);
    	      if(a !== 1) M(c, c, i);
    	  }
    	  for (a = 0; a < 16; a++) o[a] = c[a];
    	}

    	function crypto_scalarmult(q, n, p) {
    	  var z = new Uint8Array(32);
    	  var x = new Float64Array(80), r, i;
    	  var a = gf(), b = gf(), c = gf(),
    	      d = gf(), e = gf(), f = gf();
    	  for (i = 0; i < 31; i++) z[i] = n[i];
    	  z[31]=(n[31]&127)|64;
    	  z[0]&=248;
    	  unpack25519(x,p);
    	  for (i = 0; i < 16; i++) {
    	    b[i]=x[i];
    	    d[i]=a[i]=c[i]=0;
    	  }
    	  a[0]=d[0]=1;
    	  for (i=254; i>=0; --i) {
    	    r=(z[i>>>3]>>>(i&7))&1;
    	    sel25519(a,b,r);
    	    sel25519(c,d,r);
    	    A(e,a,c);
    	    Z(a,a,c);
    	    A(c,b,d);
    	    Z(b,b,d);
    	    S(d,e);
    	    S(f,a);
    	    M(a,c,a);
    	    M(c,b,e);
    	    A(e,a,c);
    	    Z(a,a,c);
    	    S(b,a);
    	    Z(c,d,f);
    	    M(a,c,_121665);
    	    A(a,a,d);
    	    M(c,c,a);
    	    M(a,d,f);
    	    M(d,b,x);
    	    S(b,e);
    	    sel25519(a,b,r);
    	    sel25519(c,d,r);
    	  }
    	  for (i = 0; i < 16; i++) {
    	    x[i+16]=a[i];
    	    x[i+32]=c[i];
    	    x[i+48]=b[i];
    	    x[i+64]=d[i];
    	  }
    	  var x32 = x.subarray(32);
    	  var x16 = x.subarray(16);
    	  inv25519(x32,x32);
    	  M(x16,x16,x32);
    	  pack25519(q,x16);
    	  return 0;
    	}

    	function crypto_scalarmult_base(q, n) {
    	  return crypto_scalarmult(q, n, _9);
    	}

    	function crypto_box_keypair(y, x) {
    	  randombytes(x, 32);
    	  return crypto_scalarmult_base(y, x);
    	}

    	function crypto_box_beforenm(k, y, x) {
    	  var s = new Uint8Array(32);
    	  crypto_scalarmult(s, x, y);
    	  return crypto_core_hsalsa20(k, _0, s, sigma);
    	}

    	var crypto_box_afternm = crypto_secretbox;
    	var crypto_box_open_afternm = crypto_secretbox_open;

    	function crypto_box(c, m, d, n, y, x) {
    	  var k = new Uint8Array(32);
    	  crypto_box_beforenm(k, y, x);
    	  return crypto_box_afternm(c, m, d, n, k);
    	}

    	function crypto_box_open(m, c, d, n, y, x) {
    	  var k = new Uint8Array(32);
    	  crypto_box_beforenm(k, y, x);
    	  return crypto_box_open_afternm(m, c, d, n, k);
    	}

    	var K = [
    	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    	];

    	function crypto_hashblocks_hl(hh, hl, m, n) {
    	  var wh = new Int32Array(16), wl = new Int32Array(16),
    	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
    	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
    	      th, tl, i, j, h, l, a, b, c, d;

    	  var ah0 = hh[0],
    	      ah1 = hh[1],
    	      ah2 = hh[2],
    	      ah3 = hh[3],
    	      ah4 = hh[4],
    	      ah5 = hh[5],
    	      ah6 = hh[6],
    	      ah7 = hh[7],

    	      al0 = hl[0],
    	      al1 = hl[1],
    	      al2 = hl[2],
    	      al3 = hl[3],
    	      al4 = hl[4],
    	      al5 = hl[5],
    	      al6 = hl[6],
    	      al7 = hl[7];

    	  var pos = 0;
    	  while (n >= 128) {
    	    for (i = 0; i < 16; i++) {
    	      j = 8 * i + pos;
    	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
    	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
    	    }
    	    for (i = 0; i < 80; i++) {
    	      bh0 = ah0;
    	      bh1 = ah1;
    	      bh2 = ah2;
    	      bh3 = ah3;
    	      bh4 = ah4;
    	      bh5 = ah5;
    	      bh6 = ah6;
    	      bh7 = ah7;

    	      bl0 = al0;
    	      bl1 = al1;
    	      bl2 = al2;
    	      bl3 = al3;
    	      bl4 = al4;
    	      bl5 = al5;
    	      bl6 = al6;
    	      bl7 = al7;

    	      // add
    	      h = ah7;
    	      l = al7;

    	      a = l & 0xffff; b = l >>> 16;
    	      c = h & 0xffff; d = h >>> 16;

    	      // Sigma1
    	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
    	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

    	      a += l & 0xffff; b += l >>> 16;
    	      c += h & 0xffff; d += h >>> 16;

    	      // Ch
    	      h = (ah4 & ah5) ^ (~ah4 & ah6);
    	      l = (al4 & al5) ^ (~al4 & al6);

    	      a += l & 0xffff; b += l >>> 16;
    	      c += h & 0xffff; d += h >>> 16;

    	      // K
    	      h = K[i*2];
    	      l = K[i*2+1];

    	      a += l & 0xffff; b += l >>> 16;
    	      c += h & 0xffff; d += h >>> 16;

    	      // w
    	      h = wh[i%16];
    	      l = wl[i%16];

    	      a += l & 0xffff; b += l >>> 16;
    	      c += h & 0xffff; d += h >>> 16;

    	      b += a >>> 16;
    	      c += b >>> 16;
    	      d += c >>> 16;

    	      th = c & 0xffff | d << 16;
    	      tl = a & 0xffff | b << 16;

    	      // add
    	      h = th;
    	      l = tl;

    	      a = l & 0xffff; b = l >>> 16;
    	      c = h & 0xffff; d = h >>> 16;

    	      // Sigma0
    	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
    	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

    	      a += l & 0xffff; b += l >>> 16;
    	      c += h & 0xffff; d += h >>> 16;

    	      // Maj
    	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
    	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

    	      a += l & 0xffff; b += l >>> 16;
    	      c += h & 0xffff; d += h >>> 16;

    	      b += a >>> 16;
    	      c += b >>> 16;
    	      d += c >>> 16;

    	      bh7 = (c & 0xffff) | (d << 16);
    	      bl7 = (a & 0xffff) | (b << 16);

    	      // add
    	      h = bh3;
    	      l = bl3;

    	      a = l & 0xffff; b = l >>> 16;
    	      c = h & 0xffff; d = h >>> 16;

    	      h = th;
    	      l = tl;

    	      a += l & 0xffff; b += l >>> 16;
    	      c += h & 0xffff; d += h >>> 16;

    	      b += a >>> 16;
    	      c += b >>> 16;
    	      d += c >>> 16;

    	      bh3 = (c & 0xffff) | (d << 16);
    	      bl3 = (a & 0xffff) | (b << 16);

    	      ah1 = bh0;
    	      ah2 = bh1;
    	      ah3 = bh2;
    	      ah4 = bh3;
    	      ah5 = bh4;
    	      ah6 = bh5;
    	      ah7 = bh6;
    	      ah0 = bh7;

    	      al1 = bl0;
    	      al2 = bl1;
    	      al3 = bl2;
    	      al4 = bl3;
    	      al5 = bl4;
    	      al6 = bl5;
    	      al7 = bl6;
    	      al0 = bl7;

    	      if (i%16 === 15) {
    	        for (j = 0; j < 16; j++) {
    	          // add
    	          h = wh[j];
    	          l = wl[j];

    	          a = l & 0xffff; b = l >>> 16;
    	          c = h & 0xffff; d = h >>> 16;

    	          h = wh[(j+9)%16];
    	          l = wl[(j+9)%16];

    	          a += l & 0xffff; b += l >>> 16;
    	          c += h & 0xffff; d += h >>> 16;

    	          // sigma0
    	          th = wh[(j+1)%16];
    	          tl = wl[(j+1)%16];
    	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
    	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

    	          a += l & 0xffff; b += l >>> 16;
    	          c += h & 0xffff; d += h >>> 16;

    	          // sigma1
    	          th = wh[(j+14)%16];
    	          tl = wl[(j+14)%16];
    	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
    	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

    	          a += l & 0xffff; b += l >>> 16;
    	          c += h & 0xffff; d += h >>> 16;

    	          b += a >>> 16;
    	          c += b >>> 16;
    	          d += c >>> 16;

    	          wh[j] = (c & 0xffff) | (d << 16);
    	          wl[j] = (a & 0xffff) | (b << 16);
    	        }
    	      }
    	    }

    	    // add
    	    h = ah0;
    	    l = al0;

    	    a = l & 0xffff; b = l >>> 16;
    	    c = h & 0xffff; d = h >>> 16;

    	    h = hh[0];
    	    l = hl[0];

    	    a += l & 0xffff; b += l >>> 16;
    	    c += h & 0xffff; d += h >>> 16;

    	    b += a >>> 16;
    	    c += b >>> 16;
    	    d += c >>> 16;

    	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
    	    hl[0] = al0 = (a & 0xffff) | (b << 16);

    	    h = ah1;
    	    l = al1;

    	    a = l & 0xffff; b = l >>> 16;
    	    c = h & 0xffff; d = h >>> 16;

    	    h = hh[1];
    	    l = hl[1];

    	    a += l & 0xffff; b += l >>> 16;
    	    c += h & 0xffff; d += h >>> 16;

    	    b += a >>> 16;
    	    c += b >>> 16;
    	    d += c >>> 16;

    	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
    	    hl[1] = al1 = (a & 0xffff) | (b << 16);

    	    h = ah2;
    	    l = al2;

    	    a = l & 0xffff; b = l >>> 16;
    	    c = h & 0xffff; d = h >>> 16;

    	    h = hh[2];
    	    l = hl[2];

    	    a += l & 0xffff; b += l >>> 16;
    	    c += h & 0xffff; d += h >>> 16;

    	    b += a >>> 16;
    	    c += b >>> 16;
    	    d += c >>> 16;

    	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
    	    hl[2] = al2 = (a & 0xffff) | (b << 16);

    	    h = ah3;
    	    l = al3;

    	    a = l & 0xffff; b = l >>> 16;
    	    c = h & 0xffff; d = h >>> 16;

    	    h = hh[3];
    	    l = hl[3];

    	    a += l & 0xffff; b += l >>> 16;
    	    c += h & 0xffff; d += h >>> 16;

    	    b += a >>> 16;
    	    c += b >>> 16;
    	    d += c >>> 16;

    	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
    	    hl[3] = al3 = (a & 0xffff) | (b << 16);

    	    h = ah4;
    	    l = al4;

    	    a = l & 0xffff; b = l >>> 16;
    	    c = h & 0xffff; d = h >>> 16;

    	    h = hh[4];
    	    l = hl[4];

    	    a += l & 0xffff; b += l >>> 16;
    	    c += h & 0xffff; d += h >>> 16;

    	    b += a >>> 16;
    	    c += b >>> 16;
    	    d += c >>> 16;

    	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
    	    hl[4] = al4 = (a & 0xffff) | (b << 16);

    	    h = ah5;
    	    l = al5;

    	    a = l & 0xffff; b = l >>> 16;
    	    c = h & 0xffff; d = h >>> 16;

    	    h = hh[5];
    	    l = hl[5];

    	    a += l & 0xffff; b += l >>> 16;
    	    c += h & 0xffff; d += h >>> 16;

    	    b += a >>> 16;
    	    c += b >>> 16;
    	    d += c >>> 16;

    	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
    	    hl[5] = al5 = (a & 0xffff) | (b << 16);

    	    h = ah6;
    	    l = al6;

    	    a = l & 0xffff; b = l >>> 16;
    	    c = h & 0xffff; d = h >>> 16;

    	    h = hh[6];
    	    l = hl[6];

    	    a += l & 0xffff; b += l >>> 16;
    	    c += h & 0xffff; d += h >>> 16;

    	    b += a >>> 16;
    	    c += b >>> 16;
    	    d += c >>> 16;

    	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
    	    hl[6] = al6 = (a & 0xffff) | (b << 16);

    	    h = ah7;
    	    l = al7;

    	    a = l & 0xffff; b = l >>> 16;
    	    c = h & 0xffff; d = h >>> 16;

    	    h = hh[7];
    	    l = hl[7];

    	    a += l & 0xffff; b += l >>> 16;
    	    c += h & 0xffff; d += h >>> 16;

    	    b += a >>> 16;
    	    c += b >>> 16;
    	    d += c >>> 16;

    	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
    	    hl[7] = al7 = (a & 0xffff) | (b << 16);

    	    pos += 128;
    	    n -= 128;
    	  }

    	  return n;
    	}

    	function crypto_hash(out, m, n) {
    	  var hh = new Int32Array(8),
    	      hl = new Int32Array(8),
    	      x = new Uint8Array(256),
    	      i, b = n;

    	  hh[0] = 0x6a09e667;
    	  hh[1] = 0xbb67ae85;
    	  hh[2] = 0x3c6ef372;
    	  hh[3] = 0xa54ff53a;
    	  hh[4] = 0x510e527f;
    	  hh[5] = 0x9b05688c;
    	  hh[6] = 0x1f83d9ab;
    	  hh[7] = 0x5be0cd19;

    	  hl[0] = 0xf3bcc908;
    	  hl[1] = 0x84caa73b;
    	  hl[2] = 0xfe94f82b;
    	  hl[3] = 0x5f1d36f1;
    	  hl[4] = 0xade682d1;
    	  hl[5] = 0x2b3e6c1f;
    	  hl[6] = 0xfb41bd6b;
    	  hl[7] = 0x137e2179;

    	  crypto_hashblocks_hl(hh, hl, m, n);
    	  n %= 128;

    	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
    	  x[n] = 128;

    	  n = 256-128*(n<112?1:0);
    	  x[n-9] = 0;
    	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
    	  crypto_hashblocks_hl(hh, hl, x, n);

    	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

    	  return 0;
    	}

    	function add(p, q) {
    	  var a = gf(), b = gf(), c = gf(),
    	      d = gf(), e = gf(), f = gf(),
    	      g = gf(), h = gf(), t = gf();

    	  Z(a, p[1], p[0]);
    	  Z(t, q[1], q[0]);
    	  M(a, a, t);
    	  A(b, p[0], p[1]);
    	  A(t, q[0], q[1]);
    	  M(b, b, t);
    	  M(c, p[3], q[3]);
    	  M(c, c, D2);
    	  M(d, p[2], q[2]);
    	  A(d, d, d);
    	  Z(e, b, a);
    	  Z(f, d, c);
    	  A(g, d, c);
    	  A(h, b, a);

    	  M(p[0], e, f);
    	  M(p[1], h, g);
    	  M(p[2], g, f);
    	  M(p[3], e, h);
    	}

    	function cswap(p, q, b) {
    	  var i;
    	  for (i = 0; i < 4; i++) {
    	    sel25519(p[i], q[i], b);
    	  }
    	}

    	function pack(r, p) {
    	  var tx = gf(), ty = gf(), zi = gf();
    	  inv25519(zi, p[2]);
    	  M(tx, p[0], zi);
    	  M(ty, p[1], zi);
    	  pack25519(r, ty);
    	  r[31] ^= par25519(tx) << 7;
    	}

    	function scalarmult(p, q, s) {
    	  var b, i;
    	  set25519(p[0], gf0);
    	  set25519(p[1], gf1);
    	  set25519(p[2], gf1);
    	  set25519(p[3], gf0);
    	  for (i = 255; i >= 0; --i) {
    	    b = (s[(i/8)|0] >> (i&7)) & 1;
    	    cswap(p, q, b);
    	    add(q, p);
    	    add(p, p);
    	    cswap(p, q, b);
    	  }
    	}

    	function scalarbase(p, s) {
    	  var q = [gf(), gf(), gf(), gf()];
    	  set25519(q[0], X);
    	  set25519(q[1], Y);
    	  set25519(q[2], gf1);
    	  M(q[3], X, Y);
    	  scalarmult(p, q, s);
    	}

    	function crypto_sign_keypair(pk, sk, seeded) {
    	  var d = new Uint8Array(64);
    	  var p = [gf(), gf(), gf(), gf()];
    	  var i;

    	  if (!seeded) randombytes(sk, 32);
    	  crypto_hash(d, sk, 32);
    	  d[0] &= 248;
    	  d[31] &= 127;
    	  d[31] |= 64;

    	  scalarbase(p, d);
    	  pack(pk, p);

    	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
    	  return 0;
    	}

    	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

    	function modL(r, x) {
    	  var carry, i, j, k;
    	  for (i = 63; i >= 32; --i) {
    	    carry = 0;
    	    for (j = i - 32, k = i - 12; j < k; ++j) {
    	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
    	      carry = Math.floor((x[j] + 128) / 256);
    	      x[j] -= carry * 256;
    	    }
    	    x[j] += carry;
    	    x[i] = 0;
    	  }
    	  carry = 0;
    	  for (j = 0; j < 32; j++) {
    	    x[j] += carry - (x[31] >> 4) * L[j];
    	    carry = x[j] >> 8;
    	    x[j] &= 255;
    	  }
    	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
    	  for (i = 0; i < 32; i++) {
    	    x[i+1] += x[i] >> 8;
    	    r[i] = x[i] & 255;
    	  }
    	}

    	function reduce(r) {
    	  var x = new Float64Array(64), i;
    	  for (i = 0; i < 64; i++) x[i] = r[i];
    	  for (i = 0; i < 64; i++) r[i] = 0;
    	  modL(r, x);
    	}

    	// Note: difference from C - smlen returned, not passed as argument.
    	function crypto_sign(sm, m, n, sk) {
    	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
    	  var i, j, x = new Float64Array(64);
    	  var p = [gf(), gf(), gf(), gf()];

    	  crypto_hash(d, sk, 32);
    	  d[0] &= 248;
    	  d[31] &= 127;
    	  d[31] |= 64;

    	  var smlen = n + 64;
    	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
    	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

    	  crypto_hash(r, sm.subarray(32), n+32);
    	  reduce(r);
    	  scalarbase(p, r);
    	  pack(sm, p);

    	  for (i = 32; i < 64; i++) sm[i] = sk[i];
    	  crypto_hash(h, sm, n + 64);
    	  reduce(h);

    	  for (i = 0; i < 64; i++) x[i] = 0;
    	  for (i = 0; i < 32; i++) x[i] = r[i];
    	  for (i = 0; i < 32; i++) {
    	    for (j = 0; j < 32; j++) {
    	      x[i+j] += h[i] * d[j];
    	    }
    	  }

    	  modL(sm.subarray(32), x);
    	  return smlen;
    	}

    	function unpackneg(r, p) {
    	  var t = gf(), chk = gf(), num = gf(),
    	      den = gf(), den2 = gf(), den4 = gf(),
    	      den6 = gf();

    	  set25519(r[2], gf1);
    	  unpack25519(r[1], p);
    	  S(num, r[1]);
    	  M(den, num, D);
    	  Z(num, num, r[2]);
    	  A(den, r[2], den);

    	  S(den2, den);
    	  S(den4, den2);
    	  M(den6, den4, den2);
    	  M(t, den6, num);
    	  M(t, t, den);

    	  pow2523(t, t);
    	  M(t, t, num);
    	  M(t, t, den);
    	  M(t, t, den);
    	  M(r[0], t, den);

    	  S(chk, r[0]);
    	  M(chk, chk, den);
    	  if (neq25519(chk, num)) M(r[0], r[0], I);

    	  S(chk, r[0]);
    	  M(chk, chk, den);
    	  if (neq25519(chk, num)) return -1;

    	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

    	  M(r[3], r[0], r[1]);
    	  return 0;
    	}

    	function crypto_sign_open(m, sm, n, pk) {
    	  var i;
    	  var t = new Uint8Array(32), h = new Uint8Array(64);
    	  var p = [gf(), gf(), gf(), gf()],
    	      q = [gf(), gf(), gf(), gf()];

    	  if (n < 64) return -1;

    	  if (unpackneg(q, pk)) return -1;

    	  for (i = 0; i < n; i++) m[i] = sm[i];
    	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
    	  crypto_hash(h, m, n);
    	  reduce(h);
    	  scalarmult(p, q, h);

    	  scalarbase(q, sm.subarray(32));
    	  add(p, q);
    	  pack(t, p);

    	  n -= 64;
    	  if (crypto_verify_32(sm, 0, t, 0)) {
    	    for (i = 0; i < n; i++) m[i] = 0;
    	    return -1;
    	  }

    	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
    	  return n;
    	}

    	var crypto_secretbox_KEYBYTES = 32,
    	    crypto_secretbox_NONCEBYTES = 24,
    	    crypto_secretbox_ZEROBYTES = 32,
    	    crypto_secretbox_BOXZEROBYTES = 16,
    	    crypto_scalarmult_BYTES = 32,
    	    crypto_scalarmult_SCALARBYTES = 32,
    	    crypto_box_PUBLICKEYBYTES = 32,
    	    crypto_box_SECRETKEYBYTES = 32,
    	    crypto_box_BEFORENMBYTES = 32,
    	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
    	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
    	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
    	    crypto_sign_BYTES = 64,
    	    crypto_sign_PUBLICKEYBYTES = 32,
    	    crypto_sign_SECRETKEYBYTES = 64,
    	    crypto_sign_SEEDBYTES = 32,
    	    crypto_hash_BYTES = 64;

    	nacl.lowlevel = {
    	  crypto_core_hsalsa20: crypto_core_hsalsa20,
    	  crypto_stream_xor: crypto_stream_xor,
    	  crypto_stream: crypto_stream,
    	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
    	  crypto_stream_salsa20: crypto_stream_salsa20,
    	  crypto_onetimeauth: crypto_onetimeauth,
    	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
    	  crypto_verify_16: crypto_verify_16,
    	  crypto_verify_32: crypto_verify_32,
    	  crypto_secretbox: crypto_secretbox,
    	  crypto_secretbox_open: crypto_secretbox_open,
    	  crypto_scalarmult: crypto_scalarmult,
    	  crypto_scalarmult_base: crypto_scalarmult_base,
    	  crypto_box_beforenm: crypto_box_beforenm,
    	  crypto_box_afternm: crypto_box_afternm,
    	  crypto_box: crypto_box,
    	  crypto_box_open: crypto_box_open,
    	  crypto_box_keypair: crypto_box_keypair,
    	  crypto_hash: crypto_hash,
    	  crypto_sign: crypto_sign,
    	  crypto_sign_keypair: crypto_sign_keypair,
    	  crypto_sign_open: crypto_sign_open,

    	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
    	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
    	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
    	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
    	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
    	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
    	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
    	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
    	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
    	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
    	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
    	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
    	  crypto_sign_BYTES: crypto_sign_BYTES,
    	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
    	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
    	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
    	  crypto_hash_BYTES: crypto_hash_BYTES,

    	  gf: gf,
    	  D: D,
    	  L: L,
    	  pack25519: pack25519,
    	  unpack25519: unpack25519,
    	  M: M,
    	  A: A,
    	  S: S,
    	  Z: Z,
    	  pow2523: pow2523,
    	  add: add,
    	  set25519: set25519,
    	  modL: modL,
    	  scalarmult: scalarmult,
    	  scalarbase: scalarbase,
    	};

    	/* High-level API */

    	function checkLengths(k, n) {
    	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
    	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
    	}

    	function checkBoxLengths(pk, sk) {
    	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
    	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    	}

    	function checkArrayTypes() {
    	  for (var i = 0; i < arguments.length; i++) {
    	    if (!(arguments[i] instanceof Uint8Array))
    	      throw new TypeError('unexpected type, use Uint8Array');
    	  }
    	}

    	function cleanup(arr) {
    	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
    	}

    	nacl.randomBytes = function(n) {
    	  var b = new Uint8Array(n);
    	  randombytes(b, n);
    	  return b;
    	};

    	nacl.secretbox = function(msg, nonce, key) {
    	  checkArrayTypes(msg, nonce, key);
    	  checkLengths(key, nonce);
    	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
    	  var c = new Uint8Array(m.length);
    	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
    	  crypto_secretbox(c, m, m.length, nonce, key);
    	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
    	};

    	nacl.secretbox.open = function(box, nonce, key) {
    	  checkArrayTypes(box, nonce, key);
    	  checkLengths(key, nonce);
    	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
    	  var m = new Uint8Array(c.length);
    	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
    	  if (c.length < 32) return null;
    	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
    	  return m.subarray(crypto_secretbox_ZEROBYTES);
    	};

    	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

    	nacl.scalarMult = function(n, p) {
    	  checkArrayTypes(n, p);
    	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
    	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
    	  var q = new Uint8Array(crypto_scalarmult_BYTES);
    	  crypto_scalarmult(q, n, p);
    	  return q;
    	};

    	nacl.scalarMult.base = function(n) {
    	  checkArrayTypes(n);
    	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
    	  var q = new Uint8Array(crypto_scalarmult_BYTES);
    	  crypto_scalarmult_base(q, n);
    	  return q;
    	};

    	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

    	nacl.box = function(msg, nonce, publicKey, secretKey) {
    	  var k = nacl.box.before(publicKey, secretKey);
    	  return nacl.secretbox(msg, nonce, k);
    	};

    	nacl.box.before = function(publicKey, secretKey) {
    	  checkArrayTypes(publicKey, secretKey);
    	  checkBoxLengths(publicKey, secretKey);
    	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
    	  crypto_box_beforenm(k, publicKey, secretKey);
    	  return k;
    	};

    	nacl.box.after = nacl.secretbox;

    	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
    	  var k = nacl.box.before(publicKey, secretKey);
    	  return nacl.secretbox.open(msg, nonce, k);
    	};

    	nacl.box.open.after = nacl.secretbox.open;

    	nacl.box.keyPair = function() {
    	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
    	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
    	  crypto_box_keypair(pk, sk);
    	  return {publicKey: pk, secretKey: sk};
    	};

    	nacl.box.keyPair.fromSecretKey = function(secretKey) {
    	  checkArrayTypes(secretKey);
    	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
    	    throw new Error('bad secret key size');
    	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
    	  crypto_scalarmult_base(pk, secretKey);
    	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    	};

    	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    	nacl.box.nonceLength = crypto_box_NONCEBYTES;
    	nacl.box.overheadLength = nacl.secretbox.overheadLength;

    	nacl.sign = function(msg, secretKey) {
    	  checkArrayTypes(msg, secretKey);
    	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    	    throw new Error('bad secret key size');
    	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
    	  crypto_sign(signedMsg, msg, msg.length, secretKey);
    	  return signedMsg;
    	};

    	nacl.sign.open = function(signedMsg, publicKey) {
    	  checkArrayTypes(signedMsg, publicKey);
    	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    	    throw new Error('bad public key size');
    	  var tmp = new Uint8Array(signedMsg.length);
    	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
    	  if (mlen < 0) return null;
    	  var m = new Uint8Array(mlen);
    	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
    	  return m;
    	};

    	nacl.sign.detached = function(msg, secretKey) {
    	  var signedMsg = nacl.sign(msg, secretKey);
    	  var sig = new Uint8Array(crypto_sign_BYTES);
    	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
    	  return sig;
    	};

    	nacl.sign.detached.verify = function(msg, sig, publicKey) {
    	  checkArrayTypes(msg, sig, publicKey);
    	  if (sig.length !== crypto_sign_BYTES)
    	    throw new Error('bad signature size');
    	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    	    throw new Error('bad public key size');
    	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
    	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
    	  var i;
    	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
    	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
    	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
    	};

    	nacl.sign.keyPair = function() {
    	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
    	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
    	  crypto_sign_keypair(pk, sk);
    	  return {publicKey: pk, secretKey: sk};
    	};

    	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
    	  checkArrayTypes(secretKey);
    	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    	    throw new Error('bad secret key size');
    	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
    	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
    	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    	};

    	nacl.sign.keyPair.fromSeed = function(seed) {
    	  checkArrayTypes(seed);
    	  if (seed.length !== crypto_sign_SEEDBYTES)
    	    throw new Error('bad seed size');
    	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
    	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
    	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
    	  crypto_sign_keypair(pk, sk, true);
    	  return {publicKey: pk, secretKey: sk};
    	};

    	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    	nacl.sign.signatureLength = crypto_sign_BYTES;

    	nacl.hash = function(msg) {
    	  checkArrayTypes(msg);
    	  var h = new Uint8Array(crypto_hash_BYTES);
    	  crypto_hash(h, msg, msg.length);
    	  return h;
    	};

    	nacl.hash.hashLength = crypto_hash_BYTES;

    	nacl.verify = function(x, y) {
    	  checkArrayTypes(x, y);
    	  // Zero length arguments are considered not equal.
    	  if (x.length === 0 || y.length === 0) return false;
    	  if (x.length !== y.length) return false;
    	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
    	};

    	nacl.setPRNG = function(fn) {
    	  randombytes = fn;
    	};

    	(function() {
    	  // Initialize PRNG if environment provides CSPRNG.
    	  // If not, methods calling randombytes will throw.
    	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
    	  if (crypto && crypto.getRandomValues) {
    	    // Browsers.
    	    var QUOTA = 65536;
    	    nacl.setPRNG(function(x, n) {
    	      var i, v = new Uint8Array(n);
    	      for (i = 0; i < n; i += QUOTA) {
    	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
    	      }
    	      for (i = 0; i < n; i++) x[i] = v[i];
    	      cleanup(v);
    	    });
    	  } else if (typeof commonjsRequire !== 'undefined') {
    	    // Node.js.
    	    crypto = require$$0;
    	    if (crypto && crypto.randomBytes) {
    	      nacl.setPRNG(function(x, n) {
    	        var i, v = crypto.randomBytes(n);
    	        for (i = 0; i < n; i++) x[i] = v[i];
    	        cleanup(v);
    	      });
    	    }
    	  }
    	})();

    	})(module.exports ? module.exports : (self.nacl = self.nacl || {})); 
    } (naclFast));

    var naclFastExports = naclFast.exports;

    /**
     * Return an array buffer from its hexadecimal representation.
     * @param hexString The hexadecimal string.
     */
    function fromHexString(hexString) {
        var _a;
        return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16))).buffer;
    }
    /**
     * Returns an hexadecimal representation of an array buffer.
     * @param bytes The array buffer.
     */
    function toHexString(bytes) {
        return new Uint8Array(bytes).reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');
    }

    const bufEquals = (b1, b2) => {
        if (b1.byteLength !== b2.byteLength)
            return false;
        const u1 = new Uint8Array(b1);
        const u2 = new Uint8Array(b2);
        for (let i = 0; i < u1.length; i++) {
            if (u1[i] !== u2[i])
                return false;
        }
        return true;
    };
    const encodeLenBytes = (len) => {
        if (len <= 0x7f) {
            return 1;
        }
        else if (len <= 0xff) {
            return 2;
        }
        else if (len <= 0xffff) {
            return 3;
        }
        else if (len <= 0xffffff) {
            return 4;
        }
        else {
            throw new Error('Length too long (> 4 bytes)');
        }
    };
    const encodeLen = (buf, offset, len) => {
        if (len <= 0x7f) {
            buf[offset] = len;
            return 1;
        }
        else if (len <= 0xff) {
            buf[offset] = 0x81;
            buf[offset + 1] = len;
            return 2;
        }
        else if (len <= 0xffff) {
            buf[offset] = 0x82;
            buf[offset + 1] = len >> 8;
            buf[offset + 2] = len;
            return 3;
        }
        else if (len <= 0xffffff) {
            buf[offset] = 0x83;
            buf[offset + 1] = len >> 16;
            buf[offset + 2] = len >> 8;
            buf[offset + 3] = len;
            return 4;
        }
        else {
            throw new Error('Length too long (> 4 bytes)');
        }
    };
    const decodeLenBytes = (buf, offset) => {
        if (buf[offset] < 0x80)
            return 1;
        if (buf[offset] === 0x80)
            throw new Error('Invalid length 0');
        if (buf[offset] === 0x81)
            return 2;
        if (buf[offset] === 0x82)
            return 3;
        if (buf[offset] === 0x83)
            return 4;
        throw new Error('Length too long (> 4 bytes)');
    };
    const decodeLen = (buf, offset) => {
        const lenBytes = decodeLenBytes(buf, offset);
        if (lenBytes === 1)
            return buf[offset];
        else if (lenBytes === 2)
            return buf[offset + 1];
        else if (lenBytes === 3)
            return (buf[offset + 1] << 8) + buf[offset + 2];
        else if (lenBytes === 4)
            return (buf[offset + 1] << 16) + (buf[offset + 2] << 8) + buf[offset + 3];
        throw new Error('Length too long (> 4 bytes)');
    };
    /**
     * A DER encoded `SEQUENCE(OID)` for DER-encoded-COSE
     */
    Uint8Array.from([
        ...[0x30, 0x0c],
        ...[0x06, 0x0a],
        ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0xb8, 0x43, 0x01, 0x01], // DER encoded COSE
    ]);
    /**
     * A DER encoded `SEQUENCE(OID)` for the Ed25519 algorithm
     */
    const ED25519_OID = Uint8Array.from([
        ...[0x30, 0x05],
        ...[0x06, 0x03],
        ...[0x2b, 0x65, 0x70], // id-Ed25519 OID
    ]);
    /**
     * A DER encoded `SEQUENCE(OID)` for secp256k1 with the ECDSA algorithm
     */
    Uint8Array.from([
        ...[0x30, 0x10],
        ...[0x06, 0x07],
        ...[0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01],
        ...[0x06, 0x05],
        ...[0x2b, 0x81, 0x04, 0x00, 0x0a], // OID secp256k1
    ]);
    /**
     * Wraps the given `payload` in a DER encoding tagged with the given encoded `oid` like so:
     * `SEQUENCE(oid, BITSTRING(payload))`
     *
     * @param payload The payload to encode as the bit string
     * @param oid The DER encoded (and SEQUENCE wrapped!) OID to tag the payload with
     */
    function wrapDER(payload, oid) {
        // The Bit String header needs to include the unused bit count byte in its length
        const bitStringHeaderLength = 2 + encodeLenBytes(payload.byteLength + 1);
        const len = oid.byteLength + bitStringHeaderLength + payload.byteLength;
        let offset = 0;
        const buf = new Uint8Array(1 + encodeLenBytes(len) + len);
        // Sequence
        buf[offset++] = 0x30;
        // Sequence Length
        offset += encodeLen(buf, offset, len);
        // OID
        buf.set(oid, offset);
        offset += oid.byteLength;
        // Bit String Header
        buf[offset++] = 0x03;
        offset += encodeLen(buf, offset, payload.byteLength + 1);
        // 0 padding
        buf[offset++] = 0x00;
        buf.set(new Uint8Array(payload), offset);
        return buf;
    }
    /**
     * Extracts a payload from the given `derEncoded` data, and checks that it was tagged with the given `oid`.
     *
     * `derEncoded = SEQUENCE(oid, BITSTRING(payload))`
     *
     * @param derEncoded The DER encoded and tagged data
     * @param oid The DER encoded (and SEQUENCE wrapped!) expected OID
     * @returns The unwrapped payload
     */
    const unwrapDER = (derEncoded, oid) => {
        let offset = 0;
        const expect = (n, msg) => {
            if (buf[offset++] !== n) {
                throw new Error('Expected: ' + msg);
            }
        };
        const buf = new Uint8Array(derEncoded);
        expect(0x30, 'sequence');
        offset += decodeLenBytes(buf, offset);
        if (!bufEquals(buf.slice(offset, offset + oid.byteLength), oid)) {
            throw new Error('Not the expected OID.');
        }
        offset += oid.byteLength;
        expect(0x03, 'bit string');
        const payloadLen = decodeLen(buf, offset) - 1; // Subtracting 1 to account for the 0 padding
        offset += decodeLenBytes(buf, offset);
        expect(0x00, '0 padding');
        const result = buf.slice(offset);
        if (payloadLen !== result.length) {
            throw new Error(`DER payload mismatch: Expected length ${payloadLen} actual length ${result.length}`);
        }
        return result;
    };

    class Ed25519PublicKey {
        // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.
        constructor(key) {
            this.rawKey = key;
            this.derKey = Ed25519PublicKey.derEncode(key);
        }
        static from(key) {
            return this.fromDer(key.toDer());
        }
        static fromRaw(rawKey) {
            return new Ed25519PublicKey(rawKey);
        }
        static fromDer(derKey) {
            return new Ed25519PublicKey(this.derDecode(derKey));
        }
        static derEncode(publicKey) {
            return wrapDER(publicKey, ED25519_OID).buffer;
        }
        static derDecode(key) {
            const unwrapped = unwrapDER(key, ED25519_OID);
            if (unwrapped.length !== this.RAW_KEY_LENGTH) {
                throw new Error('An Ed25519 public key must be exactly 32bytes long');
            }
            return unwrapped;
        }
        toDer() {
            return this.derKey;
        }
        toRaw() {
            return this.rawKey;
        }
    }
    // The length of Ed25519 public keys is always 32 bytes.
    Ed25519PublicKey.RAW_KEY_LENGTH = 32;
    class Ed25519KeyIdentity extends SignIdentity {
        // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.
        constructor(publicKey, _privateKey) {
            super();
            this._privateKey = _privateKey;
            this._publicKey = Ed25519PublicKey.from(publicKey);
        }
        static generate(seed) {
            if (seed && seed.length !== 32) {
                throw new Error('Ed25519 Seed needs to be 32 bytes long.');
            }
            const { publicKey, secretKey } = seed === undefined ? naclFastExports.sign.keyPair() : naclFastExports.sign.keyPair.fromSeed(seed);
            return new this(Ed25519PublicKey.fromRaw(publicKey), secretKey);
        }
        static fromParsedJson(obj) {
            const [publicKeyDer, privateKeyRaw] = obj;
            return new Ed25519KeyIdentity(Ed25519PublicKey.fromDer(fromHexString(publicKeyDer)), fromHexString(privateKeyRaw));
        }
        static fromJSON(json) {
            const parsed = JSON.parse(json);
            if (Array.isArray(parsed)) {
                if (typeof parsed[0] === 'string' && typeof parsed[1] === 'string') {
                    return this.fromParsedJson([parsed[0], parsed[1]]);
                }
                else {
                    throw new Error('Deserialization error: JSON must have at least 2 items.');
                }
            }
            throw new Error(`Deserialization error: Invalid JSON type for string: ${JSON.stringify(json)}`);
        }
        static fromKeyPair(publicKey, privateKey) {
            return new Ed25519KeyIdentity(Ed25519PublicKey.fromRaw(publicKey), privateKey);
        }
        static fromSecretKey(secretKey) {
            const keyPair = naclFastExports.sign.keyPair.fromSecretKey(new Uint8Array(secretKey));
            return Ed25519KeyIdentity.fromKeyPair(keyPair.publicKey, keyPair.secretKey);
        }
        /**
         * Serialize this key to JSON.
         */
        toJSON() {
            return [toHexString(this._publicKey.toDer()), toHexString(this._privateKey)];
        }
        /**
         * Return a copy of the key pair.
         */
        getKeyPair() {
            return {
                secretKey: this._privateKey,
                publicKey: this._publicKey,
            };
        }
        /**
         * Return the public key.
         */
        getPublicKey() {
            return this._publicKey;
        }
        /**
         * Signs a blob of data, with this identity's private key.
         * @param challenge - challenge to sign with this identity's secretKey, producing a signature
         */
        async sign(challenge) {
            const blob = new Uint8Array(challenge);
            const signature = naclFastExports.sign.detached(blob, new Uint8Array(this._privateKey)).buffer;
            return signature;
        }
    }

    var __rest = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    const domainSeparator = new TextEncoder().encode('\x1Aic-request-auth-delegation');
    const requestDomainSeparator = new TextEncoder().encode('\x0Aic-request');
    function _parseBlob(value) {
        if (typeof value !== 'string' || value.length < 64) {
            throw new Error('Invalid public key.');
        }
        return fromHexString(value);
    }
    /**
     * A single delegation object that is signed by a private key. This is constructed by
     * `DelegationChain.create()`.
     *
     * {@see DelegationChain}
     */
    class Delegation {
        constructor(pubkey, expiration, targets) {
            this.pubkey = pubkey;
            this.expiration = expiration;
            this.targets = targets;
        }
        toCBOR() {
            // Expiration field needs to be encoded as a u64 specifically.
            return src.value.map(Object.assign({ pubkey: src.value.bytes(this.pubkey), expiration: src.value.u64(this.expiration.toString(16), 16) }, (this.targets && {
                targets: src.value.array(this.targets.map(t => src.value.bytes(t.toUint8Array()))),
            })));
        }
        toJSON() {
            // every string should be hex and once-de-hexed,
            // discoverable what it is (e.g. de-hex to get JSON with a 'type' property, or de-hex to DER
            // with an OID). After de-hex, if it's not obvious what it is, it's an ArrayBuffer.
            return Object.assign({ expiration: this.expiration.toString(16), pubkey: toHexString(this.pubkey) }, (this.targets && { targets: this.targets.map(p => p.toHex()) }));
        }
    }
    /**
     * Sign a single delegation object for a period of time.
     *
     * @param from The identity that lends its delegation.
     * @param to The identity that receives the delegation.
     * @param expiration An expiration date for this delegation.
     * @param targets Limit this delegation to the target principals.
     */
    async function _createSingleDelegation(from, to, expiration, targets) {
        const delegation = new Delegation(to.toDer(), BigInt(+expiration) * BigInt(1000000), // In nanoseconds.
        targets);
        // The signature is calculated by signing the concatenation of the domain separator
        // and the message.
        // Note: To ensure Safari treats this as a user gesture, ensure to not use async methods
        // besides the actualy webauthn functionality (such as `sign`). Safari will de-register
        // a user gesture if you await an async call thats not fetch, xhr, or setTimeout.
        const challenge = new Uint8Array([
            ...domainSeparator,
            ...new Uint8Array(requestIdOf(delegation)),
        ]);
        const signature = await from.sign(challenge);
        return {
            delegation,
            signature,
        };
    }
    /**
     * A chain of delegations. This is JSON Serializable.
     * This is the object to serialize and pass to a DelegationIdentity. It does not keep any
     * private keys.
     */
    class DelegationChain {
        constructor(delegations, publicKey) {
            this.delegations = delegations;
            this.publicKey = publicKey;
        }
        /**
         * Create a delegation chain between two (or more) keys. By default, the expiration time
         * will be very short (15 minutes).
         *
         * To build a chain of more than 2 identities, this function needs to be called multiple times,
         * passing the previous delegation chain into the options argument. For example:
         *
         * @example
         * const rootKey = createKey();
         * const middleKey = createKey();
         * const bottomeKey = createKey();
         *
         * const rootToMiddle = await DelegationChain.create(
         *   root, middle.getPublicKey(), Date.parse('2100-01-01'),
         * );
         * const middleToBottom = await DelegationChain.create(
         *   middle, bottom.getPublicKey(), Date.parse('2100-01-01'), { previous: rootToMiddle },
         * );
         *
         * // We can now use a delegation identity that uses the delegation above:
         * const identity = DelegationIdentity.fromDelegation(bottomKey, middleToBottom);
         *
         * @param from The identity that will delegate.
         * @param to The identity that gets delegated. It can now sign messages as if it was the
         *           identity above.
         * @param expiration The length the delegation is valid. By default, 15 minutes from calling
         *                   this function.
         * @param options A set of options for this delegation. expiration and previous
         * @param options.previous - Another DelegationChain that this chain should start with.
         * @param options.targets - targets that scope the delegation (e.g. Canister Principals)
         */
        static async create(from, to, expiration = new Date(Date.now() + 15 * 60 * 1000), options = {}) {
            var _a, _b;
            const delegation = await _createSingleDelegation(from, to, expiration, options.targets);
            return new DelegationChain([...(((_a = options.previous) === null || _a === void 0 ? void 0 : _a.delegations) || []), delegation], ((_b = options.previous) === null || _b === void 0 ? void 0 : _b.publicKey) || from.getPublicKey().toDer());
        }
        /**
         * Creates a DelegationChain object from a JSON string.
         *
         * @param json The JSON string to parse.
         */
        static fromJSON(json) {
            const { publicKey, delegations } = typeof json === 'string' ? JSON.parse(json) : json;
            if (!Array.isArray(delegations)) {
                throw new Error('Invalid delegations.');
            }
            const parsedDelegations = delegations.map(signedDelegation => {
                const { delegation, signature } = signedDelegation;
                const { pubkey, expiration, targets } = delegation;
                if (targets !== undefined && !Array.isArray(targets)) {
                    throw new Error('Invalid targets.');
                }
                return {
                    delegation: new Delegation(_parseBlob(pubkey), BigInt(`0x${expiration}`), // expiration in JSON is an hexa string (See toJSON() below).
                    targets &&
                        targets.map((t) => {
                            if (typeof t !== 'string') {
                                throw new Error('Invalid target.');
                            }
                            return Principal$1.fromHex(t);
                        })),
                    signature: _parseBlob(signature),
                };
            });
            return new this(parsedDelegations, _parseBlob(publicKey));
        }
        /**
         * Creates a DelegationChain object from a list of delegations and a DER-encoded public key.
         *
         * @param delegations The list of delegations.
         * @param publicKey The DER-encoded public key of the key-pair signing the first delegation.
         */
        static fromDelegations(delegations, publicKey) {
            return new this(delegations, publicKey);
        }
        toJSON() {
            return {
                delegations: this.delegations.map(signedDelegation => {
                    const { delegation, signature } = signedDelegation;
                    const { targets } = delegation;
                    return {
                        delegation: Object.assign({ expiration: delegation.expiration.toString(16), pubkey: toHexString(delegation.pubkey) }, (targets && {
                            targets: targets.map(t => t.toHex()),
                        })),
                        signature: toHexString(signature),
                    };
                }),
                publicKey: toHexString(this.publicKey),
            };
        }
    }
    /**
     * An Identity that adds delegation to a request. Everywhere in this class, the name
     * innerKey refers to the SignIdentity that is being used to sign the requests, while
     * originalKey is the identity that is being borrowed. More identities can be used
     * in the middle to delegate.
     */
    class DelegationIdentity extends SignIdentity {
        constructor(_inner, _delegation) {
            super();
            this._inner = _inner;
            this._delegation = _delegation;
        }
        /**
         * Create a delegation without having access to delegateKey.
         *
         * @param key The key used to sign the reqyests.
         * @param delegation A delegation object created using `createDelegation`.
         */
        static fromDelegation(key, delegation) {
            return new this(key, delegation);
        }
        getDelegation() {
            return this._delegation;
        }
        getPublicKey() {
            return {
                toDer: () => this._delegation.publicKey,
            };
        }
        sign(blob) {
            return this._inner.sign(blob);
        }
        async transformRequest(request) {
            const { body } = request, fields = __rest(request, ["body"]);
            const requestId = await requestIdOf(body);
            return Object.assign(Object.assign({}, fields), { body: {
                    content: body,
                    sender_sig: await this.sign(new Uint8Array([...requestDomainSeparator, ...new Uint8Array(requestId)])),
                    sender_delegation: this._delegation.delegations,
                    sender_pubkey: this._delegation.publicKey,
                } });
        }
    }
    /**
     * Analyze a DelegationChain and validate that it's valid, ie. not expired and apply to the
     * scope.
     * @param chain The chain to validate.
     * @param checks Various checks to validate on the chain.
     */
    function isDelegationValid(chain, checks) {
        // Verify that the no delegation is expired. If any are in the chain, returns false.
        for (const { delegation } of chain.delegations) {
            // prettier-ignore
            if (+new Date(Number(delegation.expiration / BigInt(1000000))) <= +Date.now()) {
                return false;
            }
        }
        // Check the scopes.
        const scopes = [];
        const maybeScope = checks === null || checks === void 0 ? void 0 : checks.scope;
        if (maybeScope) {
            if (Array.isArray(maybeScope)) {
                scopes.push(...maybeScope.map(s => (typeof s === 'string' ? Principal$1.fromText(s) : s)));
            }
            else {
                scopes.push(typeof maybeScope === 'string' ? Principal$1.fromText(maybeScope) : maybeScope);
            }
        }
        for (const s of scopes) {
            const scope = s.toText();
            for (const { delegation } of chain.delegations) {
                if (delegation.targets === undefined) {
                    continue;
                }
                let none = true;
                for (const target of delegation.targets) {
                    if (target.toText() === scope) {
                        none = false;
                        break;
                    }
                }
                if (none) {
                    return false;
                }
            }
        }
        return true;
    }

    // See https://www.iana.org/assignments/cose/cose.xhtml#algorithms for a complete
    // list of these algorithms. We only list the ones we support here.
    var PubKeyCoseAlgo;
    (function (PubKeyCoseAlgo) {
        PubKeyCoseAlgo[PubKeyCoseAlgo["ECDSA_WITH_SHA256"] = -7] = "ECDSA_WITH_SHA256";
    })(PubKeyCoseAlgo || (PubKeyCoseAlgo = {}));

    const events = ['mousedown', 'mousemove', 'keydown', 'touchstart', 'wheel'];
    /**
     * Detects if the user has been idle for a duration of `idleTimeout` ms, and calls `onIdle` and registered callbacks.
     * By default, the IdleManager will log a user out after 10 minutes of inactivity.
     * To override these defaults, you can pass an `onIdle` callback, or configure a custom `idleTimeout` in milliseconds
     */
    class IdleManager {
        /**
         * @protected
         * @param options {@link IdleManagerOptions}
         */
        constructor(options = {}) {
            var _a;
            this.callbacks = [];
            this.idleTimeout = 10 * 60 * 1000;
            this.timeoutID = undefined;
            const { onIdle, idleTimeout = 10 * 60 * 1000 } = options || {};
            this.callbacks = onIdle ? [onIdle] : [];
            this.idleTimeout = idleTimeout;
            const _resetTimer = this._resetTimer.bind(this);
            window.addEventListener('load', _resetTimer, true);
            events.forEach(function (name) {
                document.addEventListener(name, _resetTimer, true);
            });
            // eslint-disable-next-line @typescript-eslint/ban-types
            const debounce = (func, wait) => {
                let timeout;
                return (...args) => {
                    // eslint-disable-next-line @typescript-eslint/no-this-alias
                    const context = this;
                    const later = function () {
                        timeout = undefined;
                        func.apply(context, args);
                    };
                    clearTimeout(timeout);
                    timeout = window.setTimeout(later, wait);
                };
            };
            if (options === null || options === void 0 ? void 0 : options.captureScroll) {
                // debounce scroll events
                const scroll = debounce(_resetTimer, (_a = options === null || options === void 0 ? void 0 : options.scrollDebounce) !== null && _a !== void 0 ? _a : 100);
                window.addEventListener('scroll', scroll, true);
            }
            _resetTimer();
        }
        /**
         * Creates an {@link IdleManager}
         * @param {IdleManagerOptions} options Optional configuration
         * @see {@link IdleManagerOptions}
         * @param options.onIdle Callback once user has been idle. Use to prompt for fresh login, and use `Actor.agentOf(your_actor).invalidateIdentity()` to protect the user
         * @param options.idleTimeout timeout in ms
         * @param options.captureScroll capture scroll events
         * @param options.scrollDebounce scroll debounce time in ms
         */
        static create(options = {}) {
            return new this(options);
        }
        /**
         * @param {IdleCB} callback function to be called when user goes idle
         */
        registerCallback(callback) {
            this.callbacks.push(callback);
        }
        /**
         * Cleans up the idle manager and its listeners
         */
        exit() {
            clearTimeout(this.timeoutID);
            window.removeEventListener('load', this._resetTimer, true);
            const _resetTimer = this._resetTimer.bind(this);
            events.forEach(function (name) {
                document.removeEventListener(name, _resetTimer, true);
            });
            this.callbacks.forEach(cb => cb());
        }
        /**
         * Resets the timeouts during cleanup
         */
        _resetTimer() {
            const exit = this.exit.bind(this);
            window.clearTimeout(this.timeoutID);
            this.timeoutID = window.setTimeout(exit, this.idleTimeout);
        }
    }

    const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

    let idbProxyableTypes;
    let cursorAdvanceMethods;
    // This is a function to prevent it throwing up in node environments.
    function getIdbProxyableTypes() {
        return (idbProxyableTypes ||
            (idbProxyableTypes = [
                IDBDatabase,
                IDBObjectStore,
                IDBIndex,
                IDBCursor,
                IDBTransaction,
            ]));
    }
    // This is a function to prevent it throwing up in node environments.
    function getCursorAdvanceMethods() {
        return (cursorAdvanceMethods ||
            (cursorAdvanceMethods = [
                IDBCursor.prototype.advance,
                IDBCursor.prototype.continue,
                IDBCursor.prototype.continuePrimaryKey,
            ]));
    }
    const cursorRequestMap = new WeakMap();
    const transactionDoneMap = new WeakMap();
    const transactionStoreNamesMap = new WeakMap();
    const transformCache = new WeakMap();
    const reverseTransformCache = new WeakMap();
    function promisifyRequest$1(request) {
        const promise = new Promise((resolve, reject) => {
            const unlisten = () => {
                request.removeEventListener('success', success);
                request.removeEventListener('error', error);
            };
            const success = () => {
                resolve(wrap(request.result));
                unlisten();
            };
            const error = () => {
                reject(request.error);
                unlisten();
            };
            request.addEventListener('success', success);
            request.addEventListener('error', error);
        });
        promise
            .then((value) => {
            // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
            // (see wrapFunction).
            if (value instanceof IDBCursor) {
                cursorRequestMap.set(value, request);
            }
            // Catching to avoid "Uncaught Promise exceptions"
        })
            .catch(() => { });
        // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
        // is because we create many promises from a single IDBRequest.
        reverseTransformCache.set(promise, request);
        return promise;
    }
    function cacheDonePromiseForTransaction(tx) {
        // Early bail if we've already created a done promise for this transaction.
        if (transactionDoneMap.has(tx))
            return;
        const done = new Promise((resolve, reject) => {
            const unlisten = () => {
                tx.removeEventListener('complete', complete);
                tx.removeEventListener('error', error);
                tx.removeEventListener('abort', error);
            };
            const complete = () => {
                resolve();
                unlisten();
            };
            const error = () => {
                reject(tx.error || new DOMException('AbortError', 'AbortError'));
                unlisten();
            };
            tx.addEventListener('complete', complete);
            tx.addEventListener('error', error);
            tx.addEventListener('abort', error);
        });
        // Cache it for later retrieval.
        transactionDoneMap.set(tx, done);
    }
    let idbProxyTraps = {
        get(target, prop, receiver) {
            if (target instanceof IDBTransaction) {
                // Special handling for transaction.done.
                if (prop === 'done')
                    return transactionDoneMap.get(target);
                // Polyfill for objectStoreNames because of Edge.
                if (prop === 'objectStoreNames') {
                    return target.objectStoreNames || transactionStoreNamesMap.get(target);
                }
                // Make tx.store return the only store in the transaction, or undefined if there are many.
                if (prop === 'store') {
                    return receiver.objectStoreNames[1]
                        ? undefined
                        : receiver.objectStore(receiver.objectStoreNames[0]);
                }
            }
            // Else transform whatever we get back.
            return wrap(target[prop]);
        },
        set(target, prop, value) {
            target[prop] = value;
            return true;
        },
        has(target, prop) {
            if (target instanceof IDBTransaction &&
                (prop === 'done' || prop === 'store')) {
                return true;
            }
            return prop in target;
        },
    };
    function replaceTraps(callback) {
        idbProxyTraps = callback(idbProxyTraps);
    }
    function wrapFunction(func) {
        // Due to expected object equality (which is enforced by the caching in `wrap`), we
        // only create one new func per func.
        // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
        if (func === IDBDatabase.prototype.transaction &&
            !('objectStoreNames' in IDBTransaction.prototype)) {
            return function (storeNames, ...args) {
                const tx = func.call(unwrap(this), storeNames, ...args);
                transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
                return wrap(tx);
            };
        }
        // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
        // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
        // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
        // with real promises, so each advance methods returns a new promise for the cursor object, or
        // undefined if the end of the cursor has been reached.
        if (getCursorAdvanceMethods().includes(func)) {
            return function (...args) {
                // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
                // the original object.
                func.apply(unwrap(this), args);
                return wrap(cursorRequestMap.get(this));
            };
        }
        return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            return wrap(func.apply(unwrap(this), args));
        };
    }
    function transformCachableValue(value) {
        if (typeof value === 'function')
            return wrapFunction(value);
        // This doesn't return, it just creates a 'done' promise for the transaction,
        // which is later returned for transaction.done (see idbObjectHandler).
        if (value instanceof IDBTransaction)
            cacheDonePromiseForTransaction(value);
        if (instanceOfAny(value, getIdbProxyableTypes()))
            return new Proxy(value, idbProxyTraps);
        // Return the same value back if we're not going to transform it.
        return value;
    }
    function wrap(value) {
        // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
        // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
        if (value instanceof IDBRequest)
            return promisifyRequest$1(value);
        // If we've already transformed this value before, reuse the transformed value.
        // This is faster, but it also provides object equality.
        if (transformCache.has(value))
            return transformCache.get(value);
        const newValue = transformCachableValue(value);
        // Not all types are transformed.
        // These may be primitive types, so they can't be WeakMap keys.
        if (newValue !== value) {
            transformCache.set(value, newValue);
            reverseTransformCache.set(newValue, value);
        }
        return newValue;
    }
    const unwrap = (value) => reverseTransformCache.get(value);

    /**
     * Open a database.
     *
     * @param name Name of the database.
     * @param version Schema version.
     * @param callbacks Additional callbacks.
     */
    function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
        const request = indexedDB.open(name, version);
        const openPromise = wrap(request);
        if (upgrade) {
            request.addEventListener('upgradeneeded', (event) => {
                upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
            });
        }
        if (blocked) {
            request.addEventListener('blocked', (event) => blocked(
            // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
            event.oldVersion, event.newVersion, event));
        }
        openPromise
            .then((db) => {
            if (terminated)
                db.addEventListener('close', () => terminated());
            if (blocking) {
                db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
            }
        })
            .catch(() => { });
        return openPromise;
    }

    const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
    const writeMethods = ['put', 'add', 'delete', 'clear'];
    const cachedMethods = new Map();
    function getMethod(target, prop) {
        if (!(target instanceof IDBDatabase &&
            !(prop in target) &&
            typeof prop === 'string')) {
            return;
        }
        if (cachedMethods.get(prop))
            return cachedMethods.get(prop);
        const targetFuncName = prop.replace(/FromIndex$/, '');
        const useIndex = prop !== targetFuncName;
        const isWrite = writeMethods.includes(targetFuncName);
        if (
        // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
        !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
            !(isWrite || readMethods.includes(targetFuncName))) {
            return;
        }
        const method = async function (storeName, ...args) {
            // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
            const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
            let target = tx.store;
            if (useIndex)
                target = target.index(args.shift());
            // Must reject if op rejects.
            // If it's a write operation, must reject if tx.done rejects.
            // Must reject with op rejection first.
            // Must resolve with op value.
            // Must handle both promises (no unhandled rejections)
            return (await Promise.all([
                target[targetFuncName](...args),
                isWrite && tx.done,
            ]))[0];
        };
        cachedMethods.set(prop, method);
        return method;
    }
    replaceTraps((oldTraps) => ({
        ...oldTraps,
        get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
        has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
    }));

    const AUTH_DB_NAME = 'auth-client-db';
    const OBJECT_STORE_NAME = 'ic-keyval';
    const _openDbStore = async (dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version) => {
        // Clear legacy stored delegations
        if (isBrowser && (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(KEY_STORAGE_DELEGATION))) {
            localStorage.removeItem(KEY_STORAGE_DELEGATION);
            localStorage.removeItem(KEY_STORAGE_KEY);
        }
        return await openDB(dbName, version, {
            upgrade: database => {
                database.objectStoreNames;
                if (database.objectStoreNames.contains(storeName)) {
                    database.clear(storeName);
                }
                database.createObjectStore(storeName);
            },
        });
    };
    async function _getValue(db, storeName, key) {
        return await db.get(storeName, key);
    }
    async function _setValue(db, storeName, key, value) {
        return await db.put(storeName, value, key);
    }
    async function _removeValue(db, storeName, key) {
        return await db.delete(storeName, key);
    }
    /**
     * Simple Key Value store
     * Defaults to `'auth-client-db'` with an object store of `'ic-keyval'`
     */
    class IdbKeyVal {
        // Do not use - instead prefer create
        constructor(_db, _storeName) {
            this._db = _db;
            this._storeName = _storeName;
        }
        /**
         *
         * @param {DBCreateOptions} options {@link DbCreateOptions}
         * @param {DBCreateOptions['dbName']} options.dbName name for the indexeddb database
         * @default 'auth-client-db'
         * @param {DBCreateOptions['storeName']} options.storeName name for the indexeddb Data Store
         * @default 'ic-keyval'
         * @param {DBCreateOptions['version']} options.version version of the database. Increment to safely upgrade
         * @constructs an {@link IdbKeyVal}
         */
        static async create(options) {
            const { dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version = 1 } = options !== null && options !== void 0 ? options : {};
            const db = await _openDbStore(dbName, storeName, version);
            return new IdbKeyVal(db, storeName);
        }
        /**
         * Basic setter
         * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]
         * @param value value to set
         * @returns void
         */
        async set(key, value) {
            return await _setValue(this._db, this._storeName, key, value);
        }
        /**
         * Basic getter
         * Pass in a type T for type safety if you know the type the value will have if it is found
         * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]
         * @returns `Promise<T | null>`
         * @example
         * await get<string>('exampleKey') -> 'exampleValue'
         */
        async get(key) {
            var _a;
            return (_a = (await _getValue(this._db, this._storeName, key))) !== null && _a !== void 0 ? _a : null;
        }
        /**
         * Remove a key
         * @param key {@link IDBValidKey}
         * @returns void
         */
        async remove(key) {
            return await _removeValue(this._db, this._storeName, key);
        }
    }

    const KEY_STORAGE_KEY = 'identity';
    const KEY_STORAGE_DELEGATION = 'delegation';
    const KEY_VECTOR = 'iv';
    // Increment if any fields are modified
    const DB_VERSION = 1;
    const isBrowser = typeof window !== 'undefined';
    /**
     * Legacy implementation of AuthClientStorage, for use where IndexedDb is not available
     */
    class LocalStorage {
        constructor(prefix = 'ic-', _localStorage) {
            this.prefix = prefix;
            this._localStorage = _localStorage;
        }
        get(key) {
            return Promise.resolve(this._getLocalStorage().getItem(this.prefix + key));
        }
        set(key, value) {
            this._getLocalStorage().setItem(this.prefix + key, value);
            return Promise.resolve();
        }
        remove(key) {
            this._getLocalStorage().removeItem(this.prefix + key);
            return Promise.resolve();
        }
        _getLocalStorage() {
            if (this._localStorage) {
                return this._localStorage;
            }
            const ls = typeof window === 'undefined'
                ? typeof global === 'undefined'
                    ? typeof self === 'undefined'
                        ? undefined
                        : self.localStorage
                    : global.localStorage
                : window.localStorage;
            if (!ls) {
                throw new Error('Could not find local storage.');
            }
            return ls;
        }
    }
    /**
     * IdbStorage is an interface for simple storage of string key-value pairs built on {@link IdbKeyVal}
     *
     * It replaces {@link LocalStorage}
     * @see implements {@link AuthClientStorage}
     */
    class IdbStorage {
        get _db() {
            return new Promise(resolve => {
                if (this.initializedDb) {
                    resolve(this.initializedDb);
                    return;
                }
                IdbKeyVal.create({ version: DB_VERSION }).then(db => {
                    this.initializedDb = db;
                    resolve(db);
                });
            });
        }
        async get(key) {
            const db = await this._db;
            return await db.get(key);
            // return (await db.get<string>(key)) ?? null;
        }
        async set(key, value) {
            const db = await this._db;
            await db.set(key, value);
        }
        async remove(key) {
            const db = await this._db;
            await db.remove(key);
        }
    }

    const IDENTITY_PROVIDER_DEFAULT = 'https://identity.ic0.app';
    const IDENTITY_PROVIDER_ENDPOINT = '#authorize';
    const INTERRUPT_CHECK_INTERVAL = 500;
    const ERROR_USER_INTERRUPT = 'UserInterrupt';
    /**
     * Tool to manage authentication and identity
     * @see {@link AuthClient}
     */
    class AuthClient {
        constructor(_identity, _key, _chain, _storage, idleManager, _createOptions, 
        // A handle on the IdP window.
        _idpWindow, 
        // The event handler for processing events from the IdP.
        _eventHandler) {
            var _a;
            this._identity = _identity;
            this._key = _key;
            this._chain = _chain;
            this._storage = _storage;
            this.idleManager = idleManager;
            this._createOptions = _createOptions;
            this._idpWindow = _idpWindow;
            this._eventHandler = _eventHandler;
            const logout = this.logout.bind(this);
            const idleOptions = _createOptions === null || _createOptions === void 0 ? void 0 : _createOptions.idleOptions;
            /**
             * Default behavior is to clear stored identity and reload the page.
             * By either setting the disableDefaultIdleCallback flag or passing in a custom idle callback, we will ignore this config
             */
            if (!(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.onIdle) && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableDefaultIdleCallback)) {
                (_a = this.idleManager) === null || _a === void 0 ? void 0 : _a.registerCallback(() => {
                    logout();
                    location.reload();
                });
            }
        }
        /**
         * Create an AuthClient to manage authentication and identity
         * @constructs {@link AuthClient}
         * @param {AuthClientCreateOptions} options
         * @see {@link AuthClientCreateOptions}
         * @param options.identity Optional Identity to use as the base
         * @see {@link SignIdentity}
         * @param options.storage Storage mechanism for delegration credentials
         * @see {@link AuthClientStorage}
         * @param {IdleOptions} options.idleOptions Configures an {@link IdleManager}
         * @see {@link IdleOptions}
         * Default behavior is to clear stored identity and reload the page when a user goes idle, unless you set the disableDefaultIdleCallback flag or pass in a custom idle callback.
         * @example
         * const authClient = await AuthClient.create({
         *   idleOptions: {
         *     disableIdle: true
         *   }
         * })
         */
        static async create(options = {}) {
            var _a, _b;
            const storage = (_a = options.storage) !== null && _a !== void 0 ? _a : new IdbStorage();
            let key = null;
            if (options.identity) {
                key = options.identity;
            }
            else {
                let maybeIdentityStorage = await storage.get(KEY_STORAGE_KEY);
                if (!maybeIdentityStorage && isBrowser) {
                    // Attempt to migrate from localstorage
                    try {
                        const fallbackLocalStorage = new LocalStorage();
                        const localChain = await fallbackLocalStorage.get(KEY_STORAGE_DELEGATION);
                        const localKey = await fallbackLocalStorage.get(KEY_STORAGE_KEY);
                        if (localChain && localKey) {
                            console.log('Discovered an identity stored in localstorage. Migrating to IndexedDB');
                            await storage.set(KEY_STORAGE_DELEGATION, localChain);
                            await storage.set(KEY_STORAGE_KEY, localKey);
                            maybeIdentityStorage = localChain;
                            // clean up
                            await fallbackLocalStorage.remove(KEY_STORAGE_DELEGATION);
                            await fallbackLocalStorage.remove(KEY_STORAGE_KEY);
                        }
                    }
                    catch (error) {
                        console.error('error while attempting to recover localstorage: ' + error);
                    }
                }
                if (maybeIdentityStorage) {
                    try {
                        key = Ed25519KeyIdentity.fromJSON(maybeIdentityStorage);
                    }
                    catch (e) {
                        // Ignore this, this means that the localStorage value isn't a valid Ed25519KeyIdentity
                        // serialization.
                    }
                }
            }
            let identity = new AnonymousIdentity();
            let chain = null;
            if (key) {
                try {
                    const chainStorage = await storage.get(KEY_STORAGE_DELEGATION);
                    if (options.identity) {
                        identity = options.identity;
                    }
                    else if (chainStorage) {
                        chain = DelegationChain.fromJSON(chainStorage);
                        // Verify that the delegation isn't expired.
                        if (!isDelegationValid(chain)) {
                            await _deleteStorage(storage);
                            key = null;
                        }
                        else {
                            identity = DelegationIdentity.fromDelegation(key, chain);
                        }
                    }
                }
                catch (e) {
                    console.error(e);
                    // If there was a problem loading the chain, delete the key.
                    await _deleteStorage(storage);
                    key = null;
                }
            }
            let idleManager = undefined;
            if ((_b = options.idleOptions) === null || _b === void 0 ? void 0 : _b.disableIdle) {
                idleManager = undefined;
            }
            // if there is a delegation chain or provided identity, setup idleManager
            else if (chain || options.identity) {
                idleManager = IdleManager.create(options.idleOptions);
            }
            if (!key) {
                // Create a new key (whether or not one was in storage).
                key = Ed25519KeyIdentity.generate();
                await storage.set(KEY_STORAGE_KEY, JSON.stringify(key));
            }
            return new this(identity, key, chain, storage, idleManager, options);
        }
        _handleSuccess(message, onSuccess) {
            var _a, _b, _c;
            const delegations = message.delegations.map(signedDelegation => {
                return {
                    delegation: new Delegation(signedDelegation.delegation.pubkey, signedDelegation.delegation.expiration, signedDelegation.delegation.targets),
                    signature: signedDelegation.signature.buffer,
                };
            });
            const delegationChain = DelegationChain.fromDelegations(delegations, message.userPublicKey.buffer);
            const key = this._key;
            if (!key) {
                return;
            }
            this._chain = delegationChain;
            this._identity = DelegationIdentity.fromDelegation(key, this._chain);
            (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();
            if (!this.idleManager) {
                const idleOptions = (_b = this._createOptions) === null || _b === void 0 ? void 0 : _b.idleOptions;
                this.idleManager = IdleManager.create(idleOptions);
                if (!(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.onIdle) && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableDefaultIdleCallback)) {
                    (_c = this.idleManager) === null || _c === void 0 ? void 0 : _c.registerCallback(() => {
                        this.logout();
                        location.reload();
                    });
                }
            }
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
            this._removeEventListener();
            delete this._idpWindow;
        }
        getIdentity() {
            return this._identity;
        }
        async isAuthenticated() {
            return !this.getIdentity().getPrincipal().isAnonymous() && this._chain !== null;
        }
        /**
         * AuthClient Login -
         * Opens up a new window to authenticate with Internet Identity
         * @param {AuthClientLoginOptions} options
         * @param options.identityProvider Identity provider
         * @param options.maxTimeToLive Expiration of the authentication in nanoseconds
         * @param options.derivationOrigin Origin for Identity Provider to use while generating the delegated identity
         * @param options.windowOpenerFeatures Configures the opened authentication window
         * @param options.onSuccess Callback once login has completed
         * @param options.onError Callback in case authentication fails
         * @example
         * const authClient = await AuthClient.create();
         * authClient.login({
         *  identityProvider: 'http://<canisterID>.localhost:8000',
         *  maxTimeToLive: BigInt (7) * BigInt(24) * BigInt(3_600_000_000_000), // 1 week
         *  windowOpenerFeatures: "toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100",
         *  onSuccess: () => {
         *    console.log('Login Successful!');
         *  },
         *  onError: (error) => {
         *    console.error('Login Failed: ', error);
         *  }
         * });
         */
        async login(options) {
            var _a, _b, _c, _d;
            // Set default maxTimeToLive to 8 hours
            const defaultTimeToLive = /* hours */ BigInt(8) * /* nanoseconds */ BigInt(3600000000000);
            // Create the URL of the IDP. (e.g. https://XXXX/#authorize)
            const identityProviderUrl = new URL(((_a = options === null || options === void 0 ? void 0 : options.identityProvider) === null || _a === void 0 ? void 0 : _a.toString()) || IDENTITY_PROVIDER_DEFAULT);
            // Set the correct hash if it isn't already set.
            identityProviderUrl.hash = IDENTITY_PROVIDER_ENDPOINT;
            // If `login` has been called previously, then close/remove any previous windows
            // and event listeners.
            (_b = this._idpWindow) === null || _b === void 0 ? void 0 : _b.close();
            this._removeEventListener();
            // Add an event listener to handle responses.
            this._eventHandler = this._getEventHandler(identityProviderUrl, Object.assign({ maxTimeToLive: (_c = options === null || options === void 0 ? void 0 : options.maxTimeToLive) !== null && _c !== void 0 ? _c : defaultTimeToLive }, options));
            window.addEventListener('message', this._eventHandler);
            // Open a new window with the IDP provider.
            this._idpWindow =
                (_d = window.open(identityProviderUrl.toString(), 'idpWindow', options === null || options === void 0 ? void 0 : options.windowOpenerFeatures)) !== null && _d !== void 0 ? _d : undefined;
            // Check if the _idpWindow is closed by user.
            const checkInterruption = () => {
                // The _idpWindow is opened and not yet closed by the client
                if (this._idpWindow) {
                    if (this._idpWindow.closed) {
                        this._handleFailure(ERROR_USER_INTERRUPT, options === null || options === void 0 ? void 0 : options.onError);
                    }
                    else {
                        setTimeout(checkInterruption, INTERRUPT_CHECK_INTERVAL);
                    }
                }
            };
            checkInterruption();
        }
        _getEventHandler(identityProviderUrl, options) {
            return async (event) => {
                var _a, _b, _c;
                if (event.origin !== identityProviderUrl.origin) {
                    console.warn(`WARNING: expected origin '${identityProviderUrl.origin}', got '${event.origin}' (ignoring)`);
                    return;
                }
                const message = event.data;
                switch (message.kind) {
                    case 'authorize-ready': {
                        // IDP is ready. Send a message to request authorization.
                        const request = {
                            kind: 'authorize-client',
                            sessionPublicKey: new Uint8Array((_a = this._key) === null || _a === void 0 ? void 0 : _a.getPublicKey().toDer()),
                            maxTimeToLive: options === null || options === void 0 ? void 0 : options.maxTimeToLive,
                            derivationOrigin: (_b = options === null || options === void 0 ? void 0 : options.derivationOrigin) === null || _b === void 0 ? void 0 : _b.toString(),
                        };
                        (_c = this._idpWindow) === null || _c === void 0 ? void 0 : _c.postMessage(request, identityProviderUrl.origin);
                        break;
                    }
                    case 'authorize-client-success':
                        // Create the delegation chain and store it.
                        try {
                            this._handleSuccess(message, options === null || options === void 0 ? void 0 : options.onSuccess);
                            // Setting the storage is moved out of _handleSuccess to make
                            // it a sync function. Having _handleSuccess as an async function
                            // messes up the jest tests for some reason.
                            if (this._chain) {
                                await this._storage.set(KEY_STORAGE_DELEGATION, JSON.stringify(this._chain.toJSON()));
                            }
                        }
                        catch (err) {
                            this._handleFailure(err.message, options === null || options === void 0 ? void 0 : options.onError);
                        }
                        break;
                    case 'authorize-client-failure':
                        this._handleFailure(message.text, options === null || options === void 0 ? void 0 : options.onError);
                        break;
                }
            };
        }
        _handleFailure(errorMessage, onError) {
            var _a;
            (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();
            onError === null || onError === void 0 ? void 0 : onError(errorMessage);
            this._removeEventListener();
            delete this._idpWindow;
        }
        _removeEventListener() {
            if (this._eventHandler) {
                window.removeEventListener('message', this._eventHandler);
            }
            this._eventHandler = undefined;
        }
        async logout(options = {}) {
            await _deleteStorage(this._storage);
            // Reset this auth client to a non-authenticated state.
            this._identity = new AnonymousIdentity();
            this._chain = null;
            if (options.returnTo) {
                try {
                    window.history.pushState({}, '', options.returnTo);
                }
                catch (e) {
                    window.location.href = options.returnTo;
                }
            }
        }
    }
    async function _deleteStorage(storage) {
        await storage.remove(KEY_STORAGE_KEY);
        await storage.remove(KEY_STORAGE_DELEGATION);
        await storage.remove(KEY_VECTOR);
    }

    function promisifyRequest(request) {
        return new Promise((resolve, reject) => {
            // @ts-ignore - file size hacks
            request.oncomplete = request.onsuccess = () => resolve(request.result);
            // @ts-ignore - file size hacks
            request.onabort = request.onerror = () => reject(request.error);
        });
    }
    function createStore(dbName, storeName) {
        const request = indexedDB.open(dbName);
        request.onupgradeneeded = () => request.result.createObjectStore(storeName);
        const dbp = promisifyRequest(request);
        return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
    }
    let defaultGetStoreFunc;
    function defaultGetStore() {
        if (!defaultGetStoreFunc) {
            defaultGetStoreFunc = createStore('keyval-store', 'keyval');
        }
        return defaultGetStoreFunc;
    }
    /**
     * Get a value by its key.
     *
     * @param key
     * @param customStore Method to get a custom store. Use with caution (see the docs).
     */
    function get(key, customStore = defaultGetStore()) {
        return customStore('readonly', (store) => promisifyRequest(store.get(key)));
    }
    /**
     * Set a value with a key.
     *
     * @param key
     * @param value
     * @param customStore Method to get a custom store. Use with caution (see the docs).
     */
    function set$1(key, value, customStore = defaultGetStore()) {
        return customStore('readwrite', (store) => {
            store.put(value, key);
            return promisifyRequest(store.transaction);
        });
    }

    let wasm;

    const cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

    cachedTextDecoder.decode();

    let cachedUint8Memory0 = null;

    function getUint8Memory0() {
        if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
            cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachedUint8Memory0;
    }

    function getStringFromWasm0(ptr, len) {
        return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
    }

    const heap = new Array(128).fill(undefined);

    heap.push(undefined, null, true, false);

    let heap_next = heap.length;

    function addHeapObject(obj) {
        if (heap_next === heap.length) heap.push(heap.length + 1);
        const idx = heap_next;
        heap_next = heap[idx];

        heap[idx] = obj;
        return idx;
    }

    let WASM_VECTOR_LEN = 0;

    function passArray8ToWasm0(arg, malloc) {
        const ptr = malloc(arg.length * 1);
        getUint8Memory0().set(arg, ptr / 1);
        WASM_VECTOR_LEN = arg.length;
        return ptr;
    }

    let cachedInt32Memory0 = null;

    function getInt32Memory0() {
        if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
            cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
        }
        return cachedInt32Memory0;
    }

    function getObject(idx) { return heap[idx]; }

    function dropObject(idx) {
        if (idx < 132) return;
        heap[idx] = heap_next;
        heap_next = idx;
    }

    function takeObject(idx) {
        const ret = getObject(idx);
        dropObject(idx);
        return ret;
    }

    function getArrayU8FromWasm0(ptr, len) {
        return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
    }
    /**
    * Secret key of the transport key pair
    */
    class TransportSecretKey {

        static __wrap(ptr) {
            const obj = Object.create(TransportSecretKey.prototype);
            obj.ptr = ptr;

            return obj;
        }

        __destroy_into_raw() {
            const ptr = this.ptr;
            this.ptr = 0;

            return ptr;
        }

        free() {
            const ptr = this.__destroy_into_raw();
            wasm.__wbg_transportsecretkey_free(ptr);
        }
        /**
        * Creates a transport secret key from a 32-byte seed.
        * @param {Uint8Array} seed
        */
        constructor(seed) {
            try {
                const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
                const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);
                const len0 = WASM_VECTOR_LEN;
                wasm.transportsecretkey_from_seed(retptr, ptr0, len0);
                var r0 = getInt32Memory0()[retptr / 4 + 0];
                var r1 = getInt32Memory0()[retptr / 4 + 1];
                var r2 = getInt32Memory0()[retptr / 4 + 2];
                if (r2) {
                    throw takeObject(r1);
                }
                return TransportSecretKey.__wrap(r0);
            } finally {
                wasm.__wbindgen_add_to_stack_pointer(16);
            }
        }
        /**
        * Returns the serialized public key associated with this secret key
        * @returns {Uint8Array}
        */
        public_key() {
            try {
                const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
                wasm.transportsecretkey_public_key(retptr, this.ptr);
                var r0 = getInt32Memory0()[retptr / 4 + 0];
                var r1 = getInt32Memory0()[retptr / 4 + 1];
                var v0 = getArrayU8FromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
                return v0;
            } finally {
                wasm.__wbindgen_add_to_stack_pointer(16);
            }
        }
        /**
        * Decrypts and verifies an encrypted key, and hashes it to a symmetric key
        *
        * The output length can be arbitrary and is specified by the caller
        *
        * The `symmetric_key_associated_data` field should include information about
        * the protocol and cipher that this key will be used for.
        * @param {Uint8Array} encrypted_key_bytes
        * @param {Uint8Array} derived_public_key_bytes
        * @param {Uint8Array} derivation_id
        * @param {number} symmetric_key_bytes
        * @param {Uint8Array} symmetric_key_associated_data
        * @returns {Uint8Array}
        */
        decrypt_and_hash(encrypted_key_bytes, derived_public_key_bytes, derivation_id, symmetric_key_bytes, symmetric_key_associated_data) {
            try {
                const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
                const ptr0 = passArray8ToWasm0(encrypted_key_bytes, wasm.__wbindgen_malloc);
                const len0 = WASM_VECTOR_LEN;
                const ptr1 = passArray8ToWasm0(derived_public_key_bytes, wasm.__wbindgen_malloc);
                const len1 = WASM_VECTOR_LEN;
                const ptr2 = passArray8ToWasm0(derivation_id, wasm.__wbindgen_malloc);
                const len2 = WASM_VECTOR_LEN;
                const ptr3 = passArray8ToWasm0(symmetric_key_associated_data, wasm.__wbindgen_malloc);
                const len3 = WASM_VECTOR_LEN;
                wasm.transportsecretkey_decrypt_and_hash(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, symmetric_key_bytes, ptr3, len3);
                var r0 = getInt32Memory0()[retptr / 4 + 0];
                var r1 = getInt32Memory0()[retptr / 4 + 1];
                var r2 = getInt32Memory0()[retptr / 4 + 2];
                var r3 = getInt32Memory0()[retptr / 4 + 3];
                if (r3) {
                    throw takeObject(r2);
                }
                var v4 = getArrayU8FromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
                return v4;
            } finally {
                wasm.__wbindgen_add_to_stack_pointer(16);
            }
        }
    }

    async function load(module, imports) {
        if (typeof Response === 'function' && module instanceof Response) {
            if (typeof WebAssembly.instantiateStreaming === 'function') {
                try {
                    return await WebAssembly.instantiateStreaming(module, imports);

                } catch (e) {
                    if (module.headers.get('Content-Type') != 'application/wasm') {
                        console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                    } else {
                        throw e;
                    }
                }
            }

            const bytes = await module.arrayBuffer();
            return await WebAssembly.instantiate(bytes, imports);

        } else {
            const instance = await WebAssembly.instantiate(module, imports);

            if (instance instanceof WebAssembly.Instance) {
                return { instance, module };

            } else {
                return instance;
            }
        }
    }

    function getImports() {
        const imports = {};
        imports.wbg = {};
        imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
            const ret = getStringFromWasm0(arg0, arg1);
            return addHeapObject(ret);
        };
        imports.wbg.__wbindgen_throw = function(arg0, arg1) {
            throw new Error(getStringFromWasm0(arg0, arg1));
        };

        return imports;
    }

    function finalizeInit(instance, module) {
        wasm = instance.exports;
        init$1.__wbindgen_wasm_module = module;
        cachedInt32Memory0 = null;
        cachedUint8Memory0 = null;


        return wasm;
    }

    async function init$1(input) {
        if (typeof input === 'undefined') {
            input = new URL('ic_vetkd_utils_bg.wasm', (document.currentScript && document.currentScript.src || new URL('main.js', document.baseURI).href));
        }
        const imports = getImports();

        if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
            input = fetch(input);
        }

        const { instance, module } = await load(await input, imports);

        return finalizeInit(instance, module);
    }

    class CryptoService {
        constructor(actor) {
            this.actor = actor;
        }
        // The function encrypts data with the note-id-specific secretKey.
        async encryptWithNoteKey(note_id, owner, data) {
            await this.fetch_note_key_if_needed(note_id, owner);
            const note_key = await get([note_id.toString(), owner]);
            const data_encoded = Uint8Array.from([...data].map((ch) => ch.charCodeAt(0))).buffer;
            // The iv must never be reused with a given key.
            const iv = window.crypto.getRandomValues(new Uint8Array(12));
            const ciphertext = await window.crypto.subtle.encrypt({
                name: "AES-GCM",
                iv: iv,
            }, note_key, data_encoded);
            const iv_decoded = String.fromCharCode(...new Uint8Array(iv));
            const cipher_decoded = String.fromCharCode(...new Uint8Array(ciphertext));
            return iv_decoded + cipher_decoded;
        }
        // The function decrypts the given input data with the note-id-specific secretKey.
        async decryptWithNoteKey(note_id, owner, data) {
            await this.fetch_note_key_if_needed(note_id, owner);
            const note_key = await get([note_id.toString(), owner]);
            if (data.length < 13) {
                throw new Error("wrong encoding, too short to contain iv");
            }
            const iv_decoded = data.slice(0, 12);
            const cipher_decoded = data.slice(12);
            const iv_encoded = Uint8Array.from([...iv_decoded].map((ch) => ch.charCodeAt(0))).buffer;
            const ciphertext_encoded = Uint8Array.from([...cipher_decoded].map((ch) => ch.charCodeAt(0))).buffer;
            const decrypted_data_encoded = await window.crypto.subtle.decrypt({
                name: "AES-GCM",
                iv: iv_encoded,
            }, note_key, ciphertext_encoded);
            const decrypted_data_decoded = String.fromCharCode(...new Uint8Array(decrypted_data_encoded));
            return decrypted_data_decoded;
        }
        async fetch_note_key_if_needed(note_id, owner) {
            if (!(await get([note_id.toString(), owner]))) {
                const seed = window.crypto.getRandomValues(new Uint8Array(32));
                const tsk = new TransportSecretKey(seed);
                const ek_bytes_hex = await this.actor.encrypted_symmetric_key_for_note(note_id, tsk.public_key());
                const pk_bytes_hex = await this.actor.symmetric_key_verification_key_for_note();
                const note_id_bytes = bigintTo128BitBigEndianUint8Array(note_id);
                const owner_utf8 = new TextEncoder().encode(owner);
                const derivation_id = new Uint8Array(note_id_bytes.length + owner_utf8.length);
                derivation_id.set(note_id_bytes);
                derivation_id.set(owner_utf8, note_id_bytes.length);
                const aes_256_gcm_key_raw = tsk.decrypt_and_hash(hex_decode(ek_bytes_hex), hex_decode(pk_bytes_hex), derivation_id, 32, new TextEncoder().encode("aes-256-gcm"));
                const note_key = await window.crypto.subtle.importKey("raw", aes_256_gcm_key_raw, "AES-GCM", false, ["encrypt", "decrypt"]);
                await set$1([note_id.toString(), owner], note_key);
            }
        }
    }
    const hex_decode = (hexString) => Uint8Array.from(hexString.match(/.{1,2}/g).map((byte) => Number.parseInt(byte, 16)));
    // Inspired by https://coolaj86.com/articles/convert-js-bigints-to-typedarrays/
    function bigintTo128BitBigEndianUint8Array(bn) {
        let hex = BigInt(bn).toString(16);
        // extend hex to length 32 = 16 bytes = 128 bits
        while (hex.length < 32) {
            hex = `0${hex}`;
        }
        const len = hex.length / 2;
        const u8 = new Uint8Array(len);
        let i = 0;
        let j = 0;
        while (i < len) {
            u8[i] = Number.parseInt(hex.slice(j, j + 2), 16);
            i += 1;
            j += 2;
        }
        return u8;
    }

    let nextId = 0;
    const notifications = writable([]);
    function addNotification(notification, timeout = 2000) {
        const id = nextId++;
        notifications.update(($n) => [...$n, Object.assign(Object.assign({}, notification), { id })]);
        setTimeout(() => {
            notifications.update(($n) => $n.filter((n) => n.id != id));
        }, timeout);
    }
    function showError(e, message) {
        addNotification({ type: 'error', message });
        console.error(e);
        console.error(e.stack);
        throw e;
    }

    const { set, subscribe } = writable({});

    const remove = () => {
      set({});
    };

    const activeRoute = {
      subscribe,
      set,
      remove,
    };

    const UrlParser = (urlString, namedUrl = '') => {
      const urlBase = new URL(urlString);

      /**
       * Wrapper for URL.hash
       *
       **/
      function hash() {
        return urlBase.hash;
      }

      /**
       * Wrapper for URL.host
       *
       **/
      function host() {
        return urlBase.host;
      }

      /**
       * Wrapper for URL.hostname
       *
       **/
      function hostname() {
        return urlBase.hostname;
      }

      /**
       * Returns an object with all the named params and their values
       *
       **/
      function namedParams() {
        const allPathName = pathNames();
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values[paramKey.value] = allPathName[paramKey.index];
          return values;
        }, {});
      }

      /**
       * Returns an array with all the named param keys
       *
       **/
      function namedParamsKeys() {
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values.push(paramKey.value);
          return values;
        }, []);
      }

      /**
       * Returns an array with all the named param values
       *
       **/
      function namedParamsValues() {
        const allPathName = pathNames();
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values.push(allPathName[paramKey.index]);
          return values;
        }, []);
      }

      /**
       * Returns an array with all named param ids and their position in the path
       * Private
       **/
      function namedParamsWithIndex() {
        const namedUrlParams = getPathNames(namedUrl);

        return namedUrlParams.reduce((validParams, param, index) => {
          if (param[0] === ':') {
            validParams.push({ value: param.slice(1), index });
          }
          return validParams;
        }, []);
      }

      /**
       * Wrapper for URL.port
       *
       **/
      function port() {
        return urlBase.port;
      }

      /**
       * Wrapper for URL.pathname
       *
       **/
      function pathname() {
        return urlBase.pathname;
      }

      /**
       * Wrapper for URL.protocol
       *
       **/
      function protocol() {
        return urlBase.protocol;
      }

      /**
       * Wrapper for URL.search
       *
       **/
      function search() {
        return urlBase.search;
      }

      /**
       * Returns an object with all query params and their values
       *
       **/
      function queryParams() {
        const params = {};
        urlBase.searchParams.forEach((value, key) => {
          params[key] = value;
        });

        return params;
      }

      /**
       * Returns an array with all the query param keys
       *
       **/
      function queryParamsKeys() {
        const params = [];
        urlBase.searchParams.forEach((_value, key) => {
          params.push(key);
        });

        return params;
      }

      /**
       * Returns an array with all the query param values
       *
       **/
      function queryParamsValues() {
        const params = [];
        urlBase.searchParams.forEach((value) => {
          params.push(value);
        });

        return params;
      }

      /**
       * Returns an array with all the elements of a pathname
       *
       **/
      function pathNames() {
        return getPathNames(urlBase.pathname);
      }

      /**
       * Returns an array with all the parts of a pathname
       * Private method
       **/
      function getPathNames(pathName) {
        if (pathName === '/' || pathName.trim().length === 0) return [pathName];
        if (pathName.slice(-1) === '/') {
          pathName = pathName.slice(0, -1);
        }
        if (pathName[0] === '/') {
          pathName = pathName.slice(1);
        }

        return pathName.split('/');
      }

      return Object.freeze({
        hash: hash(),
        host: host(),
        hostname: hostname(),
        namedParams: namedParams(),
        namedParamsKeys: namedParamsKeys(),
        namedParamsValues: namedParamsValues(),
        pathNames: pathNames(),
        port: port(),
        pathname: pathname(),
        protocol: protocol(),
        search: search(),
        queryParams: queryParams(),
        queryParamsKeys: queryParamsKeys(),
        queryParamsValues: queryParamsValues(),
      });
    };

    /**
     * Returns true if object has any nested routes empty
     * @param routeObject
     **/
    const anyEmptyNestedRoutes = (routeObject) => {
      let result = false;
      if (Object.keys(routeObject).length === 0) {
        return true;
      }

      if (routeObject.childRoute && Object.keys(routeObject.childRoute).length === 0) {
        result = true;
      } else if (routeObject.childRoute) {
        result = anyEmptyNestedRoutes(routeObject.childRoute);
      }

      return result;
    };

    /**
     * Compare two routes ignoring named params
     * @param pathName string
     * @param routeName string
     **/

    const compareRoutes = (pathName, routeName) => {
      routeName = removeSlash(routeName);

      if (routeName.includes(':')) {
        return routeName.includes(pathName);
      } else {
        return routeName.startsWith(pathName);
      }
    };

    /**
     * Returns a boolean indicating if the name of path exists in the route based on the language parameter
     * @param pathName string
     * @param route object
     * @param language string
     **/

    const findLocalisedRoute = (pathName, route, language) => {
      let exists = false;

      if (language) {
        return { exists: route.lang && route.lang[language] && route.lang[language].includes(pathName), language };
      }

      exists = compareRoutes(pathName, route.name);

      if (!exists && route.lang && typeof route.lang === 'object') {
        for (const [key, value] of Object.entries(route.lang)) {
          if (compareRoutes(pathName, value)) {
            exists = true;
            language = key;
          }
        }
      }

      return { exists, language };
    };

    /**
     * Return all the consecutive named param (placeholders) of a pathname
     * @param pathname
     **/
    const getNamedParams = (pathName = '') => {
      if (pathName.trim().length === 0) return [];
      const namedUrlParams = getPathNames(pathName);
      return namedUrlParams.reduce((validParams, param) => {
        if (param[0] === ':') {
          validParams.push(param.slice(1));
        }

        return validParams;
      }, []);
    };

    /**
     * Split a pathname based on /
     * @param pathName
     * Private method
     **/
    const getPathNames = (pathName) => {
      if (pathName === '/' || pathName.trim().length === 0) return [pathName];

      pathName = removeSlash(pathName, 'both');

      return pathName.split('/');
    };

    /**
     * Return the first part of a pathname until the first named param is found
     * @param name
     **/
    const nameToPath = (name = '') => {
      let routeName;
      if (name === '/' || name.trim().length === 0) return name;
      name = removeSlash(name, 'lead');
      routeName = name.split(':')[0];
      routeName = removeSlash(routeName, 'trail');

      return routeName.toLowerCase();
    };

    /**
     * Return the path name excluding query params
     * @param name
     **/
    const pathWithoutQueryParams = (currentRoute) => {
      const path = currentRoute.path.split('?');
      return path[0];
    };

    /**
     * Return the path name including query params
     * @param name
     **/
    const pathWithQueryParams = (currentRoute) => {
      let queryParams = [];
      if (currentRoute.queryParams) {
        for (let [key, value] of Object.entries(currentRoute.queryParams)) {
          queryParams.push(`${key}=${value}`);
        }
      }

      const hash = currentRoute.hash ? currentRoute.hash : '';

      if (queryParams.length > 0) {
        return `${currentRoute.path}?${queryParams.join('&')}${hash}`;
      } else {
        return currentRoute.path + hash;
      }
    };

    /**
     * Returns a string with trailing or leading slash character removed
     * @param pathName string
     * @param position string - lead, trail, both
     **/
    const removeExtraPaths = (pathNames, basePathNames) => {
      const names = basePathNames.split('/');
      if (names.length > 1) {
        names.forEach(function (name, index) {
          if (name.length > 0 && index > 0) {
            pathNames.shift();
          }
        });
      }

      return pathNames;
    };

    /**
     * Returns a string with trailing or leading slash character removed
     * @param pathName string
     * @param position string - lead, trail, both
     **/

    const removeSlash = (pathName, position = 'lead') => {
      if (position === 'trail' || position === 'both') {
        pathName = pathName.replace(/\/$/, '');
      }

      if (position === 'lead' || position === 'both') {
        pathName = pathName.replace(/^\//, '');
      }

      return pathName;
    };

    /**
     * Returns the name of the route based on the language parameter
     * @param route object
     * @param language string
     **/

    const routeNameLocalised = (route, language = null) => {
      if (!language || !route.lang || !route.lang[language]) {
        return route.name;
      } else {
        return route.lang[language];
      }
    };

    /**
     * Return the path name excluding query params
     * @param name
     **/
    const startsWithNamedParam = (currentRoute) => {
      const routeName = removeSlash(currentRoute);

      return routeName.startsWith(':');
    };

    /**
     * Updates the base route path.
     * Route objects can have nested routes (childRoutes) or just a long name like "admin/employees/show/:id"
     *
     * @param basePath string
     * @param pathNames array
     * @param route object
     * @param language string
     **/

    const updateRoutePath = (basePath, pathNames, route, language, convert = false) => {
      if (basePath === '/' || basePath.trim().length === 0) return { result: basePath, language: null };

      let basePathResult = basePath;
      let routeName = route.name;
      let currentLanguage = language;

      if (convert) {
        currentLanguage = '';
      }

      routeName = removeSlash(routeName);
      basePathResult = removeSlash(basePathResult);

      if (!route.childRoute) {
        let localisedRoute = findLocalisedRoute(basePathResult, route, currentLanguage);

        if (localisedRoute.exists && convert) {
          basePathResult = routeNameLocalised(route, language);
        }

        let routeNames = routeName.split(':')[0];
        routeNames = removeSlash(routeNames, 'trail');
        routeNames = routeNames.split('/');
        routeNames.shift();
        routeNames.forEach(() => {
          const currentPathName = pathNames[0];
          localisedRoute = findLocalisedRoute(`${basePathResult}/${currentPathName}`, route, currentLanguage);

          if (currentPathName && localisedRoute.exists) {
            if (convert) {
              basePathResult = routeNameLocalised(route, language);
            } else {
              basePathResult = `${basePathResult}/${currentPathName}`;
            }
            pathNames.shift();
          } else {
            return { result: basePathResult, language: localisedRoute.language };
          }
        });
        return { result: basePathResult, language: localisedRoute.language };
      } else {
        return { result: basePath, language: currentLanguage };
      }
    };

    const RouterCurrent = (trackPage) => {
      const trackPageview = trackPage || false;
      let activeRoute = '';

      const setActive = (newRoute, updateBrowserHistory) => {
        activeRoute = newRoute.path;
        pushActiveRoute(newRoute, updateBrowserHistory);
      };

      const active = () => {
        return activeRoute;
      };

      /**
       * Returns true if pathName is current active route
       * @param pathName String The path name to check against the current route.
       * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.
       **/
      const isActive = (queryPath, includePath = false) => {
        if (queryPath[0] !== '/') {
          queryPath = '/' + queryPath;
        }

        // remove query params for comparison
        let pathName = UrlParser(`http://fake.com${queryPath}`).pathname;
        let activeRoutePath = UrlParser(`http://fake.com${activeRoute}`).pathname;

        pathName = removeSlash(pathName, 'trail');

        activeRoutePath = removeSlash(activeRoutePath, 'trail');

        if (includePath) {
          return activeRoutePath.includes(pathName);
        } else {
          return activeRoutePath === pathName;
        }
      };

      const pushActiveRoute = (newRoute, updateBrowserHistory) => {
        if (typeof window !== 'undefined') {
          const pathAndSearch = pathWithQueryParams(newRoute);

          if (updateBrowserHistory) {
            window.history.pushState({ page: pathAndSearch }, '', pathAndSearch);
          }
          // Moving back in history does not update browser history but does update tracking.
          if (trackPageview) {
            gaTracking(pathAndSearch);
          }
        }
      };

      const gaTracking = (newPage) => {
        if (typeof ga !== 'undefined') {
          ga('set', 'page', newPage);
          ga('send', 'pageview');
        }
      };

      return Object.freeze({ active, isActive, setActive });
    };

    const RouterGuard = (onlyIf) => {
      const guardInfo = onlyIf;

      const valid = () => {
        return guardInfo && guardInfo.guard && typeof guardInfo.guard === 'function';
      };

      const redirect = () => {
        return !guardInfo.guard();
      };

      const redirectPath = () => {
        let destinationUrl = '/';
        if (guardInfo.redirect && guardInfo.redirect.length > 0) {
          destinationUrl = guardInfo.redirect;
        }

        return destinationUrl;
      };

      return Object.freeze({ valid, redirect, redirectPath });
    };

    const RouterRedirect = (route, currentPath) => {
      const guard = RouterGuard(route.onlyIf);

      const path = () => {
        let redirectTo = currentPath;
        if (route.redirectTo && route.redirectTo.length > 0) {
          redirectTo = route.redirectTo;
        }

        if (guard.valid() && guard.redirect()) {
          redirectTo = guard.redirectPath();
        }

        return redirectTo;
      };

      return Object.freeze({ path });
    };

    function RouterRoute({ routeInfo, path, routeNamedParams, urlParser, namedPath, language }) {
      const namedParams = () => {
        const parsedParams = UrlParser(`https://fake.com${urlParser.pathname}`, namedPath).namedParams;

        return { ...routeNamedParams, ...parsedParams };
      };

      const get = () => {
        return {
          name: path,
          component: routeInfo.component,
          hash: urlParser.hash,
          layout: routeInfo.layout,
          queryParams: urlParser.queryParams,
          namedParams: namedParams(),
          path,
          language,
        };
      };

      return Object.freeze({ get, namedParams });
    }

    function RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage }) {
      let updatedPathRoute;
      let route;
      let routePathLanguage = currentLanguage;

      function updatedPath(currentRoute) {
        route = currentRoute;
        updatedPathRoute = updateRoutePath(basePathName, pathNames, route, routePathLanguage, convert);
        routePathLanguage = convert ? currentLanguage : updatedPathRoute.language;

        return updatedPathRoute;
      }

      function localisedPathName() {
        return routeNameLocalised(route, routePathLanguage);
      }

      function localisedRouteWithoutNamedParams() {
        return nameToPath(localisedPathName());
      }

      function basePathNameWithoutNamedParams() {
        return nameToPath(updatedPathRoute.result);
      }

      function namedPath() {
        let localisedPath = localisedPathName();
        if (localisedPath && !localisedPath.startsWith('/')) {
          localisedPath = '/' + localisedPath;
        }

        return basePath ? `${basePath}${localisedPath}` : localisedPath;
      }

      function routePath() {
        let routePathValue = `${basePath}/${basePathNameWithoutNamedParams()}`;
        if (routePathValue === '//') {
          routePathValue = '/';
        }

        if (routePathLanguage) {
          pathNames = removeExtraPaths(pathNames, localisedRouteWithoutNamedParams());
        }

        const namedParams = getNamedParams(localisedPathName());
        if (namedParams && namedParams.length > 0) {
          namedParams.forEach(function () {
            if (pathNames.length > 0) {
              routePathValue += `/${pathNames.shift()}`;
            }
          });
        }

        return routePathValue;
      }

      function routeLanguage() {
        return routePathLanguage;
      }

      function basePathSameAsLocalised() {
        return basePathNameWithoutNamedParams() === localisedRouteWithoutNamedParams();
      }

      return Object.freeze({
        basePathSameAsLocalised,
        updatedPath,
        basePathNameWithoutNamedParams,
        localisedPathName,
        localisedRouteWithoutNamedParams,
        namedPath,
        pathNames,
        routeLanguage,
        routePath,
      });
    }

    const NotFoundPage$1 = '/404.html';

    function RouterFinder({ routes, currentUrl, routerOptions, convert }) {
      const defaultLanguage = routerOptions.defaultLanguage;
      const sitePrefix = routerOptions.prefix ? routerOptions.prefix.toLowerCase() : '';
      const urlParser = parseCurrentUrl(currentUrl, sitePrefix);
      let redirectTo = '';
      let routeNamedParams = {};
      let staticParamMatch = false;

      function findActiveRoute() {
        let searchActiveRoute = searchActiveRoutes(routes, '', urlParser.pathNames, routerOptions.lang, convert);

        if (!searchActiveRoute || !Object.keys(searchActiveRoute).length || anyEmptyNestedRoutes(searchActiveRoute)) {
          if (typeof window !== 'undefined') {
            searchActiveRoute = routeNotFound(routerOptions.lang);
          }
        } else {
          searchActiveRoute.path = pathWithoutQueryParams(searchActiveRoute);
          if (sitePrefix) {
            searchActiveRoute.path = `/${sitePrefix}${searchActiveRoute.path}`;
          }
        }

        return searchActiveRoute;
      }

      /**
       * Gets an array of routes and the browser pathname and return the active route
       * @param routes
       * @param basePath
       * @param pathNames
       **/
      function searchActiveRoutes(routes, basePath, pathNames, currentLanguage, convert) {
        let currentRoute = {};
        let basePathName = pathNames.shift().toLowerCase();
        const routerPath = RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage });
        staticParamMatch = false;

        routes.forEach(function (route) {
          routerPath.updatedPath(route);

          if (matchRoute(routerPath, route.name)) {
            let routePath = routerPath.routePath();
            redirectTo = RouterRedirect(route, redirectTo).path();

            if (currentRoute.name !== routePath) {
              currentRoute = setCurrentRoute({
                route,
                routePath,
                routeLanguage: routerPath.routeLanguage(),
                urlParser,
                namedPath: routerPath.namedPath(),
              });
            }

            if (route.nestedRoutes && route.nestedRoutes.length > 0 && routerPath.pathNames.length > 0) {
              currentRoute.childRoute = searchActiveRoutes(
                route.nestedRoutes,
                routePath,
                routerPath.pathNames,
                routerPath.routeLanguage(),
                convert
              );
              currentRoute.path = currentRoute.childRoute.path;
              currentRoute.language = currentRoute.childRoute.language;
            } else if (nestedRoutesAndNoPath(route, routerPath.pathNames)) {
              const indexRoute = searchActiveRoutes(
                route.nestedRoutes,
                routePath,
                ['index'],
                routerPath.routeLanguage(),
                convert
              );
              if (indexRoute && Object.keys(indexRoute).length > 0) {
                currentRoute.childRoute = indexRoute;
                currentRoute.language = currentRoute.childRoute.language;
              }
            }
          }
        });

        if (redirectTo) {
          currentRoute.redirectTo = redirectTo;
        }

        return currentRoute;
      }

      function matchRoute(routerPath, routeName) {
        const basePathSameAsLocalised = routerPath.basePathSameAsLocalised();
        if (basePathSameAsLocalised) {
          staticParamMatch = true;
        }

        return basePathSameAsLocalised || (!staticParamMatch && startsWithNamedParam(routeName));
      }

      function nestedRoutesAndNoPath(route, pathNames) {
        return route.nestedRoutes && route.nestedRoutes.length > 0 && pathNames.length === 0;
      }

      function parseCurrentUrl(currentUrl, sitePrefix) {
        if (sitePrefix && sitePrefix.trim().length > 0) {
          const replacePattern = currentUrl.endsWith(sitePrefix) ? sitePrefix : sitePrefix + "/";
          const noPrefixUrl = currentUrl.replace(replacePattern, '');
          return UrlParser(noPrefixUrl);
        } else {
          return UrlParser(currentUrl);
        }
      }

      function setCurrentRoute({ route, routePath, routeLanguage, urlParser, namedPath }) {
        const routerRoute = RouterRoute({
          routeInfo: route,
          urlParser,
          path: routePath,
          routeNamedParams,
          namedPath,
          language: routeLanguage || defaultLanguage,
        });
        routeNamedParams = routerRoute.namedParams();

        return routerRoute.get();
      }

      const routeNotFound = (customLanguage) => {
        const custom404Page = routes.find((route) => route.name == '404');
        const language = customLanguage || defaultLanguage || '';
        if (custom404Page) {
          return { ...custom404Page, language, path: '404' };
        } else {
          return { name: '404', component: '', path: '404', redirectTo: NotFoundPage$1 };
        }
      };

      return Object.freeze({ findActiveRoute });
    }

    const NotFoundPage = '/404.html';

    let userDefinedRoutes = [];
    let routerOptions = {};
    let routerCurrent;

    /**
     * Object exposes one single property: activeRoute
     * @param routes  Array of routes
     * @param currentUrl current url
     * @param options configuration options
     **/
    const SpaRouter = (routes, currentUrl, options = {}) => {
      routerOptions = { ...options };
      if (typeof currentUrl === 'undefined' || currentUrl === '') {
        currentUrl = document.location.href;
      }

      routerCurrent = RouterCurrent(routerOptions.gaPageviews);

      currentUrl = removeSlash(currentUrl, 'trail');
      userDefinedRoutes = routes;

      const findActiveRoute = () => {
        let convert = false;

        if (routerOptions.langConvertTo) {
          routerOptions.lang = routerOptions.langConvertTo;
          convert = true;
        }

        return RouterFinder({ routes, currentUrl, routerOptions, convert }).findActiveRoute();
      };

      /**
       * Redirect current route to another
       * @param destinationUrl
       **/
      const navigateNow = (destinationUrl, updateBrowserHistory) => {
        if (typeof window !== 'undefined') {
          if (destinationUrl === NotFoundPage) {
            routerCurrent.setActive({ path: NotFoundPage }, updateBrowserHistory);
          } else {
            navigateTo(destinationUrl);
          }
        }

        return destinationUrl;
      };

      const setActiveRoute = (updateBrowserHistory = true) => {
        const currentRoute = findActiveRoute();
        if (currentRoute.redirectTo) {
          return navigateNow(currentRoute.redirectTo, updateBrowserHistory);
        }

        routerCurrent.setActive(currentRoute, updateBrowserHistory);
        activeRoute.set(currentRoute);

        return currentRoute;
      };

      return Object.freeze({
        setActiveRoute,
        findActiveRoute,
      });
    };

    /**
     * Updates the current active route and updates the browser pathname
     * @param pathName String
     * @param language String
     * @param updateBrowserHistory Boolean
     **/
    const navigateTo = (pathName, language = null, updateBrowserHistory = true) => {
      pathName = removeSlash(pathName, 'lead');

      if (language) {
        routerOptions.langConvertTo = language;
      }

      return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).setActiveRoute(
        updateBrowserHistory
      );
    };

    if (typeof window !== 'undefined') {
      // Avoid full page reload on local routes
      window.addEventListener('click', (event) => {
        if (event.target.localName.toLowerCase() !== 'a') return;
        if (event.metaKey || event.ctrlKey || event.shiftKey) return;

        const sitePrefix = routerOptions.prefix ? `/${routerOptions.prefix.toLowerCase()}` : '';
        const targetHostNameInternal = event.target.pathname && event.target.host === window.location.host;
        const prefixMatchPath = sitePrefix.length > 1 ? event.target.pathname.startsWith(sitePrefix) : true;

        if (targetHostNameInternal && prefixMatchPath) {
          event.preventDefault();
          let navigatePathname = event.target.pathname + event.target.search;

          const destinationUrl = navigatePathname + event.target.search + event.target.hash;
          if (event.target.target === '_blank') {
            window.open(destinationUrl, 'newTab');
          } else {
            navigateTo(destinationUrl);
          }
        }
      });

      window.onpopstate = function (_event) {
        let navigatePathname = window.location.pathname + window.location.search + window.location.hash;

        navigateTo(navigatePathname, null, false);
      };
    }

    // (10:34) 
    function create_if_block_2$3(ctx) {
    	let route;
    	let current;

    	route = new Route({
    			props: {
    				currentRoute: /*currentRoute*/ ctx[0].childRoute,
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route_changes = {};
    			if (dirty & /*currentRoute*/ 1) route_changes.currentRoute = /*currentRoute*/ ctx[0].childRoute;
    			if (dirty & /*params*/ 2) route_changes.params = /*params*/ ctx[1];
    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(10:34) ",
    		ctx
    	});

    	return block;
    }

    // (8:33) 
    function create_if_block_1$4(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*currentRoute*/ ctx[0].component;

    	function switch_props(ctx) {
    		return {
    			props: {
    				currentRoute: {
    					.../*currentRoute*/ ctx[0],
    					component: ''
    				},
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};

    			if (dirty & /*currentRoute*/ 1) switch_instance_changes.currentRoute = {
    				.../*currentRoute*/ ctx[0],
    				component: ''
    			};

    			if (dirty & /*params*/ 2) switch_instance_changes.params = /*params*/ ctx[1];

    			if (dirty & /*currentRoute*/ 1 && switch_value !== (switch_value = /*currentRoute*/ ctx[0].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(8:33) ",
    		ctx
    	});

    	return block;
    }

    // (6:0) {#if currentRoute.layout}
    function create_if_block$9(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*currentRoute*/ ctx[0].layout;

    	function switch_props(ctx) {
    		return {
    			props: {
    				currentRoute: { .../*currentRoute*/ ctx[0], layout: '' },
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty & /*currentRoute*/ 1) switch_instance_changes.currentRoute = { .../*currentRoute*/ ctx[0], layout: '' };
    			if (dirty & /*params*/ 2) switch_instance_changes.params = /*params*/ ctx[1];

    			if (dirty & /*currentRoute*/ 1 && switch_value !== (switch_value = /*currentRoute*/ ctx[0].layout)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(6:0) {#if currentRoute.layout}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$9, create_if_block_1$4, create_if_block_2$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*currentRoute*/ ctx[0].layout) return 0;
    		if (/*currentRoute*/ ctx[0].component) return 1;
    		if (/*currentRoute*/ ctx[0].childRoute) return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Route', slots, []);
    	let { currentRoute = {} } = $$props;
    	let { params = {} } = $$props;
    	const writable_props = ['currentRoute', 'params'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Route> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('currentRoute' in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    		if ('params' in $$props) $$invalidate(1, params = $$props.params);
    	};

    	$$self.$capture_state = () => ({ currentRoute, params });

    	$$self.$inject_state = $$props => {
    		if ('currentRoute' in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    		if ('params' in $$props) $$invalidate(1, params = $$props.params);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [currentRoute, params];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$r, create_fragment$r, safe_not_equal, { currentRoute: 0, params: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get currentRoute() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRoute(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get params() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function create_fragment$q(ctx) {
    	let route;
    	let current;

    	route = new Route({
    			props: { currentRoute: /*$activeRoute*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const route_changes = {};
    			if (dirty & /*$activeRoute*/ 1) route_changes.currentRoute = /*$activeRoute*/ ctx[0];
    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $activeRoute;
    	validate_store(activeRoute, 'activeRoute');
    	component_subscribe($$self, activeRoute, $$value => $$invalidate(0, $activeRoute = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, []);
    	let { routes = [] } = $$props;
    	let { options = {} } = $$props;

    	onMount(() => {
    		SpaRouter(routes, document.location.href, options).setActiveRoute();
    	});

    	const writable_props = ['routes', 'options'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('routes' in $$props) $$invalidate(1, routes = $$props.routes);
    		if ('options' in $$props) $$invalidate(2, options = $$props.options);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		SpaRouter,
    		Route,
    		activeRoute,
    		routes,
    		options,
    		$activeRoute
    	});

    	$$self.$inject_state = $$props => {
    		if ('routes' in $$props) $$invalidate(1, routes = $$props.routes);
    		if ('options' in $$props) $$invalidate(2, options = $$props.options);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$activeRoute, routes, options];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$q, create_fragment$q, safe_not_equal, { routes: 1, options: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get routes() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const auth = writable({
        state: "initializing-auth",
    });
    async function initAuth() {
        const client = await AuthClient.create();
        if (await client.isAuthenticated()) {
            authenticate(client);
        }
        else {
            auth.update(() => ({
                state: "anonymous",
                actor: createActor(),
                client,
            }));
        }
    }
    initAuth();
    function login() {
        const currentAuth = get_store_value(auth);
        if (currentAuth.state === "anonymous") {
            currentAuth.client.login({
                maxTimeToLive: BigInt(1800) * BigInt(1000000000),
                identityProvider: process.env.DFX_NETWORK === "ic"
                    ? "https://identity.ic0.app/#authorize"
                    : `http://${process.env.INTERNET_IDENTITY_CANISTER_ID}.localhost:8000/#authorize`,
                // `http://localhost:8000?canisterId=${process.env.INTERNET_IDENTITY_CANISTER_ID}#authorize`,
                onSuccess: () => authenticate(currentAuth.client),
            });
        }
    }
    async function logout() {
        const currentAuth = get_store_value(auth);
        if (currentAuth.state === "initialized") {
            await currentAuth.client.logout();
            auth.update(() => ({
                state: "anonymous",
                actor: createActor(),
                client: currentAuth.client,
            }));
            navigateTo("/");
        }
    }
    async function authenticate(client) {
        handleSessionTimeout();
        try {
            const actor = createActor({
                agentOptions: {
                    identity: client.getIdentity(),
                },
            });
            auth.update(() => ({
                state: "initializing-crypto",
                actor,
                client,
            }));
            const cryptoService = new CryptoService(actor);
            auth.update(() => ({
                state: "initialized",
                actor,
                client,
                crypto: cryptoService,
            }));
        }
        catch (e) {
            auth.update(() => ({
                state: "error",
                error: e.message || "An error occurred",
            }));
        }
    }
    // set a timer when the II session will expire and log the user out
    function handleSessionTimeout() {
        // upon login the localstorage items may not be set, wait for next tick
        setTimeout(() => {
            try {
                const delegation = JSON.parse(window.localStorage.getItem("ic-delegation"));
                const expirationTimeMs = Number.parseInt(delegation.delegations[0].delegation.expiration, 16) /
                    1000000;
                setTimeout(() => {
                    logout();
                }, expirationTimeMs - Date.now());
            }
            catch (error) {
                console.error("Could not handle delegation expiry.", error);
            }
        });
    }

    const file$n = "src/frontend/src/components/DisclaimerCopy.svelte";

    function create_fragment$p(ctx) {
    	let strong;
    	let t1;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "Disclaimer:";
    			t1 = text(" This sample dapp is intended exclusively for experimental\npurpose. The backend canister may be removed or reinstalled at any time without prior\nnotice. You are advised not to use this dapp for storing your critical data such\nas keys or passwords.");
    			add_location(strong, file$n, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DisclaimerCopy', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DisclaimerCopy> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class DisclaimerCopy extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DisclaimerCopy",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    const file$m = "src/frontend/src/components/Spinner.svelte";

    function create_fragment$o(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "inline-block h-4 w-4 rounded-full mr-2 border-2 animate-spin border-b-current border-r-current border-t-transparent border-l-transparent");
    			add_location(span, file$m, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Spinner', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Spinner> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Spinner extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$o, create_fragment$o, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Spinner",
    			options,
    			id: create_fragment$o.name
    		});
    	}
    }

    const file$l = "src/frontend/src/components/Hero.svelte";

    // (36:39) 
    function create_if_block_3$2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "An error occurred.";
    			attr_dev(div, "class", "text-lg font-semibold mt-8");
    			add_location(div, file$l, 36, 8, 1298);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(36:39) ",
    		ctx
    	});

    	return block;
    }

    // (32:43) 
    function create_if_block_2$2(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Login to Store and Share your IP";
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$l, 32, 8, 1131);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[1], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(32:43) ",
    		ctx
    	});

    	return block;
    }

    // (27:47) 
    function create_if_block_1$3(ctx) {
    	let div;
    	let spinner;
    	let t;
    	let current;
    	spinner = new Spinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(spinner.$$.fragment);
    			t = text("\n          Synchronizing... Please keep the app open on a device that's already added.");
    			attr_dev(div, "class", "text-lg font-semibold");
    			add_location(div, file$l, 27, 8, 920);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(spinner, div, null);
    			append_dev(div, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(spinner);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(27:47) ",
    		ctx
    	});

    	return block;
    }

    // (22:6) {#if auth.state === 'initializing-auth' || auth.state === 'initializing-crypto'}
    function create_if_block$8(ctx) {
    	let div;
    	let spinner;
    	let t;
    	let current;
    	spinner = new Spinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(spinner.$$.fragment);
    			t = text("\n          Initializing...");
    			attr_dev(div, "class", "text-lg font-semibold mt-8");
    			add_location(div, file$l, 22, 8, 760);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(spinner, div, null);
    			append_dev(div, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(spinner);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(22:6) {#if auth.state === 'initializing-auth' || auth.state === 'initializing-crypto'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let div4;
    	let div2;
    	let div1;
    	let h1;
    	let t1;
    	let p0;
    	let t3;
    	let p1;
    	let t5;
    	let current_block_type_index;
    	let if_block;
    	let t6;
    	let div0;
    	let disclaimercopy;
    	let t7;
    	let div3;
    	let img0;
    	let img0_src_value;
    	let t8;
    	let img1;
    	let img1_src_value;
    	let current;
    	const if_block_creators = [create_if_block$8, create_if_block_1$3, create_if_block_2$2, create_if_block_3$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*auth*/ ctx[0].state === 'initializing-auth' || /*auth*/ ctx[0].state === 'initializing-crypto') return 0;
    		if (/*auth*/ ctx[0].state === 'synchronizing') return 1;
    		if (/*auth*/ ctx[0].state === 'anonymous') return 2;
    		if (/*auth*/ ctx[0].state === 'error') return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	disclaimercopy = new DisclaimerCopy({ $$inline: true });

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Mini IP Manager";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "Your private IP Docs on the Internet Computer.";
    			t3 = space();
    			p1 = element("p");
    			p1.textContent = "A safe place to store and share your personal IP.";
    			t5 = space();
    			if (if_block) if_block.c();
    			t6 = space();
    			div0 = element("div");
    			create_component(disclaimercopy.$$.fragment);
    			t7 = space();
    			div3 = element("div");
    			img0 = element("img");
    			t8 = space();
    			img1 = element("img");
    			attr_dev(h1, "class", "mb-5 text-4xl sm:text-5xl font-bold text-primary dark:text-white");
    			add_location(h1, file$l, 9, 6, 332);
    			attr_dev(p0, "class", "mb-5 text-xl font-semibold");
    			add_location(p0, file$l, 14, 6, 467);
    			attr_dev(p1, "class", "mb-5");
    			add_location(p1, file$l, 17, 6, 578);
    			attr_dev(div0, "class", "text-xs mt-8 sm:mt-12 opacity-75 mb-12 sm:mb-32");
    			add_location(div0, file$l, 39, 6, 1382);
    			attr_dev(div1, "class", "max-w-xl ");
    			add_location(div1, file$l, 8, 4, 302);
    			attr_dev(div2, "class", "text-center hero-content ");
    			add_location(div2, file$l, 7, 2, 258);
    			if (!src_url_equal(img0.src, img0_src_value = "/img/ic-badge-powered-by-crypto_label-stripe-white-text.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Powered by the Internet Computer");
    			attr_dev(img0, "class", "hidden dark:inline h-4");
    			add_location(img0, file$l, 45, 4, 1579);
    			if (!src_url_equal(img1.src, img1_src_value = "/img/ic-badge-powered-by-crypto_label-stripe-dark-text.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Powered by the Internet Computer");
    			attr_dev(img1, "class", "dark:hidden inline h-4");
    			add_location(img1, file$l, 50, 4, 1749);
    			attr_dev(div3, "class", "fixed bottom-0 text-center left-0 right-0 pb-4 sm:pb-8");
    			add_location(div3, file$l, 44, 2, 1506);
    			attr_dev(div4, "class", "hero min-h-screen pt-8 sm:pt-0 content-start sm:content-center");
    			add_location(div4, file$l, 6, 0, 179);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h1);
    			append_dev(div1, t1);
    			append_dev(div1, p0);
    			append_dev(div1, t3);
    			append_dev(div1, p1);
    			append_dev(div1, t5);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			append_dev(div1, t6);
    			append_dev(div1, div0);
    			mount_component(disclaimercopy, div0, null);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div3, img0);
    			append_dev(div3, t8);
    			append_dev(div3, img1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div1, t6);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(disclaimercopy.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(disclaimercopy.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(disclaimercopy);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Hero', slots, []);
    	let { auth } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (auth === undefined && !('auth' in $$props || $$self.$$.bound[$$self.$$.props['auth']])) {
    			console.warn("<Hero> was created without expected prop 'auth'");
    		}
    	});

    	const writable_props = ['auth'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Hero> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => login();

    	$$self.$$set = $$props => {
    		if ('auth' in $$props) $$invalidate(0, auth = $$props.auth);
    	};

    	$$self.$capture_state = () => ({ login, DisclaimerCopy, Spinner, auth });

    	$$self.$inject_state = $$props => {
    		if ('auth' in $$props) $$invalidate(0, auth = $$props.auth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [auth, click_handler];
    }

    class Hero extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$n, create_fragment$n, safe_not_equal, { auth: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Hero",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get auth() {
    		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set auth(value) {
    		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function noteFromContent(content, tags, self_principal) {
        const title = extractTitle(content);
        const creationTime = Date.now();
        return {
            id: BigInt(0),
            title,
            content,
            tags,
            owner: self_principal.toString(),
            users: [],
            createdAt: creationTime,
            updatedAt: creationTime,
            locked: false,
            history: [],
        };
    }
    async function serialize(note, cryptoService) {
        const data = {
            title: note.title,
            createdAt: note.createdAt,
            updatedAt: note.updatedAt,
            tags: note.tags,
        };
        const serializableNote = {
            content: note.content,
        };
        const encryptedNote = await cryptoService.encryptWithNoteKey(note.id, note.owner, JSON.stringify(serializableNote));
        return {
            id: note.id,
            encrypted_text: encryptedNote,
            data: JSON.stringify(data),
            owner: note.owner,
            users: note.users.map((user) => ({
                name: user.name ? [user.name] : [],
                when: user.when ? [user.when] : [],
            })),
            history: [],
            created_at: BigInt(note.createdAt * 1000000),
            updated_at: BigInt(note.updatedAt * 1000000),
            locked: note.locked,
        };
    }
    async function deserialize(enote, cryptoService) {
        const serializedNote = await cryptoService.decryptWithNoteKey(enote.id, enote.owner, enote.encrypted_text);
        const deserializedNote = JSON.parse(serializedNote);
        const data = JSON.parse(enote.data);
        return Object.assign(Object.assign(Object.assign({ id: enote.id, owner: enote.owner, users: enote.users.map((user) => ({
                name: user.name[0] || null,
                when: user.when[0] || null,
            })) }, deserializedNote), data), { history: enote.history.map((entry) => ({
                action: entry.action,
                user: entry.user.length > 0 ? entry.user[0] : null,
                when: entry.when.length > 0 ? Number(entry.when[0] / BigInt(1000000)) : null,
                createdAt: Number(entry.created_at / BigInt(1000000)),
            })), createdAt: Number(enote.created_at / BigInt(1000000)), updatedAt: Number(enote.updated_at / BigInt(1000000)), locked: enote.locked });
    }
    function summarize(note, maxLength = 50) {
        const div = document.createElement("div");
        div.innerHTML = note.content;
        let text = div.innerText;
        const title = extractTitleFromDomEl(div);
        if (title) {
            text = text.replace(title, "");
        }
        return text.slice(0, maxLength) + (text.length > maxLength ? "..." : "");
    }
    function extractTitleFromDomEl(el) {
        var _a;
        const title = el.querySelector("h1");
        if (title) {
            return title.innerText;
        }
        const blockElements = el.querySelectorAll("h1,h2,p,li");
        for (const el of blockElements) {
            if (((_a = el.innerText) === null || _a === void 0 ? void 0 : _a.trim().length) > 0) {
                return el.innerText.trim();
            }
        }
        return "";
    }
    function extractTitle(html) {
        const div = document.createElement("div");
        div.innerHTML = html;
        return extractTitleFromDomEl(div);
    }

    const notesStore = writable({ state: "uninitialized" });
    let notePollerHandle;
    async function decryptNotes(notes, cryptoService) {
        // When notes are initially created, they do not have (and cannot have) any
        // (encrypted) content yet because the note ID, which is needed to retrieve
        // the note-specific encryption key, is not known yet before the note is
        // created because the note ID is a return value of the call to create a note.
        // The (encrypted) note content is stored in the backend only by a second call
        // to the backend that updates the note's conent directly after the note is
        // created. This means that there is a short period of time where the note
        // already exists but doesn't have any (encrypted) content yet.
        // To avoid decryption errors for these notes, we skip deserializing (and thus
        // decrypting) these notes here.
        const notes_with_content = notes.filter((note) => note.encrypted_text !== "");
        return await Promise.all(notes_with_content.map((encryptedNote) => deserialize(encryptedNote, cryptoService)));
    }
    function updateNotes(notes) {
        notesStore.set({
            state: "loaded",
            list: notes,
        });
    }
    async function refreshNotes(actor, cryptoService) {
        const encryptedNotes = await actor.get_notes();
        const notes = await decryptNotes(encryptedNotes, cryptoService);
        updateNotes(notes);
    }
    async function addNote(note, actor, crypto) {
        const new_id = await actor.create_note();
        note.id = new_id;
        const { encrypted_text: encryptedNote, data } = await serialize(note, crypto);
        await actor.update_note(new_id, data, encryptedNote);
    }
    async function updateNote(note, actor, crypto) {
        const { encrypted_text: encryptedNote, data } = await serialize(note, crypto);
        await actor.update_note(note.id, data, encryptedNote);
    }
    async function addUser(id, user, when, actor) {
        await actor.add_user(id, {
            name: user ? [user] : [],
            when: when ? [when] : [],
        });
    }
    async function removeUser(id, user, actor) {
        await actor.remove_user(id, user ? [user] : []);
    }
    auth.subscribe(async ($auth) => {
        if ($auth.state === "initialized") {
            if (notePollerHandle !== null) {
                clearInterval(notePollerHandle);
                notePollerHandle = null;
            }
            notesStore.set({
                state: "loading",
            });
            try {
                await refreshNotes($auth.actor, $auth.crypto).catch((e) => showError(e, "Could not poll notes."));
                notePollerHandle = setInterval(async () => {
                    await refreshNotes($auth.actor, $auth.crypto).catch((e) => showError(e, "Could not poll notes."));
                }, 3000);
            }
            catch (_a) {
                notesStore.set({
                    state: "error",
                });
            }
        }
        else if ($auth.state === "anonymous" && notePollerHandle !== null) {
            clearInterval(notePollerHandle);
            notePollerHandle = null;
            notesStore.set({
                state: "uninitialized",
            });
        }
    });

    // Just work with plain objects and arrays
    function cloneDeep(value) {
        if (!value)
            return value;
        if (typeof value.toJSON === 'function')
            value = value.toJSON();
        if (Array.isArray(value))
            return value.map(cloneDeep);
        if (typeof value === 'object') {
            const clone = {};
            Object.keys(value).forEach(key => clone[key] = cloneDeep(value[key]));
            return clone;
        }
        return value;
    }

    function intersect(value, other) {
        const obj = {};
        Object.keys(value).forEach(key => {
            if (value[key] === other[key])
                obj[key] = value[key];
        });
        return obj;
    }

    const EMPTY_OBJ$3 = {};
    function isEqual(value, other, options = EMPTY_OBJ$3) {
        if (value === other)
            return true;
        const valueType = typeof value;
        const otherType = typeof value;
        // Special case for NaN
        if (valueType === 'number' && otherType === 'number' && isNaN(value) && isNaN(other))
            return true;
        // If a basic type or not the same class
        if (!value || !other || valueType !== 'object' || otherType !== 'object' || value.constructor !== other.constructor) {
            return false;
        }
        // Dates
        if (value.valueOf() !== value) {
            return isEqual(value.valueOf(), other.valueOf(), options);
        }
        const compare = options.shallow ? exactlyEqual : isEqual;
        // Iterables including arrays
        if (typeof value[Symbol.iterator] === 'function') {
            const valueIter = value[Symbol.iterator]();
            const otherIter = other[Symbol.iterator]();
            let valueResult = valueIter.next();
            let otherResult = otherIter.next();
            while (!valueResult.done && !otherResult.done) {
                if (!compare(valueResult.value, otherResult.value, options))
                    return false;
                valueResult = valueIter.next();
                otherResult = otherIter.next();
            }
            return valueResult.done === otherResult.done;
        }
        // Objects
        let valueKeys = Object.keys(value);
        let otherKeys = Object.keys(other);
        if (options.excludeProps) {
            const isIncluded = createIsIncluded(options.excludeProps);
            valueKeys = valueKeys.filter(isIncluded);
            otherKeys = otherKeys.filter(isIncluded);
        }
        return (options.partial || valueKeys.length === otherKeys.length)
            && otherKeys.every(key => value.hasOwnProperty(key) && compare(other[key], value[key], options));
    }
    function exactlyEqual(value, other) {
        return value === other;
    }
    function createIsIncluded(excluded) {
        return (prop) => !excluded.has(prop);
    }

    /**
     * The data structure representing a diff is an array of tuples:
     * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
     * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
     */
    var DIFF_DELETE = -1;
    var DIFF_INSERT = 1;
    var DIFF_EQUAL = 0;


    /**
     * Find the differences between two texts.  Simplifies the problem by stripping
     * any common prefix or suffix off the texts before diffing.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info
     * @return {Array} Array of diff tuples.
     */
    function diff_main(text1, text2, cursor_pos, _fix_unicode) {
      // Check for equality
      if (text1 === text2) {
        if (text1) {
          return [[DIFF_EQUAL, text1]];
        }
        return [];
      }

      if (cursor_pos != null) {
        var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);
        if (editdiff) {
          return editdiff;
        }
      }

      // Trim off common prefix (speedup).
      var commonlength = diff_commonPrefix(text1, text2);
      var commonprefix = text1.substring(0, commonlength);
      text1 = text1.substring(commonlength);
      text2 = text2.substring(commonlength);

      // Trim off common suffix (speedup).
      commonlength = diff_commonSuffix(text1, text2);
      var commonsuffix = text1.substring(text1.length - commonlength);
      text1 = text1.substring(0, text1.length - commonlength);
      text2 = text2.substring(0, text2.length - commonlength);

      // Compute the diff on the middle block.
      var diffs = diff_compute_(text1, text2);

      // Restore the prefix and suffix.
      if (commonprefix) {
        diffs.unshift([DIFF_EQUAL, commonprefix]);
      }
      if (commonsuffix) {
        diffs.push([DIFF_EQUAL, commonsuffix]);
      }
      diff_cleanupMerge(diffs, _fix_unicode);
      return diffs;
    }

    /**
     * Find the differences between two texts.  Assumes that the texts do not
     * have any common prefix or suffix.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @return {Array} Array of diff tuples.
     */
    function diff_compute_(text1, text2) {
      var diffs;

      if (!text1) {
        // Just add some text (speedup).
        return [[DIFF_INSERT, text2]];
      }

      if (!text2) {
        // Just delete some text (speedup).
        return [[DIFF_DELETE, text1]];
      }

      var longtext = text1.length > text2.length ? text1 : text2;
      var shorttext = text1.length > text2.length ? text2 : text1;
      var i = longtext.indexOf(shorttext);
      if (i !== -1) {
        // Shorter text is inside the longer text (speedup).
        diffs = [
          [DIFF_INSERT, longtext.substring(0, i)],
          [DIFF_EQUAL, shorttext],
          [DIFF_INSERT, longtext.substring(i + shorttext.length)]
        ];
        // Swap insertions for deletions if diff is reversed.
        if (text1.length > text2.length) {
          diffs[0][0] = diffs[2][0] = DIFF_DELETE;
        }
        return diffs;
      }

      if (shorttext.length === 1) {
        // Single character string.
        // After the previous speedup, the character can't be an equality.
        return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
      }

      // Check to see if the problem can be split in two.
      var hm = diff_halfMatch_(text1, text2);
      if (hm) {
        // A half-match was found, sort out the return data.
        var text1_a = hm[0];
        var text1_b = hm[1];
        var text2_a = hm[2];
        var text2_b = hm[3];
        var mid_common = hm[4];
        // Send both pairs off for separate processing.
        var diffs_a = diff_main(text1_a, text2_a);
        var diffs_b = diff_main(text1_b, text2_b);
        // Merge the results.
        return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
      }

      return diff_bisect_(text1, text2);
    }

    /**
     * Find the 'middle snake' of a diff, split the problem in two
     * and return the recursively constructed diff.
     * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @return {Array} Array of diff tuples.
     * @private
     */
    function diff_bisect_(text1, text2) {
      // Cache the text lengths to prevent multiple calls.
      var text1_length = text1.length;
      var text2_length = text2.length;
      var max_d = Math.ceil((text1_length + text2_length) / 2);
      var v_offset = max_d;
      var v_length = 2 * max_d;
      var v1 = new Array(v_length);
      var v2 = new Array(v_length);
      // Setting all elements to -1 is faster in Chrome & Firefox than mixing
      // integers and undefined.
      for (var x = 0; x < v_length; x++) {
        v1[x] = -1;
        v2[x] = -1;
      }
      v1[v_offset + 1] = 0;
      v2[v_offset + 1] = 0;
      var delta = text1_length - text2_length;
      // If the total number of characters is odd, then the front path will collide
      // with the reverse path.
      var front = (delta % 2 !== 0);
      // Offsets for start and end of k loop.
      // Prevents mapping of space beyond the grid.
      var k1start = 0;
      var k1end = 0;
      var k2start = 0;
      var k2end = 0;
      for (var d = 0; d < max_d; d++) {
        // Walk the front path one step.
        for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
          var k1_offset = v_offset + k1;
          var x1;
          if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
            x1 = v1[k1_offset + 1];
          } else {
            x1 = v1[k1_offset - 1] + 1;
          }
          var y1 = x1 - k1;
          while (
            x1 < text1_length && y1 < text2_length &&
            text1.charAt(x1) === text2.charAt(y1)
          ) {
            x1++;
            y1++;
          }
          v1[k1_offset] = x1;
          if (x1 > text1_length) {
            // Ran off the right of the graph.
            k1end += 2;
          } else if (y1 > text2_length) {
            // Ran off the bottom of the graph.
            k1start += 2;
          } else if (front) {
            var k2_offset = v_offset + delta - k1;
            if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {
              // Mirror x2 onto top-left coordinate system.
              var x2 = text1_length - v2[k2_offset];
              if (x1 >= x2) {
                // Overlap detected.
                return diff_bisectSplit_(text1, text2, x1, y1);
              }
            }
          }
        }

        // Walk the reverse path one step.
        for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
          var k2_offset = v_offset + k2;
          var x2;
          if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
            x2 = v2[k2_offset + 1];
          } else {
            x2 = v2[k2_offset - 1] + 1;
          }
          var y2 = x2 - k2;
          while (
            x2 < text1_length && y2 < text2_length &&
            text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)
          ) {
            x2++;
            y2++;
          }
          v2[k2_offset] = x2;
          if (x2 > text1_length) {
            // Ran off the left of the graph.
            k2end += 2;
          } else if (y2 > text2_length) {
            // Ran off the top of the graph.
            k2start += 2;
          } else if (!front) {
            var k1_offset = v_offset + delta - k2;
            if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {
              var x1 = v1[k1_offset];
              var y1 = v_offset + x1 - k1_offset;
              // Mirror x2 onto top-left coordinate system.
              x2 = text1_length - x2;
              if (x1 >= x2) {
                // Overlap detected.
                return diff_bisectSplit_(text1, text2, x1, y1);
              }
            }
          }
        }
      }
      // Diff took too long and hit the deadline or
      // number of diffs equals number of characters, no commonality at all.
      return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    }

    /**
     * Given the location of the 'middle snake', split the diff in two parts
     * and recurse.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {number} x Index of split point in text1.
     * @param {number} y Index of split point in text2.
     * @return {Array} Array of diff tuples.
     */
    function diff_bisectSplit_(text1, text2, x, y) {
      var text1a = text1.substring(0, x);
      var text2a = text2.substring(0, y);
      var text1b = text1.substring(x);
      var text2b = text2.substring(y);

      // Compute both diffs serially.
      var diffs = diff_main(text1a, text2a);
      var diffsb = diff_main(text1b, text2b);

      return diffs.concat(diffsb);
    }

    /**
     * Determine the common prefix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the start of each
     *     string.
     */
    function diff_commonPrefix(text1, text2) {
      // Quick check for common null cases.
      if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {
        return 0;
      }
      // Binary search.
      // Performance analysis: http://neil.fraser.name/news/2007/10/09/
      var pointermin = 0;
      var pointermax = Math.min(text1.length, text2.length);
      var pointermid = pointermax;
      var pointerstart = 0;
      while (pointermin < pointermid) {
        if (
          text1.substring(pointerstart, pointermid) ==
          text2.substring(pointerstart, pointermid)
        ) {
          pointermin = pointermid;
          pointerstart = pointermin;
        } else {
          pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }

      if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {
        pointermid--;
      }

      return pointermid;
    }

    /**
     * Determine the common suffix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the end of each string.
     */
    function diff_commonSuffix(text1, text2) {
      // Quick check for common null cases.
      if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {
        return 0;
      }
      // Binary search.
      // Performance analysis: http://neil.fraser.name/news/2007/10/09/
      var pointermin = 0;
      var pointermax = Math.min(text1.length, text2.length);
      var pointermid = pointermax;
      var pointerend = 0;
      while (pointermin < pointermid) {
        if (
          text1.substring(text1.length - pointermid, text1.length - pointerend) ==
          text2.substring(text2.length - pointermid, text2.length - pointerend)
        ) {
          pointermin = pointermid;
          pointerend = pointermin;
        } else {
          pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }

      if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {
        pointermid--;
      }

      return pointermid;
    }

    /**
     * Do the two texts share a substring which is at least half the length of the
     * longer text?
     * This speedup can produce non-minimal diffs.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     text1, the suffix of text1, the prefix of text2, the suffix of
     *     text2 and the common middle.  Or null if there was no match.
     */
    function diff_halfMatch_(text1, text2) {
      var longtext = text1.length > text2.length ? text1 : text2;
      var shorttext = text1.length > text2.length ? text2 : text1;
      if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
        return null;  // Pointless.
      }

      /**
       * Does a substring of shorttext exist within longtext such that the substring
       * is at least half the length of longtext?
       * Closure, but does not reference any external variables.
       * @param {string} longtext Longer string.
       * @param {string} shorttext Shorter string.
       * @param {number} i Start index of quarter length substring within longtext.
       * @return {Array.<string>} Five element Array, containing the prefix of
       *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
       *     of shorttext and the common middle.  Or null if there was no match.
       * @private
       */
      function diff_halfMatchI_(longtext, shorttext, i) {
        // Start with a 1/4 length substring at position i as a seed.
        var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
        var j = -1;
        var best_common = '';
        var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
        while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {
          var prefixLength = diff_commonPrefix(
            longtext.substring(i), shorttext.substring(j));
          var suffixLength = diff_commonSuffix(
            longtext.substring(0, i), shorttext.substring(0, j));
          if (best_common.length < suffixLength + prefixLength) {
            best_common = shorttext.substring(
              j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
            best_longtext_a = longtext.substring(0, i - suffixLength);
            best_longtext_b = longtext.substring(i + prefixLength);
            best_shorttext_a = shorttext.substring(0, j - suffixLength);
            best_shorttext_b = shorttext.substring(j + prefixLength);
          }
        }
        if (best_common.length * 2 >= longtext.length) {
          return [
            best_longtext_a, best_longtext_b,
            best_shorttext_a, best_shorttext_b, best_common
          ];
        } else {
          return null;
        }
      }

      // First check if the second quarter is the seed for a half-match.
      var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
      // Check again based on the third quarter.
      var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
      var hm;
      if (!hm1 && !hm2) {
        return null;
      } else if (!hm2) {
        hm = hm1;
      } else if (!hm1) {
        hm = hm2;
      } else {
        // Both matched.  Select the longest.
        hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
      }

      // A half-match was found, sort out the return data.
      var text1_a, text1_b, text2_a, text2_b;
      if (text1.length > text2.length) {
        text1_a = hm[0];
        text1_b = hm[1];
        text2_a = hm[2];
        text2_b = hm[3];
      } else {
        text2_a = hm[0];
        text2_b = hm[1];
        text1_a = hm[2];
        text1_b = hm[3];
      }
      var mid_common = hm[4];
      return [text1_a, text1_b, text2_a, text2_b, mid_common];
    }

    /**
     * Reorder and merge like edit sections.  Merge equalities.
     * Any edit section can move as long as it doesn't cross an equality.
     * @param {Array} diffs Array of diff tuples.
     * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff
     */
    function diff_cleanupMerge(diffs, fix_unicode) {
      diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
      var pointer = 0;
      var count_delete = 0;
      var count_insert = 0;
      var text_delete = '';
      var text_insert = '';
      var commonlength;
      while (pointer < diffs.length) {
        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
          diffs.splice(pointer, 1);
          continue;
        }
        switch (diffs[pointer][0]) {
          case DIFF_INSERT:

            count_insert++;
            text_insert += diffs[pointer][1];
            pointer++;
            break;
          case DIFF_DELETE:
            count_delete++;
            text_delete += diffs[pointer][1];
            pointer++;
            break;
          case DIFF_EQUAL:
            var previous_equality = pointer - count_insert - count_delete - 1;
            if (fix_unicode) {
              // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,
              // we assume that the old and new text in the diff are complete and correct
              // unicode-encoded JS strings, but the tuple boundaries may fall between
              // surrogate pairs.  we fix this by shaving off stray surrogates from the end
              // of the previous equality and the beginning of this equality.  this may create
              // empty equalities or a common prefix or suffix.  for example, if AB and AC are
              // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and
              // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this
              // particular case, both equalities go away, we absorb any previous inequalities,
              // and we keep scanning for the next equality before rewriting the tuples.
              if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {
                var stray = diffs[previous_equality][1].slice(-1);
                diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);
                text_delete = stray + text_delete;
                text_insert = stray + text_insert;
                if (!diffs[previous_equality][1]) {
                  // emptied out previous equality, so delete it and include previous delete/insert
                  diffs.splice(previous_equality, 1);
                  pointer--;
                  var k = previous_equality - 1;
                  if (diffs[k] && diffs[k][0] === DIFF_INSERT) {
                    count_insert++;
                    text_insert = diffs[k][1] + text_insert;
                    k--;
                  }
                  if (diffs[k] && diffs[k][0] === DIFF_DELETE) {
                    count_delete++;
                    text_delete = diffs[k][1] + text_delete;
                    k--;
                  }
                  previous_equality = k;
                }
              }
              if (starts_with_pair_end(diffs[pointer][1])) {
                var stray = diffs[pointer][1].charAt(0);
                diffs[pointer][1] = diffs[pointer][1].slice(1);
                text_delete += stray;
                text_insert += stray;
              }
            }
            if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
              // for empty equality not at end, wait for next equality
              diffs.splice(pointer, 1);
              break;
            }
            if (text_delete.length > 0 || text_insert.length > 0) {
              // note that diff_commonPrefix and diff_commonSuffix are unicode-aware
              if (text_delete.length > 0 && text_insert.length > 0) {
                // Factor out any common prefixes.
                commonlength = diff_commonPrefix(text_insert, text_delete);
                if (commonlength !== 0) {
                  if (previous_equality >= 0) {
                    diffs[previous_equality][1] += text_insert.substring(0, commonlength);
                  } else {
                    diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);
                    pointer++;
                  }
                  text_insert = text_insert.substring(commonlength);
                  text_delete = text_delete.substring(commonlength);
                }
                // Factor out any common suffixes.
                commonlength = diff_commonSuffix(text_insert, text_delete);
                if (commonlength !== 0) {
                  diffs[pointer][1] =
                    text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                  text_insert = text_insert.substring(0, text_insert.length - commonlength);
                  text_delete = text_delete.substring(0, text_delete.length - commonlength);
                }
              }
              // Delete the offending records and add the merged ones.
              var n = count_insert + count_delete;
              if (text_delete.length === 0 && text_insert.length === 0) {
                diffs.splice(pointer - n, n);
                pointer = pointer - n;
              } else if (text_delete.length === 0) {
                diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);
                pointer = pointer - n + 1;
              } else if (text_insert.length === 0) {
                diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);
                pointer = pointer - n + 1;
              } else {
                diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);
                pointer = pointer - n + 2;
              }
            }
            if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {
              // Merge this equality with the previous one.
              diffs[pointer - 1][1] += diffs[pointer][1];
              diffs.splice(pointer, 1);
            } else {
              pointer++;
            }
            count_insert = 0;
            count_delete = 0;
            text_delete = '';
            text_insert = '';
            break;
        }
      }
      if (diffs[diffs.length - 1][1] === '') {
        diffs.pop();  // Remove the dummy entry at the end.
      }

      // Second pass: look for single edits surrounded on both sides by equalities
      // which can be shifted sideways to eliminate an equality.
      // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
      var changes = false;
      pointer = 1;
      // Intentionally ignore the first and last element (don't need checking).
      while (pointer < diffs.length - 1) {
        if (diffs[pointer - 1][0] === DIFF_EQUAL &&
          diffs[pointer + 1][0] === DIFF_EQUAL) {
          // This is a single edit surrounded by equalities.
          if (diffs[pointer][1].substring(diffs[pointer][1].length -
            diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {
            // Shift the edit over the previous equality.
            diffs[pointer][1] = diffs[pointer - 1][1] +
              diffs[pointer][1].substring(0, diffs[pointer][1].length -
                diffs[pointer - 1][1].length);
            diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
            diffs.splice(pointer - 1, 1);
            changes = true;
          } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
            diffs[pointer + 1][1]) {
            // Shift the edit over the next equality.
            diffs[pointer - 1][1] += diffs[pointer + 1][1];
            diffs[pointer][1] =
              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
              diffs[pointer + 1][1];
            diffs.splice(pointer + 1, 1);
            changes = true;
          }
        }
        pointer++;
      }
      // If shifts were made, the diff needs reordering and another shift sweep.
      if (changes) {
        diff_cleanupMerge(diffs, fix_unicode);
      }
    }
    function is_surrogate_pair_start(charCode) {
      return charCode >= 0xD800 && charCode <= 0xDBFF;
    }

    function is_surrogate_pair_end(charCode) {
      return charCode >= 0xDC00 && charCode <= 0xDFFF;
    }

    function starts_with_pair_end(str) {
      return is_surrogate_pair_end(str.charCodeAt(0));
    }

    function ends_with_pair_start(str) {
      return is_surrogate_pair_start(str.charCodeAt(str.length - 1));
    }

    function remove_empty_tuples(tuples) {
      var ret = [];
      for (var i = 0; i < tuples.length; i++) {
        if (tuples[i][1].length > 0) {
          ret.push(tuples[i]);
        }
      }
      return ret;
    }

    function make_edit_splice(before, oldMiddle, newMiddle, after) {
      if (ends_with_pair_start(before) || starts_with_pair_end(after)) {
        return null;
      }
      return remove_empty_tuples([
        [DIFF_EQUAL, before],
        [DIFF_DELETE, oldMiddle],
        [DIFF_INSERT, newMiddle],
        [DIFF_EQUAL, after]
      ]);
    }

    function find_cursor_edit_diff(oldText, newText, cursor_pos) {
      // note: this runs after equality check has ruled out exact equality
      var oldRange = typeof cursor_pos === 'number' ?
        { index: cursor_pos, length: 0 } : cursor_pos.oldRange;
      var newRange = typeof cursor_pos === 'number' ?
        null : cursor_pos.newRange;
      // take into account the old and new selection to generate the best diff
      // possible for a text edit.  for example, a text change from "xxx" to "xx"
      // could be a delete or forwards-delete of any one of the x's, or the
      // result of selecting two of the x's and typing "x".
      var oldLength = oldText.length;
      var newLength = newText.length;
      if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {
        // see if we have an insert or delete before or after cursor
        var oldCursor = oldRange.index;
        var oldBefore = oldText.slice(0, oldCursor);
        var oldAfter = oldText.slice(oldCursor);
        var maybeNewCursor = newRange ? newRange.index : null;
        editBefore: {
          // is this an insert or delete right before oldCursor?
          var newCursor = oldCursor + newLength - oldLength;
          if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {
            break editBefore;
          }
          if (newCursor < 0 || newCursor > newLength) {
            break editBefore;
          }
          var newBefore = newText.slice(0, newCursor);
          var newAfter = newText.slice(newCursor);
          if (newAfter !== oldAfter) {
            break editBefore;
          }
          var prefixLength = Math.min(oldCursor, newCursor);
          var oldPrefix = oldBefore.slice(0, prefixLength);
          var newPrefix = newBefore.slice(0, prefixLength);
          if (oldPrefix !== newPrefix) {
            break editBefore;
          }
          var oldMiddle = oldBefore.slice(prefixLength);
          var newMiddle = newBefore.slice(prefixLength);
          return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);
        }
        editAfter: {
          // is this an insert or delete right after oldCursor?
          if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {
            break editAfter;
          }
          var cursor = oldCursor;
          var newBefore = newText.slice(0, cursor);
          var newAfter = newText.slice(cursor);
          if (newBefore !== oldBefore) {
            break editAfter;
          }
          var suffixLength = Math.min(oldLength - cursor, newLength - cursor);
          var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);
          var newSuffix = newAfter.slice(newAfter.length - suffixLength);
          if (oldSuffix !== newSuffix) {
            break editAfter;
          }
          var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);
          var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);
          return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);
        }
      }
      if (oldRange.length > 0 && newRange && newRange.length === 0) {
        replaceRange: {
          // see if diff could be a splice of the old selection range
          var oldPrefix = oldText.slice(0, oldRange.index);
          var oldSuffix = oldText.slice(oldRange.index + oldRange.length);
          var prefixLength = oldPrefix.length;
          var suffixLength = oldSuffix.length;
          if (newLength < prefixLength + suffixLength) {
            break replaceRange;
          }
          var newPrefix = newText.slice(0, prefixLength);
          var newSuffix = newText.slice(newLength - suffixLength);
          if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {
            break replaceRange;
          }
          var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);
          var newMiddle = newText.slice(prefixLength, newLength - suffixLength);
          return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);
        }
      }

      return null;
    }

    function diff(text1, text2, cursor_pos) {
      // only pass fix_unicode=true at the top level, not when diff_main is
      // recursively invoked
      return diff_main(text1, text2, cursor_pos, true);
    }

    diff.INSERT = DIFF_INSERT;
    diff.DELETE = DIFF_DELETE;
    diff.EQUAL = DIFF_EQUAL;

    var diff_1 = diff;

    var diff$1 = /*@__PURE__*/getDefaultExportFromCjs(diff_1);

    const dispatcherEvents = new WeakMap();
    const onceListeners = new WeakMap();
    class EventDispatcher {
        on(type, listener, options) {
            this.addEventListener(type, listener, options);
        }
        off(type, listener, options) {
            this.removeEventListener(type, listener, options);
        }
        addEventListener(type, listener, options) {
            if (options === null || options === void 0 ? void 0 : options.once)
                listener = getOnceListener(this, type, listener, true);
            getEventListeners(this, type, true).add(listener);
        }
        removeEventListener(type, listener, options) {
            if (options === null || options === void 0 ? void 0 : options.once)
                listener = getOnceListener(this, type, listener);
            if (!listener)
                return;
            const events = getEventListeners(this, type);
            events && events.delete(listener);
        }
        dispatchEvent(event, catchErrors) {
            const events = getEventListeners(this, event.type);
            if (!events)
                return;
            for (let listener of events) {
                if (catchErrors) {
                    try {
                        listener.call(this, event);
                    }
                    catch (err) {
                        try {
                            this.dispatchEvent(new ErrorEvent('error', { error: err }));
                        }
                        catch (err) { }
                    }
                }
                else {
                    listener.call(this, event);
                }
                if (event.cancelBubble)
                    break;
            }
        }
    }
    function getEventListeners(obj, type, autocreate = false) {
        let events = dispatcherEvents.get(obj);
        if (!events && autocreate)
            dispatcherEvents.set(obj, events = Object.create(null));
        return events && events[type] || autocreate && (events[type] = new Set());
    }
    function getOnceListener(obj, type, listener, autocreate = false) {
        let events = onceListeners.get(obj);
        if (!events && autocreate)
            dispatcherEvents.set(obj, events = Object.create(null));
        const map = events && events[type] || autocreate && (events[type] = new Map());
        if (!map.has(listener) && autocreate) {
            const wrapper = event => {
                const events = getEventListeners(obj, type);
                events && events.delete(listener);
                listener.call(obj, event);
            };
            map.set(listener, wrapper);
        }
        return map && map.get(listener);
    }

    var AttributeMap;
    (function (AttributeMap) {
        function compose(a = {}, b = {}, keepNull) {
            if (typeof a !== 'object') {
                a = {};
            }
            if (typeof b !== 'object') {
                b = {};
            }
            let attributes = cloneDeep(b);
            for (const key in a) {
                if (isObject(a[key]) && isObject(attributes[key])) {
                    attributes[key] = compose(a[key], attributes[key], keepNull);
                }
            }
            if (!keepNull) {
                attributes = Object.keys(attributes).reduce((copy, key) => {
                    if (attributes[key] != null) {
                        copy[key] = attributes[key];
                    }
                    return copy;
                }, {});
            }
            for (const key in a) {
                if (a[key] !== undefined && b[key] === undefined) {
                    attributes[key] = a[key];
                }
            }
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.compose = compose;
        function diff(a = {}, b = {}) {
            if (typeof a !== 'object') {
                a = {};
            }
            if (typeof b !== 'object') {
                b = {};
            }
            const attributes = Object.keys(a)
                .concat(Object.keys(b))
                .reduce((attrs, key) => {
                if (!isEqual(a[key], b[key])) {
                    if (b[key] === undefined) {
                        attrs[key] = null;
                    }
                    else if (isObject(a[key]) && isObject(b[key])) {
                        attrs[key] = diff(a[key], b[key]);
                    }
                    else {
                        attrs[key] = b[key];
                    }
                }
                return attrs;
            }, {});
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.diff = diff;
        function invert(attr = {}, base = {}) {
            attr = attr || {};
            const baseInverted = Object.keys(base).reduce((memo, key) => {
                if (!isEqual(base[key], attr[key]) && attr[key] !== undefined) {
                    if (isObject(attr[key]) && isObject(base[key])) {
                        memo[key] = invert(attr[key], base[key]);
                    }
                    else {
                        memo[key] = base[key];
                    }
                }
                return memo;
            }, {});
            return Object.keys(attr).reduce((memo, key) => {
                if (attr[key] !== base[key] && base[key] === undefined) {
                    memo[key] = null;
                }
                return memo;
            }, baseInverted);
        }
        AttributeMap.invert = invert;
        function transform(a, b, priority = false) {
            if (typeof a !== 'object') {
                return b;
            }
            if (typeof b !== 'object') {
                return undefined;
            }
            if (!priority) {
                return b; // b simply overwrites us without priority
            }
            const attributes = Object.keys(b).reduce((attrs, key) => {
                if (a[key] === undefined) {
                    attrs[key] = b[key]; // null is a valid value
                }
                else if (isObject(a[key]) && isObject(b[key])) {
                    attrs[key] = transform(a[key], b[key], true);
                }
                return attrs;
            }, {});
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.transform = transform;
    })(AttributeMap || (AttributeMap = {}));
    function isObject(value) {
        return value === Object(value) && !Array.isArray(value);
    }
    var AttributeMap$1 = AttributeMap;

    var Op;
    (function (Op) {
        function iterator(ops) {
            return new OpIterator(ops);
        }
        Op.iterator = iterator;
        function length(op) {
            if (typeof op.delete === 'number') {
                return op.delete;
            }
            else if (typeof op.retain === 'number') {
                return op.retain;
            }
            else {
                return typeof op.insert === 'string' ? op.insert.length : 1;
            }
        }
        Op.length = length;
    })(Op || (Op = {}));
    var Op$1 = Op;
    class OpIterator {
        constructor(ops) {
            this.ops = ops;
            this.index = 0;
            this.offset = 0;
        }
        hasNext() {
            return !!this.peek();
        }
        next(length) {
            if (!length) {
                length = Infinity;
            }
            const nextOp = this.ops[this.index];
            if (nextOp) {
                const offset = this.offset;
                const opLength = Op.length(nextOp);
                if (length >= opLength - offset) {
                    length = opLength - offset;
                    this.index += 1;
                    this.offset = 0;
                }
                else {
                    this.offset += length;
                }
                if (typeof nextOp.delete === 'number') {
                    return { delete: length };
                }
                else {
                    if (opLength === length)
                        return nextOp;
                    const retOp = {};
                    if (nextOp.attributes) {
                        retOp.attributes = nextOp.attributes;
                    }
                    if (typeof nextOp.retain === 'number') {
                        retOp.retain = length;
                    }
                    else if (typeof nextOp.insert === 'string') {
                        retOp.insert = nextOp.insert.substr(offset, length);
                    }
                    else {
                        // offset should === 0, length should === 1
                        retOp.insert = nextOp.insert;
                    }
                    return retOp;
                }
            }
            else {
                return { retain: Infinity };
            }
        }
        peek() {
            return this.ops[this.index];
        }
        peekLength() {
            if (this.ops[this.index]) {
                // Should never return 0 if our index is being managed correctly
                return Op.length(this.ops[this.index]) - this.offset;
            }
            else {
                return Infinity;
            }
        }
        peekType() {
            if (this.ops[this.index]) {
                if (typeof this.ops[this.index].delete === 'number') {
                    return 'delete';
                }
                else if (typeof this.ops[this.index].retain === 'number') {
                    return 'retain';
                }
                else {
                    return 'insert';
                }
            }
            return 'retain';
        }
        rest() {
            if (!this.hasNext()) {
                return [];
            }
            else if (this.offset === 0) {
                return this.ops.slice(this.index);
            }
            else {
                const offset = this.offset;
                const index = this.index;
                const next = this.next();
                const rest = this.ops.slice(this.index);
                this.offset = offset;
                this.index = index;
                return [next].concat(rest);
            }
        }
    }

    const NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()
    class Delta {
        constructor(ops) {
            // Assume we are given a well formed ops
            if (Array.isArray(ops)) {
                this.ops = ops;
            }
            else if (ops != null && Array.isArray(ops.ops)) {
                this.ops = ops.ops;
            }
            else {
                this.ops = [];
            }
        }
        insert(arg, attributes) {
            const newOp = {};
            if (typeof arg === 'string' && arg.length === 0) {
                return this;
            }
            newOp.insert = arg;
            if (attributes != null &&
                typeof attributes === 'object' &&
                Object.keys(attributes).length > 0) {
                newOp.attributes = attributes;
            }
            return this.push(newOp);
        }
        delete(length) {
            if (length <= 0) {
                return this;
            }
            return this.push({ delete: length });
        }
        retain(length, attributes) {
            if (length <= 0) {
                return this;
            }
            const newOp = { retain: length };
            if (attributes != null &&
                typeof attributes === 'object' &&
                Object.keys(attributes).length > 0) {
                newOp.attributes = attributes;
            }
            return this.push(newOp);
        }
        push(newOp) {
            let index = this.ops.length;
            let lastOp = this.ops[index - 1];
            if (typeof lastOp === 'object') {
                if (typeof newOp.delete === 'number' &&
                    typeof lastOp.delete === 'number') {
                    this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };
                    return this;
                }
                // Since it does not matter if we insert before or after deleting at the same index,
                // always prefer to insert first
                if (typeof lastOp.delete === 'number' && newOp.insert != null) {
                    index -= 1;
                    lastOp = this.ops[index - 1];
                    if (typeof lastOp !== 'object') {
                        this.ops.unshift(newOp);
                        return this;
                    }
                }
                if (isEqual(newOp.attributes, lastOp.attributes)) {
                    if (typeof newOp.insert === 'string' &&
                        typeof lastOp.insert === 'string') {
                        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
                        if (typeof newOp.attributes === 'object') {
                            this.ops[index - 1].attributes = newOp.attributes;
                        }
                        return this;
                    }
                    else if (typeof newOp.retain === 'number' &&
                        typeof lastOp.retain === 'number') {
                        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
                        if (typeof newOp.attributes === 'object') {
                            this.ops[index - 1].attributes = newOp.attributes;
                        }
                        return this;
                    }
                }
            }
            if (index === this.ops.length) {
                this.ops.push(newOp);
            }
            else {
                this.ops.splice(index, 0, newOp);
            }
            return this;
        }
        chop() {
            const lastOp = this.ops[this.ops.length - 1];
            if (lastOp && lastOp.retain && !lastOp.attributes) {
                this.ops.pop();
            }
            return this;
        }
        filter(predicate) {
            return this.ops.filter(predicate);
        }
        forEach(predicate) {
            this.ops.forEach(predicate);
        }
        map(predicate) {
            return this.ops.map(predicate);
        }
        partition(predicate) {
            const passed = [];
            const failed = [];
            this.forEach((op) => {
                const target = predicate(op) ? passed : failed;
                target.push(op);
            });
            return [passed, failed];
        }
        reduce(predicate, initialValue) {
            return this.ops.reduce(predicate, initialValue);
        }
        changeLength() {
            return this.reduce((length, elem) => {
                if (elem.insert) {
                    return length + Op$1.length(elem);
                }
                else if (elem.delete) {
                    return length - elem.delete;
                }
                return length;
            }, 0);
        }
        length() {
            return this.reduce((length, elem) => {
                return length + Op$1.length(elem);
            }, 0);
        }
        slice(start = 0, end = Infinity) {
            const ops = [];
            const iter = Op$1.iterator(this.ops);
            let index = 0;
            while (index < end && iter.hasNext()) {
                let nextOp;
                if (index < start) {
                    nextOp = iter.next(start - index);
                }
                else {
                    nextOp = iter.next(end - index);
                    ops.push(nextOp);
                }
                index += Op$1.length(nextOp);
            }
            return new Delta(ops);
        }
        compose(other, discardNull) {
            const thisIter = Op$1.iterator(this.ops);
            const otherIter = Op$1.iterator(other.ops);
            const ops = [];
            const firstOther = otherIter.peek();
            if (firstOther != null &&
                typeof firstOther.retain === 'number' &&
                firstOther.attributes == null) {
                let firstLeft = firstOther.retain;
                while (thisIter.peekType() === 'insert' &&
                    thisIter.peekLength() <= firstLeft) {
                    firstLeft -= thisIter.peekLength();
                    ops.push(thisIter.next());
                }
                if (firstOther.retain - firstLeft > 0) {
                    otherIter.next(firstOther.retain - firstLeft);
                }
            }
            const delta = new Delta(ops);
            while (thisIter.hasNext() || otherIter.hasNext()) {
                if (otherIter.peekType() === 'insert') {
                    delta.push(otherIter.next());
                }
                else if (thisIter.peekType() === 'delete') {
                    delta.push(thisIter.next());
                }
                else {
                    const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                    const thisOp = thisIter.next(length);
                    const otherOp = otherIter.next(length);
                    if (typeof otherOp.retain === 'number') {
                        let newOp;
                        // Preserve null when composing with a retain, otherwise remove it for inserts
                        const attributes = otherOp.attributes && AttributeMap$1.compose(thisOp.attributes, otherOp.attributes, !discardNull && typeof thisOp.retain === 'number');
                        if (otherOp.attributes && !isEqual(attributes, thisOp.attributes)) {
                            newOp = {};
                            if (typeof thisOp.retain === 'number') {
                                newOp.retain = length;
                            }
                            else {
                                newOp.insert = thisOp.insert;
                            }
                            if (attributes) {
                                newOp.attributes = attributes;
                            }
                        }
                        else if (thisOp.retain === Infinity) {
                            newOp = otherOp;
                        }
                        else {
                            newOp = thisOp;
                        }
                        delta.push(newOp);
                        // Optimization if rest of other is just retain
                        if (otherOp.retain === Infinity ||
                            !otherIter.hasNext() &&
                                isEqual(delta.ops[delta.ops.length - 1], newOp)) {
                            const rest = new Delta(thisIter.rest());
                            return delta.concat(rest).chop();
                        }
                        // Other op should be delete, we could be an insert or retain
                        // Insert + delete cancels out
                    }
                    else if (typeof otherOp.delete === 'number' &&
                        typeof thisOp.retain === 'number') {
                        delta.push(otherOp);
                    }
                }
            }
            return delta.chop();
        }
        concat(other) {
            const delta = new Delta(this.ops.slice());
            if (other.ops.length > 0) {
                delta.push(other.ops[0]);
                delta.ops = delta.ops.concat(other.ops.slice(1));
            }
            return delta;
        }
        diff(other, cursor) {
            if (this.ops === other.ops) {
                return new Delta();
            }
            const strings = [this, other].map((delta) => {
                return delta
                    .map((op) => {
                    if (op.insert != null) {
                        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
                    }
                    const prep = delta === other ? 'on' : 'with';
                    throw new Error('diff() called ' + prep + ' non-document');
                })
                    .join('');
            });
            const retDelta = new Delta();
            const diffResult = diff$1(strings[0], strings[1], cursor);
            const thisIter = Op$1.iterator(this.ops);
            const otherIter = Op$1.iterator(other.ops);
            diffResult.forEach((component) => {
                let length = component[1].length;
                while (length > 0) {
                    let opLength = 0;
                    switch (component[0]) {
                        case diff$1.INSERT:
                            opLength = Math.min(otherIter.peekLength(), length);
                            retDelta.push(otherIter.next(opLength));
                            break;
                        case diff$1.DELETE:
                            opLength = Math.min(length, thisIter.peekLength());
                            thisIter.next(opLength);
                            retDelta.delete(opLength);
                            break;
                        case diff$1.EQUAL:
                            opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                            const thisOp = thisIter.next(opLength);
                            const otherOp = otherIter.next(opLength);
                            if (isEqual(thisOp.insert, otherOp.insert)) {
                                retDelta.retain(opLength, AttributeMap$1.diff(thisOp.attributes, otherOp.attributes));
                            }
                            else {
                                retDelta.push(otherOp).delete(opLength);
                            }
                            break;
                    }
                    length -= opLength;
                }
            });
            return retDelta.chop();
        }
        eachLine(predicate, newline = '\n') {
            const iter = Op$1.iterator(this.ops);
            let line = new Delta();
            let i = 0;
            while (iter.hasNext()) {
                if (iter.peekType() !== 'insert') {
                    return;
                }
                const thisOp = iter.peek();
                const start = Op$1.length(thisOp) - iter.peekLength();
                const index = typeof thisOp.insert === 'string'
                    ? thisOp.insert.indexOf(newline, start) - start
                    : -1;
                if (index < 0) {
                    line.push(iter.next());
                }
                else if (index > 0) {
                    line.push(iter.next(index));
                }
                else {
                    if (predicate(line, iter.next(1).attributes || {}, i) === false) {
                        return;
                    }
                    i += 1;
                    line = new Delta();
                }
            }
            if (line.length() > 0) {
                predicate(line, {}, i, true);
            }
        }
        invert(base) {
            const inverted = new Delta();
            this.reduce((baseIndex, op) => {
                if (op.insert) {
                    inverted.delete(Op$1.length(op));
                }
                else if (op.retain && op.attributes == null) {
                    inverted.retain(op.retain);
                    return baseIndex + op.retain;
                }
                else if (op.delete || (op.retain && op.attributes)) {
                    const length = (op.delete || op.retain);
                    const slice = base.slice(baseIndex, baseIndex + length);
                    slice.forEach((baseOp) => {
                        if (op.delete) {
                            inverted.push(baseOp);
                        }
                        else if (op.retain && op.attributes) {
                            inverted.retain(Op$1.length(baseOp), AttributeMap$1.invert(op.attributes, baseOp.attributes));
                        }
                    });
                    return baseIndex + length;
                }
                return baseIndex;
            }, 0);
            return inverted.chop();
        }
        transform(arg, priority = false) {
            priority = !!priority;
            if (typeof arg === 'number') {
                return this.transformPosition(arg, priority);
            }
            const other = arg;
            const thisIter = Op$1.iterator(this.ops);
            const otherIter = Op$1.iterator(other.ops);
            const delta = new Delta();
            while (thisIter.hasNext() || otherIter.hasNext()) {
                if (thisIter.peekType() === 'insert' &&
                    (priority || otherIter.peekType() !== 'insert')) {
                    delta.retain(Op$1.length(thisIter.next()));
                }
                else if (otherIter.peekType() === 'insert') {
                    delta.push(otherIter.next());
                }
                else {
                    const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                    const thisOp = thisIter.next(length);
                    const otherOp = otherIter.next(length);
                    if (thisOp.delete) {
                        // Our delete either makes their delete redundant or removes their retain
                        continue;
                    }
                    else if (otherOp.delete) {
                        delta.push(otherOp);
                    }
                    else {
                        // We retain either their retain or insert
                        delta.retain(length, AttributeMap$1.transform(thisOp.attributes, otherOp.attributes, priority));
                    }
                }
            }
            return delta.chop();
        }
        transformPosition(index, priority = false) {
            priority = !!priority;
            const thisIter = Op$1.iterator(this.ops);
            let offset = 0;
            while (thisIter.hasNext() && offset <= index) {
                const length = thisIter.peekLength();
                const nextType = thisIter.peekType();
                thisIter.next();
                if (nextType === 'delete') {
                    index -= Math.min(length, index - offset);
                    continue;
                }
                else if (nextType === 'insert' && (offset < index || !priority)) {
                    index += length;
                }
                offset += length;
            }
            return index;
        }
    }
    Delta.Op = Op$1;
    Delta.AttributeMap = AttributeMap$1;

    // Put it in document order (lower number first)
    function normalizeRange(range) {
        if (!range)
            return range;
        if (range[0] > range[1])
            range = [range[1], range[0]];
        return range;
    }

    function deltaToText(delta) {
        return delta.map(op => typeof op.insert === 'string' ? op.insert : op.insert ? ' ' : '').join('');
    }

    const EMPTY_MAP = new Map();
    const INFINITY = {
        id: '',
        attributes: {},
        content: new Delta([{ retain: Infinity }]),
        length: Infinity
    };
    var Line;
    (function (Line) {
        function iterator(lines, lineIds) {
            return new LineIterator(lines, lineIds);
        }
        Line.iterator = iterator;
        function linesToLineIds(lines) {
            const lineIds = new Map();
            lines.forEach(line => lineIds.set(line.id || Line.createId(lineIds), line));
            return lineIds;
        }
        Line.linesToLineIds = linesToLineIds;
        function length(line) {
            return line.length;
        }
        Line.length = length;
        function getId(line) {
            console.warn('getId() is deprecated');
            return line.id;
        }
        Line.getId = getId;
        function equal(value, other) {
            return isEqual(value.attributes, other.attributes) && isEqual(value.content.ops, other.content.ops);
        }
        Line.equal = equal;
        function fromDelta(delta, existing) {
            const lines = [];
            const ids = new Map(existing || []);
            delta.eachLine((content, attr) => {
                const line = Line.create(content, Object.keys(attr).length ? attr : undefined, ids);
                ids.set(line.id, line);
                lines.push(line);
            });
            return lines;
        }
        Line.fromDelta = fromDelta;
        function toDelta(lines) {
            let delta = new Delta();
            lines.forEach(line => {
                delta = delta.concat(line.content);
                delta.insert('\n', line.attributes);
            });
            return delta;
        }
        Line.toDelta = toDelta;
        function create(content = new Delta(), attributes = {}, id) {
            const length = content.length() + 1;
            if (typeof id !== 'string')
                id = createId(id);
            return { id, attributes, content: content, length };
        }
        Line.create = create;
        function createFrom(line, content = new Delta(), lineIds) {
            const id = line ? line.id : createId(lineIds);
            const attributes = line ? line.attributes : {};
            return { id, attributes, content, length: 1 };
        }
        Line.createFrom = createFrom;
        function getLineRanges(lines) {
            const ranges = new Map();
            let pos = 0;
            lines.forEach(line => {
                ranges.set(line, [pos, pos += line.length]);
            });
            return ranges;
        }
        Line.getLineRanges = getLineRanges;
        function createId(existing = EMPTY_MAP) {
            let id;
            while (existing[(id = Math.random().toString(36).slice(2))])
                ;
            return id;
        }
        Line.createId = createId;
    })(Line || (Line = {}));
    var Line$1 = Line;
    class LineIterator {
        constructor(lines, lineIds) {
            this.lines = lines;
            this.index = 0;
            this.offset = 0;
            this.lineIds = lineIds ? new Map(lineIds) : Line.linesToLineIds(lines);
        }
        hasNext() {
            return !!this.peek();
        }
        next(length) {
            if (!length) {
                length = Infinity;
            }
            const nextLine = this.lines[this.index];
            if (nextLine) {
                const offset = this.offset;
                const lineLength = nextLine.length;
                if (length >= lineLength - offset) {
                    length = lineLength - offset;
                    this.index += 1;
                    this.offset = 0;
                }
                else {
                    this.offset += length;
                }
                if (offset === 0 && length >= nextLine.length) {
                    return nextLine;
                }
                else {
                    const id = offset === 0 ? nextLine.id : Line.createId(this.lineIds);
                    const partialLine = {
                        id,
                        attributes: nextLine.attributes,
                        content: nextLine.content.slice(offset, length),
                        length: length - offset
                    };
                    if (offset !== 0)
                        this.lineIds.set(id, partialLine);
                    return partialLine;
                }
            }
            else {
                return INFINITY;
            }
        }
        peek() {
            return this.lines[this.index];
        }
        peekLength() {
            if (this.lines[this.index]) {
                // Should never return 0 if our index is being managed correctly
                return this.lines[this.index].length - this.offset;
            }
            else {
                return Infinity;
            }
        }
        rest() {
            if (!this.hasNext()) {
                return [];
            }
            else if (this.offset === 0) {
                return this.lines.slice(this.index);
            }
            else {
                const offset = this.offset;
                const index = this.index;
                const next = this.next();
                const rest = this.lines.slice(this.index);
                this.offset = offset;
                this.index = index;
                return [next].concat(rest);
            }
        }
    }

    var LineOp;
    (function (LineOp) {
        function iterator(lines, lineIds) {
            return new LineOpIterator(lines, lineIds);
        }
        LineOp.iterator = iterator;
        function length(op) {
            return Op$1.length(op);
        }
        LineOp.length = length;
    })(LineOp || (LineOp = {}));
    var LineOp$1 = LineOp;
    class LineOpIterator {
        constructor(lines, lineIds) {
            this.lineIterator = Line$1.iterator(lines, lineIds);
            const line = this.lineIterator.peek();
            this.opIterator = Op$1.iterator((line === null || line === void 0 ? void 0 : line.content.ops) || []);
        }
        hasNext() {
            return this.opIterator.hasNext() || this.lineIterator.hasNext();
        }
        next(length) {
            let op = this.opIterator.next(length);
            if (op.retain === Infinity && this.lineIterator.hasNext()) {
                op = getLineOp(this.nextLine());
            }
            return op;
        }
        nextLine() {
            const line = this.lineIterator.next();
            const nextLine = this.lineIterator.peek();
            this.opIterator = new OpIterator((nextLine === null || nextLine === void 0 ? void 0 : nextLine.content.ops) || []);
            return line;
        }
        peek() {
            if (this.opIterator.hasNext() || !this.lineIterator.hasNext()) {
                return this.opIterator.peek();
            }
            else {
                return getLineOp(this.peekLine());
            }
        }
        peekLine() {
            return this.lineIterator.peek();
        }
        peekLength() {
            if (this.opIterator.hasNext() || !this.lineIterator.hasNext()) {
                return this.opIterator.peekLength();
            }
            else {
                return 1; // a newline is length 1
            }
        }
        peekLineLength() {
            return this.lineIterator.peekLength();
        }
        peekType() {
            if (this.opIterator.hasNext()) {
                return this.opIterator.peekType();
            }
            else if (this.lineIterator.hasNext()) {
                return 'insert'; // insert: '\n'
            }
            else {
                return 'retain';
            }
        }
        restCurrentLine() {
            return this.opIterator.rest();
        }
        restLines() {
            if (this.opIterator.offset) {
                this.lineIterator.next(this.opIterator.offset);
            }
            return this.lineIterator.rest();
        }
    }
    function getLineOp(line) {
        const op = { insert: '\n' };
        if (line.attributes)
            op.attributes = line.attributes;
        return op;
    }

    class TextChange {
        constructor(doc, delta = new Delta(), selection, activeFormats) {
            this._pos = 0;
            this.doc = doc;
            this.delta = delta;
            this.selection = selection;
            this.activeFormats = activeFormats;
        }
        get contentChanged() {
            return this.delta.ops.length > 0;
        }
        get selectionChanged() {
            var _a;
            return this.selection !== undefined && !isEqual(this.selection, (_a = this.doc) === null || _a === void 0 ? void 0 : _a.selection);
        }
        apply() {
            throw new Error('Must be overridden by creator of change (e.g. Editor).');
        }
        setDelta(delta) {
            this.delta = delta;
            this._pos = delta.length();
            return this;
        }
        setActiveFormats(activeFormats) {
            this.activeFormats = activeFormats;
            return this;
        }
        select(at) {
            this.selection = typeof at === 'number' ? [at, at] : at;
            return this;
        }
        delete(range, options) {
            if (!range || !this.doc)
                return this;
            let [at, to] = normalizeRange(range);
            at = Math.max(0, at);
            to = Math.min(this.doc.length - 1, to);
            if (at === to)
                return this;
            const length = to - at;
            if (this.doc.selection)
                this.selection = [at, at];
            this.compose(at, delta => delta.delete(length), length);
            const lineRange = this.doc.getLineRange(at);
            if (!(options === null || options === void 0 ? void 0 : options.dontFixNewline) && lineRange[1] <= to) {
                const format = this.doc.getLineAt(at).attributes;
                this.formatLine(to, format);
            }
            return this;
        }
        insert(at, insert, format, options) {
            if (!this.doc)
                return this;
            at = this.normalizePoint(at);
            if (this.doc.selection) {
                const end = at + (typeof insert === 'string' ? insert.length : 1);
                this.selection = [end, end];
            }
            const { id, ...lineFormat } = this.doc.getLineAt(at).attributes;
            if (typeof insert !== 'string') {
                this.compose(at, delta => delta.insert(insert, format));
            }
            else if (insert === '\n') {
                if (options === null || options === void 0 ? void 0 : options.dontFixNewline) {
                    this.compose(at, delta => delta.insert('\n', { ...format }));
                }
                else {
                    this.compose(at, delta => delta.insert('\n', lineFormat));
                    this.formatLine(at, { ...format });
                }
            }
            else {
                if (!format)
                    format = this.getFormatAt(at);
                if (insert.includes('\n')) {
                    const lines = insert.split('\n');
                    this.compose(at, delta => {
                        lines.forEach((line, i) => {
                            if (i)
                                delta.insert('\n', i === 1 ? lineFormat : {});
                            if (line.length)
                                delta.insert(line, format);
                        });
                        return delta;
                    });
                    if (lineFormat) {
                        this.formatLine(at, { ...lineFormat });
                    }
                }
                else {
                    this.compose(at, delta => delta.insert(insert, format));
                }
            }
            return this;
        }
        insertContent(at, content) {
            if (!this.doc)
                return this;
            at = this.normalizePoint(at);
            if (this.doc.selection) {
                // Ignore retain ops at the end
                const ops = content.ops.filter(op => op.delete);
                while (ops.length && ops[ops.length - 1].retain)
                    ops.pop();
                const end = at + ops.reduce((length, op) => length + Op$1.length(op), 0);
                this.selection = [end, end];
            }
            const text = deltaToText(content);
            const newlineIndex = text.indexOf('\n');
            if (newlineIndex !== -1) {
                this.formatLine(at, { ...this.doc.getLineFormat(at) });
            }
            this.compose(at, delta => delta.concat(content));
            return this;
        }
        formatText(range, format) {
            if (!this.doc)
                return this;
            range = normalizeRange(range);
            const length = range[1] - range[0];
            if (!length)
                return this;
            if (format) {
                Object.keys(format).forEach(name => format[name] === false && (format[name] = null));
            }
            // get lines for at-to and apply, skipping newlines
            this.doc.getLineRanges(range).forEach(([start, end]) => {
                start = Math.max(range[0], start);
                end = Math.min(range[1], end - 1);
                const length = end - start;
                this.compose(start, delta => delta.retain(length, format), length);
            });
            return this;
        }
        toggleTextFormat(range, format) {
            if (!this.doc)
                return this;
            if (typeof range === 'number')
                range = [range, range];
            range = normalizeRange(range);
            const existing = this.doc.getTextFormat(range);
            if (hasFormat(format, existing))
                format = AttributeMap$1.invert(format);
            return this.formatText(range, format);
        }
        formatLine(range, format, decoration) {
            if (!this.doc)
                return this;
            const doc = this.doc;
            if (typeof range === 'number')
                range = [range, range];
            range = normalizeRange(range);
            this.doc.getLineRanges(range).forEach(([start, end]) => {
                end--;
                if (!decoration) {
                    const undoFormat = AttributeMap$1.invert(doc.getLineFormat(end));
                    format = { ...undoFormat, ...format };
                }
                this.compose(end, delta => delta.retain(1, format), 1);
            });
            this.delta.chop();
            return this;
        }
        toggleLineFormat(range, format) {
            if (!this.doc)
                return this;
            if (typeof range === 'number')
                range = [range, range];
            range = normalizeRange(range);
            const existing = this.doc.getLineFormat(range);
            if (hasFormat(format, existing))
                format = AttributeMap$1.invert(format);
            return this.formatLine(range, format);
        }
        removeFormat(range) {
            if (!this.doc)
                return this;
            range = normalizeRange(range);
            const undo = AttributeMap$1.invert(this.doc.getFormats(range));
            const length = range[1] - range[0];
            return this.compose(range[0], delta => delta.retain(length, undo), length);
        }
        transform(change, priority) {
            const delta = this.delta.transform(change.delta, priority);
            const selection = change.selection && this.transformSelection(change.selection);
            return new TextChange(null, delta, selection);
        }
        transformSelection(selection, priority) {
            if (!selection)
                return selection;
            const from = this.delta.transformPosition(selection[0], priority);
            const to = this.delta.transformPosition(selection[1], priority);
            if (from === selection[0] && to === selection[1])
                return selection;
            return [from, to];
        }
        transformAgainst(delta, priority) {
            const change = delta instanceof Delta ? new TextChange(null, delta) : delta;
            return change.transform(this, !priority);
        }
        isFor(doc) {
            return this.doc === doc;
        }
        clone() {
            var _a;
            return new TextChange(this.doc, new Delta(this.delta.ops.slice()), (_a = this.selection) === null || _a === void 0 ? void 0 : _a.slice());
        }
        compose(at, applicator, length) {
            if (this._pos <= at) {
                this.delta = applicator(this.delta.retain(at - this._pos));
            }
            else {
                this.delta = this.delta.compose(applicator(new Delta().retain(at)));
            }
            this._pos = Math.max(at + (length || 0), this._pos);
            return this;
        }
        normalizePoint(at, maxLength = this.doc ? this.doc.length - 1 : 0) {
            return Math.max(0, Math.min(maxLength, at));
        }
        getFormatAt(at) {
            let format = undefined;
            if (this.doc) {
                // Only keep the format if it is present on both sides of the cursor
                const attr1 = this.doc.getTextFormat(at);
                const attr2 = this.doc.getTextFormat(at + 1);
                if (attr1 && attr2) {
                    format = attr1 === attr2 ? attr1 : intersect(attr2, Object.keys(attr1));
                }
            }
            return format;
        }
    }
    function hasFormat(format, attributes) {
        return Object.keys(format).every(name => isEqual(attributes[name], format[name]));
    }

    const EMPTY_RANGE = [0, 0];
    const EMPTY_OBJ$2 = {};
    const DELTA_CACHE = new WeakMap();
    const excludeProps = new Set(['id']);
    class TextDocument {
        constructor(lines, selection = null) {
            if (lines instanceof TextDocument) {
                this.lines = lines.lines;
                this.byId = lines.byId;
                this._ranges = lines._ranges;
                this.length = lines.length;
            }
            else {
                this.byId = new Map();
                if (Array.isArray(lines)) {
                    this.lines = lines;
                }
                else if (lines) {
                    this.lines = Line$1.fromDelta(lines);
                }
                else {
                    this.lines = [Line$1.create()];
                }
                if (!this.lines.length) {
                    this.lines.push(Line$1.create());
                }
                this.byId = Line$1.linesToLineIds(this.lines);
                // Check for line id duplicates (should never happen, indicates bug)
                this.lines.forEach(line => {
                    if (this.byId.get(line.id) !== line)
                        throw new Error('TextDocument has duplicate line ids: ' + line.id);
                });
                this._ranges = Line$1.getLineRanges(this.lines);
                this.length = this.lines.reduce((length, line) => length + line.length, 0);
            }
            this.selection = selection && selection.map(index => Math.min(this.length - 1, Math.max(0, index)));
        }
        get change() {
            const change = new TextChange(this);
            change.apply = () => this.apply(change);
            return change;
        }
        getText(range) {
            if (range)
                range = normalizeRange(range);
            return deltaToText(range ? this.slice(range[0], range[1]) : this.slice(0, this.length - 1));
        }
        getLineBy(id) {
            return this.byId.get(id);
        }
        getLineAt(at) {
            return this.lines.find(line => {
                const [start, end] = this.getLineRange(line);
                return start <= at && end > at;
            });
        }
        getLinesAt(at, encompassed) {
            let to = at;
            if (Array.isArray(at))
                [at, to] = normalizeRange(at);
            return this.lines.filter(line => {
                const [start, end] = this.getLineRange(line);
                return encompassed
                    ? start >= at && end <= to
                    : (start < to || start === at) && end > at;
            });
        }
        getLineRange(at) {
            const { lines, _ranges: lineRanges } = this;
            if (typeof at === 'number') {
                for (let i = 0; i < lines.length; i++) {
                    const range = lineRanges.get(lines[i]) || EMPTY_RANGE;
                    if (range[0] <= at && range[1] > at)
                        return range;
                }
                return EMPTY_RANGE;
            }
            else {
                if (typeof at === 'string')
                    at = this.getLineBy(at);
                return lineRanges.get(at);
            }
        }
        getLineRanges(at) {
            if (at == null) {
                return Array.from(this._ranges.values());
            }
            else {
                return this.getLinesAt(at).map(line => this.getLineRange(line));
            }
        }
        getLineFormat(at = this.selection, options) {
            let to = at;
            if (Array.isArray(at))
                [at, to] = normalizeRange(at);
            if (at === to)
                to++;
            return getAttributes$1(Line$1, this.lines, at, to, undefined, options);
        }
        getTextFormat(at = this.selection, options) {
            let to = at;
            if (Array.isArray(at))
                [at, to] = normalizeRange(at);
            if (at === to)
                at--;
            return getAttributes$1(LineOp$1, this.lines, at, to, op => op.insert !== '\n', options);
        }
        getFormats(at = this.selection, options) {
            return { ...this.getTextFormat(at, options), ...this.getLineFormat(at, options) };
        }
        slice(start = 0, end = Infinity) {
            const ops = [];
            const iter = LineOp$1.iterator(this.lines);
            let index = 0;
            while (index < end && iter.hasNext()) {
                let nextOp;
                if (index < start) {
                    nextOp = iter.next(start - index);
                }
                else {
                    nextOp = iter.next(end - index);
                    ops.push(nextOp);
                }
                index += Op$1.length(nextOp);
            }
            return new Delta(ops);
        }
        apply(change, selection, throwOnError) {
            let delta;
            if (change instanceof TextChange) {
                delta = change.delta;
                selection = change.selection;
            }
            else {
                delta = change;
            }
            // If no change, do nothing
            if (!delta.ops.length && (selection === undefined || isEqual(this.selection, selection))) {
                return this;
            }
            // Optimization for selection-only change
            if (!delta.ops.length && selection) {
                return new TextDocument(this, selection);
            }
            if (selection === undefined && this.selection) {
                selection = [delta.transformPosition(this.selection[0]), delta.transformPosition(this.selection[1])];
                // If the selection hasn't changed, keep the original reference
                if (isEqual(this.selection, selection)) {
                    selection = this.selection;
                }
            }
            const thisIter = LineOp$1.iterator(this.lines, this.byId);
            const otherIter = Op$1.iterator(delta.ops);
            let lines = [];
            const firstChange = otherIter.peek();
            if (firstChange && firstChange.retain && !firstChange.attributes) {
                let firstLeft = firstChange.retain;
                while (thisIter.peekLineLength() <= firstLeft) {
                    firstLeft -= thisIter.peekLineLength();
                    lines.push(thisIter.nextLine());
                }
                if (firstChange.retain - firstLeft > 0) {
                    otherIter.next(firstChange.retain - firstLeft);
                }
            }
            if (!thisIter.hasNext()) {
                if (throwOnError)
                    throw new Error('apply() called with change that extends beyond document');
            }
            let line = Line$1.createFrom(thisIter.peekLine());
            // let wentBeyond = false;
            function addLine(line) {
                line.length = line.content.length() + 1;
                lines.push(line);
            }
            while (thisIter.hasNext() || otherIter.hasNext()) {
                if (otherIter.peekType() === 'insert') {
                    const otherOp = otherIter.peek();
                    const index = typeof otherOp.insert === 'string' ? otherOp.insert.indexOf('\n', otherIter.offset) : -1;
                    if (index < 0) {
                        line.content.push(otherIter.next());
                    }
                    else {
                        const nextIndex = index - otherIter.offset;
                        if (nextIndex)
                            line.content.push(otherIter.next(nextIndex));
                        const newlineOp = otherIter.next(1);
                        addLine(Line$1.create(line.content, newlineOp.attributes));
                        line.content = new Delta();
                    }
                }
                else {
                    const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                    const thisOp = thisIter.next(length);
                    const otherOp = otherIter.next(length);
                    if (typeof thisOp.retain === 'number') {
                        if (throwOnError)
                            throw new Error('apply() called with change that extends beyond document');
                        // line.content.push({ insert: '#'.repeat(otherOp.retain || 1) });
                        // wentBeyond = true;
                        continue;
                    }
                    if (typeof otherOp.retain === 'number') {
                        const isLine = thisOp.insert === '\n';
                        let newOp = thisOp;
                        // Preserve null when composing with a retain, otherwise remove it for inserts
                        const attributes = otherOp.attributes && AttributeMap$1.compose(thisOp.attributes, otherOp.attributes);
                        if (otherOp.attributes && !isEqual(attributes, thisOp.attributes)) {
                            if (isLine) {
                                line.attributes = attributes || {};
                            }
                            else {
                                newOp = { insert: thisOp.insert };
                                if (attributes)
                                    newOp.attributes = attributes;
                            }
                        }
                        if (isLine) {
                            addLine(line);
                            line = Line$1.createFrom(thisIter.peekLine());
                        }
                        else {
                            line.content.push(newOp);
                        }
                        // Optimization if at the end of other
                        if (otherOp.retain === Infinity || !otherIter.hasNext()) {
                            if (thisIter.opIterator.index !== 0 || thisIter.opIterator.offset !== 0) {
                                const ops = thisIter.restCurrentLine();
                                for (let i = 0; i < ops.length; i++) {
                                    line.content.push(ops[i]);
                                }
                                addLine(line);
                                thisIter.nextLine();
                            }
                            lines.push(...thisIter.restLines());
                            break;
                        }
                    }
                    else if (typeof otherOp.delete === 'number') {
                        if (thisOp.insert === '\n') {
                            // Be sure a deleted line is not kept
                            line = Line$1.createFrom(thisIter.peekLine(), line.content);
                        }
                        // else ... otherOp should be a delete so we won't add the next thisOp insert
                    }
                }
            }
            // if (wentBeyond) {
            //   console.log('went beyond:', line);
            //   addLine(line);
            // }
            return new TextDocument(lines, selection);
        }
        replace(delta, selection) {
            return new TextDocument(delta, selection);
        }
        toDelta() {
            const cache = DELTA_CACHE;
            let delta = cache.get(this);
            if (!delta) {
                delta = Line$1.toDelta(this.lines);
                cache.set(this, delta);
            }
            return delta;
        }
        equals(other, options) {
            return this === other
                || ((options === null || options === void 0 ? void 0 : options.contentOnly) || isEqual(this.selection, other.selection))
                    && isEqual(this.lines, other.lines, { excludeProps });
        }
        toJSON() {
            return this.toDelta();
        }
        toString() {
            return this.lines
                .map(line => line.content
                .map(op => typeof op.insert === 'string' ? op.insert : ' ')
                .join(''))
                .join('\n') + '\n';
        }
    }
    function getAttributes$1(Type, data, from, to, filter, options) {
        const iter = Type.iterator(data);
        let attributes;
        let index = 0;
        if (iter.skip)
            index += iter.skip(from);
        while (index < to && iter.hasNext()) {
            let next = iter.next();
            index += Type.length(next);
            if (index > from && (!filter || filter(next))) {
                if (!next.attributes)
                    attributes = {};
                else if (!attributes)
                    attributes = { ...next.attributes };
                else if (options === null || options === void 0 ? void 0 : options.allFormats)
                    attributes = AttributeMap$1.compose(attributes, next.attributes);
                else
                    attributes = intersectAttributes(attributes, next.attributes, options === null || options === void 0 ? void 0 : options.nameOnly);
            }
        }
        return attributes || EMPTY_OBJ$2;
    }
    // Intersect 2 attibute maps, keeping only those that are equal in both
    function intersectAttributes(attributes, other, nameOnly) {
        return Object.keys(other).reduce(function (intersect, name) {
            if (nameOnly) {
                if (name in attributes && name in other)
                    intersect[name] = true;
            }
            else if (isEqual(attributes[name], other[name], { partial: true })) {
                intersect[name] = other[name];
            }
            else if (isEqual(other[name], attributes[name], { partial: true })) {
                intersect[name] = attributes[name];
            }
            return intersect;
        }, {});
    }

    const SVG_NS = 'http://www.w3.org/2000/svg';
    const domProps = new Set(['value', 'selected', 'checked', 'contentEditable']);
    const getKey = (vdom) => (vdom == null ? vdom : vdom.key);
    const setKey = (dom, key) => {
        if (key && key !== dom.key) {
            dom.key = key;
        }
        if (!key && dom.key) {
            delete dom.key;
        }
    };
    const listener = (event) => {
        event.currentTarget.events[event.type](event);
    };
    const patchProp = (dom, key, oldVal, newVal, isSvg) => {
        if (key === 'key') ;
        else if (key[0] === 'o' && key[1] === 'n') {
            if (!((dom.events || (dom.events = {}))[(key = key.slice(2))] = newVal)) {
                dom.removeEventListener(key, listener);
            }
            else if (!oldVal) {
                dom.addEventListener(key, listener);
            }
        }
        else if (newVal == null) {
            dom.removeAttribute(key);
        }
        else if (!isSvg && key !== 'list' && key !== 'form' && key in dom) {
            dom[key] = newVal == null ? '' : newVal;
        }
        else {
            dom.setAttribute(key, newVal);
        }
    };
    const createNode = (vdom, isSvg) => {
        if (typeof vdom === 'string') {
            return document.createTextNode(vdom);
        }
        var props = vdom.props;
        var dom = (isSvg = (isSvg || vdom.type === 'svg'))
            ? document.createElementNS(SVG_NS, vdom.type, { is: props.is })
            : document.createElement(vdom.type, { is: props.is });
        for (var k in props)
            patchProp(dom, k, null, props[k], isSvg);
        setKey(dom, getKey(vdom));
        vdom.children.forEach(kid => dom.appendChild(createNode(vdomify(kid), isSvg)));
        return dom;
    };
    const getDomProps = (dom, isSvg) => {
        const props = {};
        for (let i = 0; i < dom.attributes.length; i++) {
            const { name, value } = dom.attributes[i];
            if (name in dom && name !== 'list' && !isSvg) {
                props[name] = dom[name];
            }
            else {
                props[name] = value === '' ? true : value;
            }
        }
        return props;
    };
    const patchDom = (parent, dom, oldDom, newVdom, isSvg) => {
        if (typeof newVdom === 'string') {
            if (oldDom != null && oldDom.nodeType === Node.TEXT_NODE) {
                if (oldDom.nodeValue !== newVdom)
                    dom.nodeValue = newVdom;
            }
            else {
                dom = parent.insertBefore(createNode(newVdom, isSvg), dom);
                if (oldDom != null) {
                    parent.removeChild(oldDom);
                }
            }
        }
        else if (oldDom == null || oldDom.nodeName.toLowerCase() !== newVdom.type) {
            dom = parent.insertBefore(createNode(vdomify(newVdom), isSvg), dom);
            if (oldDom != null) {
                parent.removeChild(oldDom);
            }
        }
        else {
            var oldProps = getDomProps(oldDom, isSvg), newProps = newVdom.props;
            isSvg = isSvg || newVdom.type === 'svg';
            for (var i in { ...oldProps, ...newProps }) {
                if ((domProps.has(i)
                    ? dom[i]
                    : oldProps[i]) !== newProps[i]) {
                    patchProp(dom, i, oldProps[i], newProps[i], isSvg);
                }
            }
            setKey(dom, newVdom.key);
            patchChildren(dom, newVdom.children, isSvg);
        }
        return dom;
    };
    const patchChildren = (dom, newVKids, isSvg, oldKids = Array.from(dom.childNodes)) => {
        var tmpKid, oldKid, oldKey, newKey, oldHead = 0, newHead = 0, oldTail = oldKids.length - 1, newTail = newVKids.length - 1;
        // Patch children with the same key from the beginning until they diverge
        while (newHead <= newTail && oldHead <= oldTail) {
            if ((oldKey = getKey(oldKids[oldHead])) == null ||
                oldKey !== getKey(newVKids[newHead])) {
                break;
            }
            patchDom(dom, oldKids[oldHead], oldKids[oldHead++], (newVKids[newHead] = vdomify(newVKids[newHead++])), isSvg);
        }
        // Patch children with the same key backwards from the end until they diverge
        while (newHead <= newTail && oldHead <= oldTail) {
            if ((oldKey = getKey(oldKids[oldTail])) == null ||
                oldKey !== getKey(newVKids[newTail])) {
                break;
            }
            // Update the reference for insertBefore references
            oldKids[oldTail] = patchDom(dom, oldKids[oldTail], oldKids[oldTail--], (newVKids[newTail] = vdomify(newVKids[newTail--])), isSvg);
        }
        if (oldHead > oldTail) {
            // All old matched, so new nodes were inserted
            const insertBefore = oldKids[oldHead] || (oldKids[oldHead - 1] && oldKids[oldHead - 1].nextSibling || null);
            while (newHead <= newTail) {
                dom.insertBefore(createNode((newVKids[newHead] = vdomify(newVKids[newHead++])), isSvg), insertBefore);
            }
        }
        else if (newHead > newTail) {
            // All new matched, so extra old nodes needing to be removed
            while (oldHead <= oldTail) {
                dom.removeChild(oldKids[oldHead++]);
            }
        }
        else {
            // 1 or more from old and new need to be removed/added
            // cache old keys to their dom
            const oldKeyed = new Map();
            const newKeyed = new Set();
            for (let i = oldHead; i <= oldTail; i++) {
                if ((oldKey = getKey(oldKids[i])) != null) {
                    oldKeyed.set(oldKey, oldKids[i]);
                }
            }
            // Go through the rest of the new to add/update them
            while (newHead <= newTail) {
                oldKey = getKey((oldKid = oldKids[oldHead]));
                newKey = getKey((newVKids[newHead] = vdomify(newVKids[newHead])));
                // If the old key was placed somewhere else already, or the new key is after this old one, remove it
                if (newKeyed.has(oldKey) ||
                    (newKey != null && newKey === getKey(oldKids[oldHead + 1]))) {
                    if (oldKey == null) {
                        dom.removeChild(oldKid);
                    }
                    oldHead++;
                    continue;
                }
                if (newKey == null) {
                    if (oldKey == null) {
                        // Both keys are null, just patch it
                        patchDom(dom, oldKid, oldKid, newVKids[newHead], isSvg);
                        newHead++;
                    }
                    // otherwise move on, we'll remove this old one below when we iterate through oldKeyed
                    oldHead++;
                }
                else {
                    if (oldKey === newKey) {
                        // They match, just patch them (incr newHead below)
                        patchDom(dom, oldKid, oldKid, newVKids[newHead], isSvg);
                        newKeyed.add(newKey);
                        oldHead++;
                    }
                    else {
                        if ((tmpKid = oldKeyed.get(newKey)) != null) {
                            // If the matching old node is in the dom already, pull it into this location and patch it
                            patchDom(dom, dom.insertBefore(tmpKid, oldKid), tmpKid, newVKids[newHead], isSvg);
                            newKeyed.add(newKey);
                        }
                        else {
                            // This is a new item and there is no old or the old no longer belongs, patch it in, leaving oldKid
                            patchDom(dom, oldKid, null, newVKids[newHead], isSvg);
                        }
                    }
                    newHead++;
                }
            }
            while (oldHead <= oldTail) {
                if (getKey((oldKid = oldKids[oldHead++])) == null) {
                    dom.removeChild(oldKid);
                }
            }
            for (const [key, node] of oldKeyed) {
                if (!newKeyed.has(key)) {
                    dom.removeChild(node);
                }
            }
        }
        return dom;
    };
    const vdomify = (vdom) => vdom !== true && vdom !== false && vdom ? vdom : '';
    const createVdom = (type, props, children, key) => ({
        type,
        props,
        children,
        key,
    });
    const h = (type, props, ch) => typeof type === 'function'
        ? type(props || {}, ch)
        : createVdom(type, props || {}, Array.isArray(ch) ? ch : ch == null ? [] : [ch], props === null || props === void 0 ? void 0 : props.key);
    const patch = (dom, vdom, oldKids) => {
        if (Array.isArray(vdom)) {
            dom = patchChildren(dom, vdom, dom instanceof window.SVGElement, oldKids);
        }
        else {
            dom = patchDom(dom.parentNode, dom, dom, vdom);
        }
        return dom;
    };

    const EMPTY_ARR$2 = [];
    const lineTypes = {};
    const formatTypes = {};
    const embedTypes = {};
    const shouldCombine = (prev, next) => true;
    class Typeset {
        constructor(types) {
            var _a, _b, _c;
            const lines = (_a = types.lines) === null || _a === void 0 ? void 0 : _a.map(entry => typeof entry === 'string' ? lineTypes[entry] : entry).filter(Boolean);
            const formats = (_b = types.formats) === null || _b === void 0 ? void 0 : _b.map(entry => typeof entry === 'string' ? formatTypes[entry] : entry).filter(Boolean);
            const embeds = (_c = types.embeds) === null || _c === void 0 ? void 0 : _c.map(entry => typeof entry === 'string' ? embedTypes[entry] : entry).filter(Boolean);
            this.lines = new Types(lines || EMPTY_ARR$2);
            this.formats = new Types(formats || EMPTY_ARR$2);
            this.embeds = new Types(embeds || EMPTY_ARR$2);
        }
    }
    Typeset.line = line;
    Typeset.format = format$1;
    Typeset.embed = embed;
    function line(type) {
        if (type.renderMultiple && !type.shouldCombine)
            type.shouldCombine = shouldCombine;
        return lineTypes[type.name] = type;
    }
    function format$1(type) {
        return formatTypes[type.name] = type;
    }
    function embed(type) {
        return embedTypes[type.name] = type;
    }
    /**
     * A type store to hold types and make it easy to manage them.
     */
    class Types {
        constructor(types) {
            this.list = types;
            this.init();
        }
        get default() {
            return this.list[0];
        }
        init() {
            this.selector = this.list.map(type => type.selector || '').filter(Boolean).join(', ');
            this.types = this.list.reduce((types, type) => { types[type.name] = type; return types; }, {});
            this.priorities = this.list.reduce((priorities, type, i) => { priorities[type.name] = i; return priorities; }, {});
        }
        add(type) {
            this.list.push(type);
            this.init();
        }
        remove(type) {
            const name = typeof type === 'string' ? type : type.name;
            this.list = this.list.filter(type => type.name !== name);
            this.init();
        }
        get(name) {
            return this.types[name];
        }
        priority(name) {
            // Attribute keys that do not have types assigned to them need a default sorting value.
            // A default value of -1 means that "loose" attribute keys do not corrupt priority sorting
            //   and are sorted to the back of the list in rendering.ts::renderInline()
            const priority = this.priorities[name];
            return priority !== undefined ? priority : -1;
        }
        // Whether or not the provided element is one of our types
        matches(node) {
            if (!node)
                return false;
            if (!node.nodeType)
                throw new Error('Cannot match against ' + node);
            if (node.nodeType === Node.ELEMENT_NODE) {
                return this.selector ? node.matches(this.selector) : false;
            }
        }
        findByNode(node, fallbackToDefault = false) {
            if (node.nodeType !== Node.ELEMENT_NODE)
                return;
            let i = this.list.length;
            while (i--) {
                let type = this.list[i];
                if (node.matches(type.selector))
                    return type;
            }
            if (fallbackToDefault)
                return this.default;
        }
        findByAttributes(attributes, fallbackToDefault = false) {
            const keys = attributes && Object.keys(attributes);
            let type;
            keys && keys.every(name => !(type = this.get(name)));
            return type || (fallbackToDefault ? this.default : undefined);
        }
    }

    const endInSemicolon = /;\s*$/;
    const formatDecoration = {
        name: 'decoration',
        selector: 'span.format.decoration',
        fromDom: false,
        render: (attributes, children) => {
            return applyDecorations(h('span', {}, children), attributes, ['format', 'decoration']);
        }
    };
    const embedDecoration = {
        name: 'decoration',
        selector: '.embed.decoration',
        fromDom: false,
        noFill: true,
        render: (attributes, children) => {
            const classes = 'embed decoration';
            const { name: type, ...props } = attributes.decoration;
            props.class = props.class ? classes + ' ' + props.class : classes;
            return h(type || 'span', props, children);
        }
    };
    class DecorateEvent extends Event {
        constructor(type, init) {
            super(type, init);
            this.old = init.old;
            this.doc = init.doc;
            this.change = init.change;
            this.changedLines = init.changedLines;
        }
    }
    function decorations(editor) {
        editor.typeset.formats.add(formatDecoration);
        editor.typeset.embeds.add(embedDecoration);
        const decorations = new Map();
        let original = editor.doc;
        let old = original;
        let doc = original;
        let decorating = false;
        editor.on('change', onChange);
        editor.on('render', onRender);
        function getDecorator(name) {
            if (!name)
                throw new TypeError('A decoration name is required');
            const decoration = decorations.get(name);
            return new Decorator(name, editor.doc, decoration, apply, removeDecorations);
        }
        function removeDecorations(name) {
            var _a, _b;
            if (!name)
                throw new TypeError('A decoration name is required');
            const decoration = decorations.get(name);
            if (!decoration)
                return false;
            const inverted = invert(name, decoration, original);
            decorations.delete(name);
            if (!decorations.size) {
                doc = original;
            }
            else {
                doc = doc.apply(inverted);
            }
            if (!decorating) {
                (_a = editor.modules.rendering) === null || _a === void 0 ? void 0 : _a.render({ old, doc });
                (_b = editor.modules.selection) === null || _b === void 0 ? void 0 : _b.renderSelection();
            }
            return true;
        }
        function clearDecorations() {
            if (decorations.size) {
                decorations.clear();
            }
            doc = original;
        }
        function apply(name, delta) {
            var _a, _b;
            const existing = decorations.get(name);
            const decoration = existing ? existing.compose(delta, true) : delta;
            if (isEqual(decoration, existing) || (!existing && !decoration.ops.length))
                return;
            if (!decoration.ops.length) {
                decorations.delete(name);
            }
            else {
                decorations.set(name, decoration);
            }
            doc = decorations.size ? doc.apply(delta, null) : original;
            if (!decorating) {
                (_a = editor.modules.rendering) === null || _a === void 0 ? void 0 : _a.render({ old, doc });
                (_b = editor.modules.selection) === null || _b === void 0 ? void 0 : _b.renderSelection();
            }
        }
        function onChange(event) {
            const { change, changedLines } = event;
            original = event.doc;
            if (change) {
                if (change.contentChanged) {
                    for (let [key, decoration] of decorations) {
                        decoration = change.delta.transform(decoration, true);
                        if (decoration.ops.length)
                            decorations.set(key, decoration);
                        else
                            decorations.delete(key); // all content with decoration was deleted
                    }
                    doc = decorations.size ? doc.apply(change.delta, null) : original;
                    if (decorations.size) {
                        // Ensure the id of each line is the same
                        doc.lines.forEach((line, i) => {
                            const origLine = original.lines[i];
                            if (line !== origLine && line.id !== origLine.id) {
                                line.id = origLine.id;
                            }
                        });
                    }
                }
            }
            else {
                clearDecorations();
            }
            gatherDecorations(change, changedLines);
        }
        function gatherDecorations(change, changedLines) {
            const init = { old, doc: original, change, changedLines };
            decorating = true;
            editor.dispatchEvent(new DecorateEvent('decorate', init));
            decorating = false;
        }
        function onRender() {
            old = doc; // Update old after a render
        }
        return {
            get old() { return old; },
            get doc() { return doc; },
            getDecorator,
            removeDecorations,
            clearDecorations,
            gatherDecorations,
            init() {
                gatherDecorations();
            },
            destroy() {
                editor.off('change', onChange);
                editor.off('render', onRender);
            }
        };
    }
    class Decorator {
        constructor(name, doc, decoration, apply, remove) {
            this._name = name;
            this._doc = doc;
            this.change = new TextChange(doc);
            this._decoration = decoration;
            this._apply = apply;
            this._remove = remove;
        }
        hasDecorations() {
            return !!this._decoration && this._decoration.ops.length > 0 || this.change.delta.ops.length > 0;
        }
        getDecoration() {
            return this._decoration ? this._decoration.compose(this.change.delta) : this.change.delta;
        }
        apply() {
            return this._apply(this._name, this.change.delta);
        }
        remove() {
            return this._remove(this._name);
        }
        clear(range) {
            if (!this.hasDecorations())
                return this;
            if (!range) {
                this.change.setDelta(this.invert());
            }
            else {
                this.change.setDelta(this.change.delta.compose(this.invert(range)));
            }
            return this;
        }
        clearLines(lines) {
            if (!lines.length)
                return this;
            const doc = this._doc;
            const range = [doc.getLineRange(lines[0])[0], doc.getLineRange(lines[lines.length - 1])[1]];
            const contiguous = lines.length === 1 || lines.every((line, i) => !i || doc.getLineRange(lines[i - 1])[1] === doc.getLineRange(line)[0]);
            if (contiguous) {
                return this.clear(range);
            }
            const inverted = this.invert(range);
            const delta = new Delta();
            let pos = 0;
            lines.forEach(line => {
                const [start, end] = doc.getLineRange(line);
                delta.retain(start - pos).concat(inverted.slice(start, end));
                pos = end;
            });
            this.change.setDelta(this.change.delta.compose(delta));
            return this;
        }
        // Clear line of these decorations at position, by id, or by instance
        clearLine(value) {
            const doc = this._doc;
            const line = typeof value === 'number'
                ? doc.getLineAt(value)
                : typeof value === 'string'
                    ? doc.getLineBy(value)
                    : value;
            return this.clearLines([line]);
        }
        invert(range) {
            if (!this._decoration)
                return new Delta();
            return invert(this._name, this._decoration, this._doc, range);
        }
        decorateText(range, decoration = { class: this._name }) {
            this.change.formatText(range, { decoration: { [this._name]: decoration } });
            return this;
        }
        decorateLine(range, decoration = { class: this._name }) {
            this.change.formatLine(range, { decoration: { [this._name]: decoration } }, true);
            return this;
        }
        insertDecoration(at, decoration = { class: this._name }) {
            if (typeof decoration === 'string') {
                throw new Error('You may only insert embed decorations');
            }
            this.change.insert(at, { decoration });
            return this;
        }
    }
    function applyDecorations(vnode, attributes, defaultClasses) {
        if (!attributes || !attributes.decoration)
            return vnode;
        const classes = new Set(defaultClasses);
        let styles = '';
        let props = vnode.props;
        Object.values(attributes.decoration).forEach((decorations) => {
            const { class: className, style, ...attributes } = decorations;
            if (className)
                classes.add(className.trim());
            if (style)
                styles += style.trim();
            if (styles && !endInSemicolon.test(styles))
                styles += ';';
            props = { ...attributes, ...props };
        });
        const className = Array.from(classes).join(' ').trim();
        if (className)
            props.class = props.class ? props.class + ' ' + className : className;
        if (styles)
            props.style = props.style ? props.style + ';' + styles : styles;
        vnode.props = props;
        return vnode;
    }
    function invert(name, delta, doc, range) {
        let docDelta = doc.toDelta();
        if (range) {
            docDelta = docDelta.slice(range[0], range[1]);
            delta = delta.slice(range[0], range[1]);
        }
        delta = delta.invert(docDelta);
        delta.ops.forEach(op => {
            var _a;
            if (((_a = op.attributes) === null || _a === void 0 ? void 0 : _a.decoration) === null) {
                op.attributes.decoration = { [name]: null };
            }
        });
        if (range) {
            delta = new Delta().retain(range[0]).concat(delta);
        }
        return delta;
    }

    const EMPTY_ARR$1 = [];
    const BR = h('br', {});
    const nodeFormatType = new WeakMap();
    const linesType = new WeakMap();
    const linesMultiples = new WeakMap();
    const linesCombined = new WeakMap();
    const nodeRanges = new WeakMap();
    function getLineNodeStart(root, node) {
        var _a, _b;
        return (_b = (_a = nodeRanges.get(root)) === null || _a === void 0 ? void 0 : _a.get(node)) === null || _b === void 0 ? void 0 : _b[0];
    }
    function getLineNodeEnd(root, node) {
        var _a, _b;
        return (_b = (_a = nodeRanges.get(root)) === null || _a === void 0 ? void 0 : _a.get(node)) === null || _b === void 0 ? void 0 : _b[1];
    }
    function setLineNodesRanges(editor) {
        const { root, doc } = editor;
        const combined = combineLines(editor, doc.lines);
        const ranges = new WeakMap();
        for (let i = 0; i < root.children.length; i++) {
            const child = root.children[i];
            if (!child.key)
                continue;
            const entry = combined.byKey[child.key];
            if (!entry)
                continue;
            if (Array.isArray(entry)) {
                // set the range for the entire combined section
                ranges.set(child, [doc.getLineRange(entry[0])[0], doc.getLineRange(entry[entry.length - 1])[1]]);
                // set the ranges for each line inside
                const lineElements = child.querySelectorAll(editor.typeset.lines.selector);
                for (let i = 0; i < lineElements.length; i++) {
                    const lineElement = lineElements[i];
                    const line = doc.getLineBy(lineElement.key);
                    if (!line)
                        continue;
                    ranges.set(lineElement, doc.getLineRange(line));
                }
            }
            else {
                ranges.set(child, doc.getLineRange(entry));
            }
        }
        const lineElements = root.querySelectorAll(editor.typeset.lines.selector);
        for (let i = 0; i < lineElements.length; i++) {
            const lineElement = lineElements[i];
            if (ranges.has(lineElement) || !lineElement.key)
                continue;
            const line = doc.getLineBy(lineElement.key);
            ranges.set(lineElement, doc.getLineRange(line));
        }
        nodeRanges.set(root, ranges);
    }
    function render(editor, doc) {
        const { root } = editor;
        editor.dispatchEvent(new Event('rendering'));
        patch(root, renderDoc(editor, doc));
        setLineNodesRanges(editor);
        editor.dispatchEvent(new Event('render'));
        editor.dispatchEvent(new Event('rendered'));
    }
    function renderChanges(editor, oldDoc, newDoc) {
        const { root } = editor;
        // Ranges of line indexes, not document indexes
        const oldCombined = combineLines(editor, oldDoc.lines).combined;
        const newCombined = combineLines(editor, newDoc.lines).combined;
        const [oldRange, newRange] = getChangedRanges(oldCombined, newCombined);
        // If the changes include added or deleted lines, expand ranges by 1 on each side to ensure the vdom can rerender
        if (!isEqual(oldRange, newRange)) {
            oldRange[0] = Math.max(0, oldRange[0] - 1);
            newRange[0] = Math.max(0, newRange[0] - 1);
            oldRange[1] = Math.min(oldCombined.length, oldRange[1] + 1);
            newRange[1] = Math.min(newCombined.length, newRange[1] + 1);
            if (root.childNodes.length !== oldCombined.length) {
                // The DOM has changed since we last rendered, adjust the oldRange accordingly to get the correct slice
                oldRange[1] += root.childNodes.length - oldCombined.length;
            }
        }
        const oldSlice = Array.from(root.childNodes).slice(oldRange[0], oldRange[1]);
        const newSlice = newCombined.slice(newRange[0], newRange[1]);
        if (!oldSlice.length && !newSlice.length)
            return render(editor, newDoc);
        editor.dispatchEvent(new Event('rendering'));
        patch(root, renderCombined(editor, newSlice), oldSlice);
        setLineNodesRanges(editor);
        editor.dispatchEvent(new Event('render'));
        editor.dispatchEvent(new Event('rendered'));
    }
    function renderDoc(editor, doc, forHTML) {
        return renderCombined(editor, combineLines(editor, doc.lines).combined, forHTML);
    }
    function renderCombined(editor, combined, forHTML) {
        return combined.map(line => renderLine(editor, line, forHTML)).filter(Boolean);
    }
    function renderLine(editor, line, forHTML) {
        return Array.isArray(line) ? renderMultiLine(editor, line, forHTML) : renderSingleLine(editor, line, forHTML);
    }
    function renderSingleLine(editor, line, forHTML) {
        const type = getLineType(editor, line);
        if (!type.render)
            throw new Error('No render method defined for line');
        const node = type.render(line.attributes, renderInline(editor, line.content), editor, forHTML);
        applyDecorations(node, line.attributes);
        node.key = line.id;
        return node;
    }
    function renderMultiLine(editor, lines, forHTML) {
        const type = getLineType(editor, lines[0]);
        if (!type.renderMultiple)
            throw new Error('No render method defined for line');
        const node = type.renderMultiple(lines.map(line => [line.attributes, renderInline(editor, line.content), line.id]), editor, forHTML);
        node.key = lines[0].id;
        return node;
    }
    // Join multi-lines into arrays. Memoize the results.
    function combineLines(editor, lines) {
        const cache = linesCombined.get(lines);
        if (cache)
            return cache;
        const combined = [];
        const byKey = {};
        let collect = [];
        lines.forEach((line, i) => {
            const type = getLineType(editor, line);
            if (type.shouldCombine) {
                collect.push(line);
                const next = lines[i + 1];
                if (!next || getLineType(editor, next) !== type || !type.shouldCombine(line.attributes, next.attributes)) {
                    // By keeping the last array reference we can optimize updates
                    const last = linesMultiples.get(collect[0]);
                    if (last && last.length === collect.length && collect.every((v, i) => last[i] === v)) {
                        collect = last;
                    }
                    else {
                        linesMultiples.set(collect[0], collect);
                    }
                    combined.push(collect);
                    byKey[collect[0].id] = collect;
                    collect = [];
                }
            }
            else if (type.render) {
                combined.push(line);
                byKey[line.id] = line;
            }
        });
        const data = { combined, byKey };
        linesCombined.set(lines, data);
        return data;
    }
    // Most changes will occur to adjacent lines, so the simplistic approach
    function getChangedRanges(oldC, newC) {
        const oldLength = oldC.length;
        const newLength = newC.length;
        const minLength = Math.min(oldLength, newLength);
        let oldStart = 0, oldEnd = 0, newStart = 0, newEnd = 0;
        for (let i = 0; i < minLength; i++) {
            if (!isSame(oldC[i], newC[i])) {
                oldStart = newStart = i;
                break;
            }
        }
        for (let i = 0; i < minLength; i++) {
            if (!isSame(oldC[oldLength - i - 1], newC[newLength - i - 1])) {
                oldEnd = oldLength - i;
                newEnd = newLength - i;
                break;
            }
        }
        return [[oldStart, oldEnd], [newStart, newEnd]];
    }
    function renderInline(editor, delta, forHTML) {
        const { formats, embeds } = editor.typeset;
        let inlineChildren = [];
        let trailingBreak = true;
        delta.ops.forEach((op, i, array) => {
            let children = [];
            if (typeof op.insert === 'string') {
                const prev = array[i - 1];
                const next = array[i + 1];
                let str = op.insert.replace(/  /g, '\xA0 ').replace(/  /g, ' \xA0');
                if (!prev || typeof prev.insert === 'object')
                    str = str.replace(/^ /, '\xA0');
                if (!next || typeof next.insert === 'object' || startsWithSpace(next))
                    str = str.replace(/ $/, '\xA0');
                trailingBreak = false;
                children.push(str);
            }
            else if (op.insert) {
                const embed = embeds.findByAttributes(op.insert);
                if (embed === null || embed === void 0 ? void 0 : embed.render) {
                    children.push(embed.render(op.insert, EMPTY_ARR$1, editor, forHTML));
                    if (embed.name === 'br')
                        trailingBreak = true;
                    else if (!embed.noFill)
                        trailingBreak = false;
                }
            }
            if (op.attributes) {
                // Sort them by the order found in formats
                Object.keys(op.attributes).sort((a, b) => formats.priority(b) - formats.priority(a)).forEach(name => {
                    const type = formats.get(name);
                    if (type === null || type === void 0 ? void 0 : type.render) {
                        const node = type.render(op.attributes, children, editor, forHTML);
                        if (node) {
                            nodeFormatType.set(node, type); // Store for merging
                            children = [node];
                        }
                    }
                });
            }
            inlineChildren.push.apply(inlineChildren, children);
        });
        // Merge marks to optimize
        inlineChildren = mergeChildren(inlineChildren);
        if (trailingBreak)
            inlineChildren.push(BR);
        return inlineChildren;
    }
    function isSame(oldEntry, newEntry) {
        if (oldEntry === newEntry)
            return true;
        return Array.isArray(oldEntry)
            && Array.isArray(newEntry)
            && oldEntry.length === newEntry.length
            && oldEntry.every((b, i) => b === newEntry[i]);
    }
    function getLineType(editor, line) {
        let type = linesType.get(line.attributes);
        if (!type) {
            type = editor.typeset.lines.findByAttributes(line.attributes, true);
            linesType.set(line.attributes, type);
        }
        return type;
    }
    // Joins adjacent mark nodes
    function mergeChildren(oldChildren) {
        const children = [];
        oldChildren.forEach((next, i) => {
            const index = children.length - 1;
            const prev = children[index];
            if (prev && typeof prev !== 'string' && typeof next !== 'string' && nodeFormatType.has(prev) &&
                nodeFormatType.get(prev) === nodeFormatType.get(next) && isEqual(prev.props, next.props)) {
                prev.children = prev.children.concat(next.children);
            }
            else if (prev && typeof prev === 'string' && typeof next === 'string') {
                children[index] += next; // combine adjacent text nodes
            }
            else {
                children.push(next);
                if (prev && typeof prev !== 'string' && prev.children) {
                    prev.children = mergeChildren(prev.children);
                }
            }
        });
        if (children.length) {
            const last = children[children.length - 1];
            if (last && typeof last !== 'string' && last.children) {
                last.children = mergeChildren(last.children);
            }
        }
        return children;
    }
    function startsWithSpace(op) {
        return typeof op.insert === 'string' && op.insert[0] === ' ';
    }

    /*!
     * escape-html
     * Copyright(c) 2012-2013 TJ Holowaychuk
     * Copyright(c) 2015 Andreas Lubbe
     * Copyright(c) 2015 Tiancheng "Timothy" Gu
     * MIT Licensed
     */
    const matchHtmlRegExp = /["'&<>]/;
    /**
     * Escape special characters in the given string of html.
     *
     * @param  {string} string The string to escape for inserting into HTML
     * @return {string}
     * @public
     */
    function escapeHtml(string) {
        var str = '' + string;
        var match = matchHtmlRegExp.exec(str);
        if (!match) {
            return str;
        }
        var escape;
        var html = '';
        var index = 0;
        var lastIndex = 0;
        for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
                case 34: // "
                    escape = '&quot;';
                    break;
                case 38: // &
                    escape = '&amp;';
                    break;
                case 39: // '
                    escape = '&#39;';
                    break;
                case 60: // <
                    escape = '&lt;';
                    break;
                case 62: // >
                    escape = '&gt;';
                    break;
                default:
                    continue;
            }
            if (lastIndex !== index) {
                html += str.substring(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
        }
        return lastIndex !== index
            ? html + str.substring(lastIndex, index)
            : html;
    }

    const SHOW = NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT;
    function createTreeWalker(root, filter) {
        return (root.ownerDocument || document).createTreeWalker(root, SHOW, {
            acceptNode(node) {
                if (node.nodeType === Node.TEXT_NODE && node.nodeValue === '') {
                    return NodeFilter.FILTER_REJECT;
                }
                else if (filter) {
                    const result = filter(node);
                    if (!result)
                        return NodeFilter.FILTER_REJECT;
                    if (result === true)
                        return NodeFilter.FILTER_ACCEPT;
                    return result;
                }
                else {
                    return NodeFilter.FILTER_ACCEPT;
                }
            }
        });
    }

    // A list of bad characters that we don't want coming in from pasted content (e.g. "\f" aka line feed)
    const BLOCK_ELEMENTS = 'address, article, aside, blockquote, editor, dd, div, dl, dt, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hr, li, main, nav, noscript, ol, output, p, pre, section, table, tfoot, ul, video';
    const BAD_CHARS = /[\0-\x09\x0B\x1F\x7F-\x9F\xAD\u0600-\u0605\u061C\u06DD\u070F\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB\uE000-\uF8FF]/g;
    const SKIP_ELEMENTS = { STYLE: true, SCRIPT: true, LINK: true, META: true, TITLE: true, };
    const VOID_ELEMENTS = {
        area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true,
        link: true, meta: true, param: true, source: true, track: true, wbr: true
    };
    const whitespaceExp = /[ \t\n\r]+/g;
    const textsNode = document.createElement('div');
    const defaultOptions$1 = {};
    // Determines if a <br> in the editable area is part of the document or a doorstop at the end of a line.
    function isBRPlaceholder(editor, node) {
        if (node.nodeName !== 'BR')
            return false;
        return isLastNode(editor, node);
    }
    // Check if this is the last node (not counting empty text nodes)
    function isLastNode(editor, node) {
        const containingLine = node.closest && node.closest(editor.typeset.lines.selector);
        if (!containingLine)
            return false;
        const walker = createTreeWalker(containingLine);
        walker.currentNode = node;
        const next = walker.nextNode();
        return !next || next instanceof HTMLElement && next.matches(BLOCK_ELEMENTS);
    }
    function docToHTML(editor, doc) {
        return childrenToHTML(renderDoc(editor, doc, true));
    }
    function inlineToHTML(editor, delta) {
        return childrenToHTML(renderInline(editor, delta, true));
    }
    function docFromHTML(editor, html, selection) {
        return new TextDocument(deltaFromHTML(editor, html), selection);
    }
    function deltaFromHTML(editor, html, options) {
        const parser = new window.DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const delta = deltaFromDom(editor, {
            root: doc.body,
            possiblePartial: options === null || options === void 0 ? void 0 : options.possiblePartial,
            collapseWhitespace: options === null || options === void 0 ? void 0 : options.collapseWhitespace
        });
        cleanText(delta);
        return delta;
    }
    function docFromDom(editor, root) {
        return new TextDocument(deltaFromDom(editor, { root }));
    }
    function cleanText(delta) {
        delta.forEach(op => {
            if (typeof op.insert === 'string') {
                op.insert = op.insert.replace(BAD_CHARS, '');
            }
        });
    }
    function deltaFromDom(editor, options = defaultOptions$1) {
        const { lines, embeds } = editor.typeset;
        const root = options.root || editor.root;
        const collapseWhitespace = options.collapseWhitespace != undefined ? options.collapseWhitespace : true;
        var walker = createTreeWalker(root, node => !SKIP_ELEMENTS[node.nodeName]);
        const delta = new Delta();
        let currentLine, firstLineSeen = false, unknownLine = false, empty = true, node;
        if (options.startNode) {
            walker.currentNode = options.startNode;
            walker.previousNode();
            if (options.offset)
                delta.retain(options.offset, undefined);
        }
        else {
            walker.currentNode = root;
        }
        while ((node = walker.nextNode())) {
            if (node === options.endNode)
                break;
            if (isBRPlaceholder(editor, node)) {
                empty = false;
            }
            else if (node.nodeName === 'BR' && node.className === 'Apple-interchange-newline') {
                delta.insert('\n', !currentLine || currentLine.unknownLine ? {} : currentLine);
            }
            else if (node.nodeType === Node.TEXT_NODE) {
                let parent = node.parentNode;
                // If all newlines, we can ignore
                if (node.nodeValue == null || node.nodeValue.replace(/\n+/g, '') === '')
                    continue;
                // If blank text between lines, ignore
                if (!node.nodeValue.replace(/\s+/g, '')) {
                    if (node.parentNode === root
                        || (node.previousSibling && lines.matches(node.previousSibling))
                        || (node.nextSibling && lines.matches(node.nextSibling))) {
                        continue;
                    }
                }
                const nodeText = node.nodeValue;
                // optionally collapse whitespace (the default)
                const filteredWhitespace = collapseWhitespace ? nodeText.replace(whitespaceExp, ' ') : nodeText;
                // non-breaking spaces (&nbsp;) are spaces
                const text = filteredWhitespace.replace(/\xA0/g, ' ');
                // Word gives us end-of-paragraph nodes with a single space. Ignore them.
                if (!text || (text === ' ' && parent.classList.contains('EOP')))
                    continue;
                // Gather up all the formats for this text node, walking up to the line level
                const attributes = gatherFormats(parent, root, editor);
                empty = false;
                delta.insert(text, attributes);
            }
            else if (embeds.matches(node)) {
                const embed = embeds.findByNode(node);
                if (embed) {
                    const attributes = gatherFormats(node.parentNode, root, editor);
                    if (embed.fromDom !== false) {
                        delta.insert(embed.fromDom ? embed.fromDom(node) : { [embed.name]: true }, attributes);
                    }
                }
            }
            else if (lines.matches(node) || (node.nodeType === Node.ELEMENT_NODE && node.matches(BLOCK_ELEMENTS))) {
                unknownLine = !lines.matches(node);
                if (unknownLine) {
                    let parent = node.parentNode;
                    while (parent && !lines.matches(parent) && parent !== root) {
                        parent = parent.parentNode;
                    }
                    // If this line element is inside a recognized line, ignore it
                    if (parent && parent !== root) {
                        continue;
                    }
                }
                const line = lines.findByNode(node, true);
                // Skip paragraphs/divs inside blockquotes and list items etc.
                if (line === lines.default && (!node.parentNode || lines.matches(node.parentNode))) {
                    continue;
                }
                // Ensure next iteration skips any internal nodes in a frozen line
                if (line.frozen) {
                    // Skip to the last child in this node so that .nextNode() will move on to outside this frozen line
                    while (walker.lastChild())
                        ;
                }
                if (firstLineSeen) {
                    if (!currentLine || !currentLine.unknownLine || !empty) {
                        delta.insert('\n', !currentLine || currentLine.unknownLine ? {} : currentLine);
                        empty = true;
                    }
                }
                else {
                    firstLineSeen = true;
                }
                if (unknownLine) {
                    currentLine = { unknownLine };
                }
                else if (line && line !== lines.default) {
                    currentLine = line.fromDom ? line.fromDom(node) : { [line.name]: true };
                }
                else {
                    currentLine = {};
                }
                if (options.includeIds && node.key) {
                    currentLine.id = node.key;
                }
            }
        }
        // Delta documents should always end with a newline, unless they are partial documents
        if (!unknownLine || !empty) {
            if (firstLineSeen || !options.possiblePartial) {
                delta.insert('\n', !currentLine || currentLine.unknownLine ? {} : currentLine);
            }
        }
        return delta;
    }
    // vdom children to HTML string
    function childrenToHTML(children) {
        if (!children || !children.length)
            return '';
        return children.reduce((html, child) => html + (typeof child !== 'string' ? nodeToHTML(child) : escapeHtml(child).replace(/\xA0/g, '&nbsp;')), '');
    }
    // vdom node to HTML string
    function nodeToHTML(node) {
        if (typeof node === 'string') {
            textsNode.textContent = node;
            const html = textsNode.innerHTML;
            textsNode.textContent = '';
            return html;
        }
        const attr = Object.keys(node.props)
            .reduce((attr, name) => name === 'key' || node.props[name] == null
            ? attr
            : `${attr} ${escapeHtml(name)}="${escapeHtml(node.props[name])}"`, '');
        const children = childrenToHTML(node.children);
        const closingTag = children || !VOID_ELEMENTS[node.type] ? `</${node.type}>` : '';
        return `<${node.type}${attr}>${children}${closingTag}`;
    }
    // Walk up the DOM to the closest parent, finding formats
    function gatherFormats(parent, root, editor) {
        const { lines, formats } = editor.typeset;
        const attributes = {};
        while (parent && !lines.matches(parent) && parent !== root) {
            if (formats.matches(parent)) {
                const format = formats.findByNode(parent);
                if (format && format.fromDom !== false) {
                    attributes[format.name] = format.fromDom ? format.fromDom(parent) : true;
                }
            }
            else if (parent.hasAttribute('style')) {
                formats.list.forEach(format => {
                    if (format.styleSelector && parent.matches(format.styleSelector)) {
                        attributes[format.name] = format.fromDom ? format.fromDom(parent) : true;
                    }
                });
            }
            parent = parent.parentNode;
        }
        return attributes;
    }

    const EMPTY_NODE_OFFSET = [null, 0];
    function getIndexFromPoint(editor, x, y) {
        const document = editor.root.ownerDocument;
        if ('caretPositionFromPoint' in document) {
            try {
                const pos = document.caretPositionFromPoint(x, y);
                if (pos) {
                    return getIndexFromNodeAndOffset(editor, pos.offsetNode, pos.offset);
                }
            }
            catch (_) { }
        }
        if (document.caretRangeFromPoint) {
            const range = document.caretRangeFromPoint(x, y);
            if (range) {
                return getIndexFromNodeAndOffset(editor, range.startContainer, range.startOffset);
            }
        }
        return null;
    }
    // Get a browser range object for the given editor range tuple
    function getBrowserRange(editor, range) {
        if (range[0] > range[1])
            range = [range[1], range[0]];
        const [anchorNode, anchorOffset, focusNode, focusOffset] = getNodesForRange(editor, range);
        const browserRange = editor.root.ownerDocument.createRange();
        if (anchorNode && focusNode) {
            browserRange.setStart(anchorNode, anchorOffset);
            browserRange.setEnd(focusNode, focusOffset);
        }
        return browserRange;
    }
    function getBoudingBrowserRange(editor, range) {
        const browserRange = getBrowserRange(editor, range);
        if ((browserRange === null || browserRange === void 0 ? void 0 : browserRange.endContainer.nodeType) === Node.ELEMENT_NODE) {
            try {
                browserRange.setEnd(browserRange.endContainer, browserRange.endOffset + 1);
            }
            catch (e) { }
        }
        return browserRange;
    }
    function getIndexFromNodeAndOffset(editor, node, offset, current) {
        var _a;
        const { root } = editor;
        const { lines } = editor.typeset;
        if (!root.contains(node)) {
            return -1;
        }
        if (node.nodeType === Node.ELEMENT_NODE) {
            if (node.childNodes.length === offset) {
                if (getLineNodeEnd(root, node) != null)
                    return getLineNodeEnd(root, node) - 1;
                if (node.childNodes.length) {
                    node = node.childNodes[offset - 1];
                    offset = getNodeLength(editor, node);
                }
            }
            else {
                node = node.childNodes[offset];
                offset = 0;
            }
            const start = getLineNodeStart(root, node);
            if (start != null) {
                // If the node is frozen, we are getting the index of the start of the node (e.g. <hr>)
                if ((_a = lines.findByNode(node)) === null || _a === void 0 ? void 0 : _a.frozen) {
                    return start + offset;
                }
                // Otherwise the selection fell between line nodes, if we came from before, we will go inside, if we came from inside, we will skip to before
                return (current == null || current < start ? start : start - 1) + offset;
            }
        }
        return getIndexFromNode(editor, node) + offset;
    }
    // Get the index the node starts at in the content
    function getIndexFromNode(editor, startNode) {
        var _a;
        const { root } = editor;
        if (!root.ownerDocument)
            return -1;
        const { lines, embeds } = editor.typeset;
        const walker = createTreeWalker(root);
        walker.currentNode = startNode;
        let node;
        let index = 0;
        let start;
        while ((node = walker.previousNode())) {
            if (node === root)
                break;
            else if ((start = getLineNodeStart(root, node)) != null) {
                index += start;
                break;
            }
            else if (node.nodeType === Node.TEXT_NODE)
                index += textNodeLength(lines, node);
            else if ((_a = node.classList) === null || _a === void 0 ? void 0 : _a.contains('decoration'))
                ;
            else if (embeds.matches(node) && !isBRPlaceholder(editor, node))
                index++;
            else if (lines.matches(node) && editor.doc.lines[0].id !== node.key)
                index++;
        }
        return index;
    }
    function getLineElementAt(editor, index) {
        const { root } = editor;
        if (!root.ownerDocument)
            return;
        const childNodes = Array.from(root.childNodes);
        return childNodes.find((line) => getLineNodeStart(root, line) <= index && getLineNodeEnd(root, line) > index);
    }
    function getNodeLength(editor, parentNode) {
        var _a;
        const { lines, embeds } = editor.typeset;
        if (embeds.matches(parentNode) && !isBRPlaceholder(editor, parentNode)) {
            return 1;
        }
        if (parentNode.nodeType === Node.TEXT_NODE)
            return textNodeLength(lines, parentNode);
        const walker = createTreeWalker(parentNode);
        let length = lines.findByNode(parentNode) ? 1 : 0, node;
        while (node = walker.nextNode()) {
            if (node.nodeType === Node.TEXT_NODE)
                length += textNodeLength(lines, node);
            else if ((_a = node.classList) === null || _a === void 0 ? void 0 : _a.contains('decoration'))
                ;
            else if (embeds.matches(node) && !isBRPlaceholder(editor, node))
                length++;
            else if (lines.matches(node))
                length++;
        }
        return length;
    }
    // Get the browser nodes and offsets for the range (a tuple of indexes) of this view
    function getNodesForRange(editor, range) {
        if (range == null) {
            return [null, 0, null, 0];
        }
        else {
            const anchorFirst = range[0] <= range[1];
            const direction = anchorFirst ? 1 : -1;
            const isCollapsed = range[0] === range[1];
            const [anchorNode, anchorOffset, frozen] = getNodeAndOffset(editor, range[0], anchorFirst ? 0 : 1);
            const [focusNode, focusOffset] = isCollapsed && !frozen
                ? [anchorNode, anchorOffset]
                : frozen && (isCollapsed || range[1] - range[0] === direction * editor.doc.getLineAt(range[0]).length)
                    ? [anchorNode, anchorOffset + (anchorFirst ? 1 : -1)]
                    : getNodeAndOffset(editor, range[1], anchorFirst ? 1 : 0);
            return [anchorNode, anchorOffset, focusNode, focusOffset];
        }
    }
    function getNodeAndOffset(editor, index, direction) {
        var _a;
        const { root } = editor;
        if (!root.ownerDocument)
            return EMPTY_NODE_OFFSET;
        const { lines, embeds } = editor.typeset;
        const childNodes = Array.from(root.childNodes);
        const line = getLineElementAt(editor, index);
        if (!line)
            return EMPTY_NODE_OFFSET;
        const type = lines.findByNode(line, true);
        if (type.frozen) {
            return [line.parentNode, childNodes.indexOf(line) + direction, true];
        }
        index -= getLineNodeStart(root, line);
        const atStart = !index;
        const walker = createTreeWalker(line);
        let node, firstLineSeen = false;
        while ((node = walker.nextNode())) {
            if (node.nodeType === Node.TEXT_NODE) {
                const size = textNodeLength(lines, node);
                if (index <= size)
                    return [node, index];
                index -= size;
            }
            else if ((_a = node.classList) === null || _a === void 0 ? void 0 : _a.contains('decoration')) ;
            else if (embeds.matches(node) && !isBRPlaceholder(editor, node)) {
                const embed = embeds.findByNode(node);
                if (!embed || embed.fromDom === false) {
                    continue;
                }
                index -= 1;
                // If the selection lands after this embed, and the next node isn't a text node, place the selection
                if (index <= 0) {
                    const children = Array.from(node.parentNode.childNodes);
                    return [node.parentNode, children.indexOf(node) + 1 + index];
                }
            }
            else if (lines.matches(node)) {
                if (firstLineSeen)
                    index -= 1;
                else
                    firstLineSeen = true;
                // If the selection lands at the beginning of a line, and the first node isn't a text node, place the selection
                if (index === 0) {
                    const first = walker.firstChild();
                    if (first && first.nodeType === Node.TEXT_NODE) {
                        return [first, 0];
                    }
                    else if (first) {
                        const children = Array.from(node.childNodes);
                        return [node, children.indexOf(first)];
                    }
                    else {
                        return [node, 0];
                    }
                }
            }
        }
        return atStart ? [line, 0] : EMPTY_NODE_OFFSET;
    }
    function textNodeLength(lines, node) {
        const value = node.nodeValue || '';
        if (value.trim() || !(lines.matches(node.previousSibling) || lines.matches(node.nextSibling))) {
            return value.length;
        }
        return 0;
    }

    /**
     * Get the selection range from the current browser selection
     */
    function getSelection(editor) {
        var _a;
        const { root } = editor;
        const current = editor.doc.selection;
        if (!root.ownerDocument)
            return null;
        const selection = root.ownerDocument.getSelection();
        const { lines } = editor.typeset;
        if (selection == null || selection.anchorNode == null || selection.focusNode == null || !root.contains(selection.anchorNode)) {
            return null;
        }
        else {
            const anchorIndex = getIndexFromNodeAndOffset(editor, selection.anchorNode, selection.anchorOffset, current && current[0]);
            const isCollapsed = selection.anchorNode === selection.focusNode && selection.anchorOffset === selection.focusOffset;
            const isFrozen = lines.findByAttributes((_a = editor.doc.getLineAt(anchorIndex)) === null || _a === void 0 ? void 0 : _a.attributes, true).frozen;
            // selection.isCollapsed causes a re-layout on Chrome, manual detection does not.
            let focusIndex = isCollapsed
                ? anchorIndex
                : getIndexFromNodeAndOffset(editor, selection.focusNode, selection.focusOffset, !isFrozen && current ? current[1] : null);
            return [anchorIndex, focusIndex];
        }
    }
    /**
     * Set the current browser selection to the given selection range
     */
    function setSelection(editor, range) {
        const { root } = editor;
        if (!root.ownerDocument)
            return;
        const selection = root.ownerDocument.getSelection();
        if (!selection)
            return;
        const hasFocus = selection.anchorNode && root.contains(selection.anchorNode) && document.activeElement !== document.body;
        if (range == null) {
            if (hasFocus) {
                selection.removeAllRanges();
                if (root.classList.contains('focus'))
                    root.classList.remove('focus');
            }
        }
        else {
            const [anchorNode, anchorOffset, focusNode, focusOffset] = getNodesForRange(editor, range);
            const type = range[0] === range[1] ? 'Caret' : 'Range';
            if (anchorNode && focusNode) {
                if (selection.anchorNode !== anchorNode || selection.anchorOffset !== anchorOffset ||
                    selection.focusNode !== focusNode || selection.focusOffset !== focusOffset || selection.type !== type) {
                    selection.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset);
                }
            }
            if (!hasFocus)
                root.focus();
            if (!root.classList.contains('focus'))
                root.classList.add('focus');
        }
        root.dispatchEvent(new Event('select', { bubbles: true }));
    }

    var Source;
    (function (Source) {
        Source["api"] = "api";
        Source["user"] = "user";
        Source["history"] = "history";
        Source["input"] = "input";
        Source["paste"] = "paste";
    })(Source || (Source = {}));

    // Default history module
    const history = initHistory();
    /**
     * History is a view module for storing user changes and undoing/redoing those changes.
     *
     * Stores history for all user-generated changes. Like-changes will be combined until a selection or a delay timeout
     * cuts off the combining. E.g. if a user types "Hello" the 5 changes will be combined into one history entry. If
     * the user moves the cursor somewhere and then back to the end and types " World" the next 6 changes are combined
     * separately from the first 5 because selection changes add a cutoff history entries.
     *
     * The default options can be overridden by passing alternatives to history. To add a timeout to force a cutoff after
     * so many milliseconds set a delay like this:
     * ```js
     * const modules = {
     *   history: history({ delay: 4000 })
     * };
     * ```
     */
    function initHistory(initOptions = {}) {
        return function (editor) {
            let lastRecorded = 0;
            let lastAction = '';
            let ignoreChange = false;
            let stack = undoStack();
            const options = { maxStack: 500, delay: 0, ...initOptions };
            function onBeforeInput(event) {
                if (event.inputType === 'historyUndo') {
                    event.preventDefault();
                    undo();
                }
                else if (event.inputType === 'historyRedo') {
                    event.preventDefault();
                    redo();
                }
            }
            function undo() {
                action('undo', 'redo');
            }
            function redo() {
                action('redo', 'undo');
            }
            function hasUndo() {
                return stack.undo.length > 0;
            }
            function hasRedo() {
                return stack.redo.length > 0;
            }
            function cutoffHistory() {
                lastRecorded = 0;
            }
            function clearHistory() {
                stack = undoStack();
            }
            function action(source, dest) {
                if (stack[source].length === 0)
                    return;
                const entry = stack[source].pop();
                stack[dest].push(entry);
                cutoffHistory();
                ignoreChange = true;
                if (typeof entry[source] === 'function') {
                    entry[source]();
                }
                else {
                    editor.update(entry[source], Source.history);
                }
                ignoreChange = false;
            }
            function record(change, oldDoc) {
                const timestamp = Date.now();
                const action = getAction(change);
                stack.redo.length = 0;
                const undo = new TextChange(null, change.delta.invert(oldDoc.toDelta()), oldDoc.selection);
                // Break combining if actions are different (e.g. a delete then an insert should break it)
                if (!action || lastAction !== action)
                    cutoffHistory();
                lastAction = action;
                if (lastRecorded && (!options.delay || lastRecorded + options.delay > timestamp) && stack.undo.length) {
                    // Combine with the last change
                    const entry = stack.undo[stack.undo.length - 1];
                    entry.redo.delta = entry.redo.delta.compose(change.delta);
                    entry.redo.selection = change.selection;
                    entry.undo.delta = undo.delta.compose(entry.undo.delta);
                }
                else {
                    const redo = new TextChange(null, change.delta, change.selection);
                    lastRecorded = timestamp;
                    stack.undo.push({ redo, undo });
                }
                if (stack.undo.length > options.maxStack) {
                    stack.undo.shift();
                }
            }
            function onChange({ change, old, source }) {
                if (!change)
                    return clearHistory();
                if (ignoreChange)
                    return;
                if (!change.contentChanged)
                    return cutoffHistory();
                if (source !== Source.api) {
                    record(change, old);
                }
                else {
                    transformHistoryStack(stack, change);
                }
            }
            // Advanced, only use this if the stack matches the document
            // e.g. use transformStack when changes come in for a document that isn't loaded
            function setStack(value) {
                stack = value;
            }
            function getStack() {
                return stack;
            }
            return {
                options,
                hasUndo,
                hasRedo,
                undo,
                redo,
                cutoffHistory,
                clearHistory,
                setStack,
                getStack,
                getActive() {
                    return { undo: hasUndo(), redo: hasRedo() };
                },
                commands: {
                    undo,
                    redo,
                },
                shortcuts: {
                    'win:Ctrl+Z': 'undo',
                    'mac:Cmd+Z': 'undo',
                    'win:Ctrl+Y': 'redo',
                    'mac:Cmd+Shift+Z': 'redo',
                },
                init() {
                    editor.on('change', onChange);
                    editor.root.addEventListener('beforeinput', onBeforeInput);
                },
                destroy() {
                    editor.off('change', onChange);
                    editor.root.removeEventListener('beforeinput', onBeforeInput);
                }
            };
        };
    }
    function undoStack() {
        return {
            undo: [],
            redo: [],
        };
    }
    function transformHistoryStack(stack, delta) {
        const change = delta instanceof Delta ? new TextChange(null, delta) : delta;
        stack.undo.forEach(entry => {
            entry.undo = change.transform(entry.undo, true);
            entry.redo = change.transform(entry.redo, true);
        });
        stack.redo.forEach(entry => {
            entry.undo = change.transform(entry.undo, true);
            entry.redo = change.transform(entry.redo, true);
        });
    }
    function getAction(change) {
        var _a;
        const { ops } = change.delta;
        let head = 0, tail = ops.length - 1;
        if (ops[head].retain && !ops[head].attributes)
            head++;
        if (ops[tail].retain === 1 && ((_a = ops[tail].attributes) === null || _a === void 0 ? void 0 : _a.id))
            tail--;
        if (head === tail) {
            const changeOp = ops[head];
            if (changeOp.delete)
                return 'delete';
            if (changeOp.insert === '\n')
                return 'newline';
            if (typeof changeOp.insert === 'string')
                return 'insert';
        }
        return '';
    }

    const isIPad = navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
    const isIOS = isIPad || /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    const isAndroid = !isIOS && /Mobi|Android/.test(navigator.userAgent) && !window.MSStream;
    const MUTATION_OPTIONS = {
        characterData: true,
        characterDataOldValue: true,
        subtree: true,
        childList: true
    };
    function input(editor) {
        let gboardEnter = false;
        // Browsers have had issues in the past with mutation observers firing consistently, so use the observer with the input
        // event as fallback
        function onInput() {
            const mutations = observer.takeRecords();
            if (mutations.length)
                onMutate(mutations);
        }
        // for Gboard fix -- checks if start of line is an insert br
        function isBr(change) {
            let isBr = false;
            const lastOp = change.ops[change.ops.length - 1];
            if (lastOp.insert) {
                const insert = lastOp.insert;
                if (insert.br) {
                    isBr = true;
                }
            }
            return isBr;
        }
        // Final fallback. Handles composition text etc. Detects text changes from e.g. spell-check or Opt+E to produce
        function onMutate(list) {
            if (!editor.enabled) {
                return editor.render();
            }
            // Optimize for text changes (typing text)
            let change = getTextChange(list);
            let selection = getSelection(editor);
            if (!change) {
                const range = getChangedLineRange(editor.root, list);
                change = getChangeFromRange(range);
            }
            // Gboard fix to move to next line
            if (gboardEnter) {
                // Sometimes gBoard adds a br instead of a new line (seen with h2)
                if (isBr(change)) {
                    change.ops.pop();
                    change.insert('\n');
                }
                // advance to next line
                if (selection !== null) {
                    selection[0]++;
                    selection[1]++;
                }
                gboardEnter = false;
            }
            if (change && change.ops.length) {
                cleanText(change);
                const old = editor.doc;
                editor.update(new TextChange(editor.doc, change, selection, editor.activeFormats), Source.input);
                if (editor.doc.lines === old.lines) {
                    editor.render();
                }
            }
        }
        function getTextChange(list) {
            const mutation = getTextChangeMutation(list);
            if (!mutation || mutation.oldValue == null || mutation.target.nodeValue == null)
                return null;
            const change = new Delta();
            const index = getIndexFromNode(editor, mutation.target);
            change.retain(index);
            let relativeEditLocation = undefined;
            if (editor.doc.selection) {
                const selection = normalizeRange(editor.doc.selection);
                relativeEditLocation = selection[0] - index;
                if (relativeEditLocation < 0) {
                    relativeEditLocation = 0;
                }
            }
            const diffs = diff$1(mutation.oldValue.replace(/\xA0/g, ' '), mutation.target.nodeValue.replace(/\xA0/g, ' '), relativeEditLocation);
            diffs.forEach(([action, string]) => {
                if (action === diff$1.EQUAL)
                    change.retain(string.length);
                else if (action === diff$1.DELETE)
                    change.delete(string.length);
                else if (action === diff$1.INSERT) {
                    change.insert(string, editor.activeFormats);
                }
            });
            change.chop();
            return change;
        }
        // Fallback to commit whatever was changed, least performant
        function getChangeFromRange(range) {
            const { doc } = editor;
            if (range) {
                const [startNode, endNode] = range;
                const start = getLineNodeStart(editor.root, startNode);
                const end = getLineNodeEnd(editor.root, endNode);
                const delta = deltaFromDom(editor, { startNode, endNode: endNode.nextElementSibling || undefined, collapseWhitespace: false });
                let change = doc.toDelta().slice(start, end).diff(delta);
                if (change.ops.length && start)
                    change = new Delta().retain(start).concat(change);
                return change;
            }
            else {
                const delta = deltaFromDom(editor, { collapseWhitespace: false });
                return doc.toDelta().diff(delta);
            }
        }
        const observer = new window.MutationObserver(onMutate);
        // Don't observe the changes that occur when the view updates, we only want to respond to changes that happen
        // outside of our API to read them back in
        function onRendering() {
            observer.disconnect();
        }
        function onRender() {
            observer.observe(editor.root, MUTATION_OPTIONS);
        }
        // Function to detect if Gboard is sending new lines with composed input
        function onBeforeInput(event) {
            if (!event.data)
                return;
            if (event.data.includes('\n')) {
                gboardEnter = true;
            }
        }
        return {
            init() {
                editor.root.addEventListener('input', onInput);
                editor.on('rendering', onRendering);
                editor.on('render', onRender);
                if (isAndroid) {
                    editor.root.addEventListener('beforeinput', onBeforeInput); // needed for Gboard fix
                }
            },
            destroy() {
                observer.disconnect();
                editor.root.removeEventListener('input', onInput);
                editor.off('rendering', onRendering);
                editor.off('render', onRender);
                if (isAndroid) {
                    editor.root.removeEventListener('beforeinput', onBeforeInput); // gboard fix
                }
            }
        };
    }
    function getTextChangeMutation(list) {
        // Shrink the list down to one entry per text node
        const textNodes = new Set();
        list = list.filter(record => {
            if (record.type !== 'characterData')
                return true;
            if (textNodes.has(record.target))
                return false;
            textNodes.add(record.target);
            return true;
        });
        if (list.length > 3)
            return null;
        const text = list.find(record => record.type === 'characterData');
        if (!text)
            return null;
        const textAdd = list.find(record => record.addedNodes.length === 1 && record.addedNodes[0].nodeName === '#text');
        const brAddRemove = list.find(record => {
            return (record.addedNodes.length === 1 && record.addedNodes[0].nodeName === 'BR') ||
                (record.removedNodes.length === 1 && record.removedNodes[0].nodeName === 'BR');
        });
        const count = 1 + (textAdd ? 1 : 0) + (brAddRemove ? 1 : 0);
        if (count < list.length)
            return null;
        if (textAdd && textAdd.addedNodes[0] !== text.target)
            return null;
        return text;
    }
    function getChangedLineRange(root, records) {
        let start, end;
        for (let i = 0; i < records.length; i++) {
            const record = records[i];
            if (record.target === root)
                return; // line added/removed
            const line = getTopLine(root, record.target);
            if (line && line.key) {
                if (!start || getLineNodeStart(root, line) < getLineNodeStart(root, start))
                    start = line;
                if (!end || getLineNodeStart(root, line) > getLineNodeStart(root, end))
                    end = line;
            }
            else {
                // If a line is deleted or new line added we will return null and diff the whole thing (rare fallback case)
                return;
            }
        }
        if (start && end)
            return [start, end];
    }
    function getTopLine(root, node) {
        while (node && node.parentNode !== root)
            node = node.parentNode;
        return node;
    }

    const modifierKeys = {
        Control: true,
        Meta: true,
        Shift: true,
        Alt: true
    };
    const isMac = navigator.userAgent.indexOf('Macintosh') !== -1;
    const modExpr = isMac ? /Cmd/ : /Ctrl/;
    class ShortcutEvent extends KeyboardEvent {
        constructor(type, init) {
            super(type, init);
            this.shortcut = (init === null || init === void 0 ? void 0 : init.shortcut) || '';
            this.osShortcut = `${isMac ? 'mac' : 'win'}:${this.shortcut}`;
            this.modShortcut = this.shortcut.replace(modExpr, 'Mod');
        }
        static fromKeyboardEvent(event) {
            event.shortcut = shortcutFromEvent(event);
            return new ShortcutEvent('shortcut', event);
        }
    }
    function addShortcutsToEvent(event) {
        event.shortcut = shortcutFromEvent(event);
        event.osShortcut = `${isMac ? 'mac' : 'win'}:${event.shortcut}`;
        event.modShortcut = event.shortcut.replace(modExpr, 'Mod');
        return event;
    }
    /**
     * Returns the textual representation of a shortcut given a keyboard event. Examples of shortcuts:
     * Cmd+L
     * Cmd+Shift+M
     * Ctrl+O
     * Backspace
     * T
     * Right
     * Shift+Down
     * Shift+F1
     * Space
     */
    function shortcutFromEvent(event) {
        const shortcutArray = [];
        let key = event.key;
        if (!key)
            return '';
        if (key === ' ')
            key = 'Space';
        if (event.metaKey)
            shortcutArray.push('Cmd');
        if (event.ctrlKey)
            shortcutArray.push('Ctrl');
        if (event.altKey)
            shortcutArray.push('Alt');
        if (event.shiftKey)
            shortcutArray.push('Shift');
        if (!modifierKeys[key]) {
            if (isMac && event.altKey && event.code && event.code.startsWith('Key')) {
                // The altKey on mac can change the key value (e.g. Cmd+Alt+R will show up as Cmd+Alt+® if we don't do this)
                key = event.code.replace('Key', '');
            }
            // a and A, b and B, should be the same shortcut
            if (key.length === 1)
                key = key.toUpperCase();
            shortcutArray.push(key);
        }
        return shortcutArray.join('+');
    }

    // A list of bad characters that we don't want coming in from pasted content (e.g. "\f" aka line feed)
    const EMPTY_OBJ$1 = {};
    const IS_CHROME = window.chrome && typeof window.chrome === 'object';
    // Basic keyboard module.
    function keyboard(editor) {
        function onEnter(event) {
            if (event.defaultPrevented)
                return;
            const { typeset: { lines }, doc } = editor;
            let { selection } = doc;
            if (!selection)
                return;
            event.preventDefault();
            const [at, to] = selection;
            const isCollapsed = at === to;
            const line = doc.getLineAt(selection[0]);
            const [start, end] = doc.getLineRange(selection[0]);
            let { id, ...attributes } = line.attributes;
            let options;
            const type = lines.findByAttributes(attributes, true);
            const atStart = to === start;
            const atEnd = to === end - 1;
            if (isEmpty(line) && type !== lines.default && !type.contained && !type.defaultFollows && !type.frozen && isCollapsed) {
                // Convert a bullet point into a paragraph
                editor.formatLine(EMPTY_OBJ$1);
            }
            else {
                if (at === start && to === end && type.frozen) {
                    options = { dontFixNewline: true };
                    if (at === 0) {
                        // if single selection and line element (hr, image etc) insert new line before
                        selection = [at, at];
                    }
                    else {
                        selection = [to, to];
                    }
                    attributes = type.nextLineAttributes ? type.nextLineAttributes(attributes) : EMPTY_OBJ$1;
                }
                else if (atEnd && (type.nextLineAttributes || type.defaultFollows || type.frozen)) {
                    attributes = type.nextLineAttributes ? type.nextLineAttributes(attributes) : EMPTY_OBJ$1;
                }
                else if (atStart && !atEnd) {
                    if (type.defaultFollows)
                        attributes = EMPTY_OBJ$1;
                    options = { dontFixNewline: true };
                }
                editor.insert('\n', attributes, selection, options);
                if (at === start && to === end && type.frozen) {
                    editor.select(at === 0 ? 0 : to);
                }
            }
        }
        function onShiftEnter(event) {
            if (event.defaultPrevented)
                return;
            const { typeset, doc } = editor;
            if (!typeset.embeds.get('br'))
                return onEnter(event);
            if (!doc.selection)
                return;
            event.preventDefault();
            editor.insert({ br: true });
        }
        function onBackspace(event) {
            handleDelete(event, -1);
        }
        function onDelete(event) {
            handleDelete(event, 1);
        }
        function handleDelete(event, direction) {
            if (event.defaultPrevented)
                return;
            const { typeset: { lines }, doc } = editor;
            const { selection } = doc;
            if (!selection)
                return;
            const [at, to] = selection;
            const isCollapsed = at === to;
            const [start, end] = doc.getLineRange(at);
            // Allow the system to handle non-line-collapsing deletes
            // (Bug in Chrome where backspace at the end of a span can delete an entire paragraph)
            if (isCollapsed && (!IS_CHROME || event.ctrlKey || event.altKey || event.metaKey)) {
                if (direction === -1 && at !== start)
                    return;
                if (direction === 1 && at !== end - 1)
                    return;
            }
            event.preventDefault();
            if (direction === -1 && selection[0] + selection[1] === 0) {
                // At the beginning of the document
                unindent(doc.getLineAt(at), true);
            }
            else {
                const range = normalizeRange(selection);
                const line = doc.getLineAt(range[0]);
                const type = lines.findByAttributes(line.attributes, true);
                // If the deletion will move outside a line (collapsing 2 lines)
                const outside = isCollapsed && ((direction === -1 && at === start) || (direction === 1 && at === end - 1));
                if (outside && !type.contained) {
                    // At the beginning of a line
                    if (direction === -1 && unindent(doc.getLineAt(at)))
                        return;
                    // Delete the next line if it is empty
                    const mergingLine = doc.lines[doc.lines.indexOf(line) + direction];
                    const [first, second] = direction === 1 ? [line, mergingLine] : [mergingLine, line];
                    if (first && isEmpty(first) && second && !isEmpty(second)) {
                        return editor.update(editor.change.delete([range[0] + direction, range[0]], { dontFixNewline: true }), Source.input);
                    }
                }
                editor.delete(direction, { dontFixNewline: type.frozen });
            }
            function unindent(line, force) {
                if (!line)
                    return;
                const type = lines.findByAttributes(line.attributes, true);
                if (!type)
                    return;
                if (type.indentable && line.attributes.indent) {
                    editor.outdent();
                    return true;
                }
                if (force || type !== lines.default && !type.defaultFollows) {
                    editor.formatLine(EMPTY_OBJ$1);
                    return true;
                }
            }
        }
        function onTab(event) {
            if (event.defaultPrevented)
                return;
            event.preventDefault();
            const shortcut = event.modShortcut;
            if (shortcut === 'Tab' || shortcut === 'Mod+]')
                editor.indent();
            else
                editor.outdent();
        }
        function onKeyDown(event) {
            var _a;
            if (event.isComposing)
                return;
            addShortcutsToEvent(event);
            const checkShortcut = shortcut => {
                const command = editor.shortcuts[shortcut];
                if (command && editor.commands[command]) {
                    event.preventDefault();
                    return editor.commands[command]() !== false;
                }
            };
            if (!editor.root.dispatchEvent(ShortcutEvent.fromKeyboardEvent(event))
                || checkShortcut(event.shortcut)
                || checkShortcut(event.osShortcut)
                || checkShortcut(event.modShortcut)) {
                event.preventDefault();
                return;
            }
            switch (event.modShortcut) {
                case 'Enter': return onEnter(event);
                case 'Shift+Enter': return onShiftEnter(event);
                case 'Tab':
                case 'Shift+Tab':
                case 'Mod+]':
                case 'Mod+[': return onTab(event);
            }
            switch ((_a = event.modShortcut) === null || _a === void 0 ? void 0 : _a.split('+').pop()) {
                case 'Backspace': return onBackspace(event);
                case 'Delete': return onDelete(event);
                default: return;
            }
        }
        function isEmpty(line) {
            var _a;
            return line.length === 1 && !((_a = editor.typeset.lines.findByAttributes(line.attributes)) === null || _a === void 0 ? void 0 : _a.frozen);
        }
        return {
            init() {
                editor.root.addEventListener('keydown', onKeyDown);
            },
            destroy() {
                editor.root.removeEventListener('keydown', onKeyDown);
            }
        };
    }

    const dontFixNewline = { dontFixNewline: true };
    const ignoreId = { excludeProps: new Set(['id']) };
    class PasteEvent extends Event {
        constructor(type, init) {
            super(type, init);
            this.delta = init.delta;
            this.html = init.html;
            this.text = init.text;
        }
    }
    function paste(editor, options) {
        function onPaste(event) {
            if (!editor.enabled || !editor.doc.selection)
                return;
            event.preventDefault();
            const dataTransfer = event.clipboardData;
            const { doc } = editor;
            const selection = doc.selection && normalizeRange(doc.selection);
            if (!dataTransfer || !selection)
                return;
            const [at, to] = selection;
            const html = dataTransfer.getData('text/html');
            const text = dataTransfer.getData('text/plain');
            let delta;
            if (!html) {
                if (!text)
                    return;
                delta = new Delta().insert(text);
            }
            else if (options === null || options === void 0 ? void 0 : options.htmlParser) {
                delta = options.htmlParser(editor, html);
            }
            else {
                delta = deltaFromHTML(editor, html, { possiblePartial: true });
            }
            const hasLines = delta.filter(op => typeof op.insert === 'string' && op.insert.includes('\n')).length > 0;
            let length = delta.length();
            if (hasLines) {
                // check the boundaries to see if they can be merged with the current line or need to make a new line
                let lines = Line$1.fromDelta(delta, doc.byId);
                delta = Line$1.toDelta(lines);
                length = delta.length();
                const startLine = doc.getLineAt(at);
                const endLine = doc.getLineAt(to);
                const startAttrs = getAttributes(startLine);
                const endAttrs = startLine === endLine ? startAttrs : getAttributes(endLine);
                // plain text should merge better with the existing content
                if (!html) {
                    lines = lines.map(line => ({ ...line, attributes: startLine.attributes }));
                    if (startAttrs !== endAttrs)
                        lines[lines.length - 1].attributes = endLine.attributes;
                }
                const pastedStartLine = lines[0];
                const pastedStartAttrs = getAttributes(pastedStartLine);
                const pastedEndLine = lines[lines.length - 1];
                const pastedEndAttrs = pastedStartLine === pastedEndLine ? pastedStartAttrs : getAttributes(pastedEndLine);
                if (at !== doc.getLineRange(startLine)[0] && !isEqual(startAttrs, pastedStartAttrs, ignoreId)) {
                    delta = new Delta().insert('\n', startAttrs).concat(delta);
                    length++;
                }
                const lastInsert = delta.ops[delta.ops.length - 1].insert;
                const endsInNewline = typeof lastInsert === 'string' && lastInsert.endsWith('\n');
                // Does the last line of a multi-line paste merge with the last line?
                if (endsInNewline && to !== doc.getLineRange(endLine)[1] && isEqual(endAttrs, pastedEndAttrs, ignoreId)) {
                    // Remove the trailing newline to merge with the last line
                    delta = delta.slice(0, --length);
                    // If a multi-line paste is inserted at the end of a line, delete the line's newline and let the inserted one take
                }
                else if (endsInNewline && to === doc.getLineRange(endLine)[1] - 1) {
                    delta.delete(1);
                    length--;
                }
            }
            const viewEvent = new PasteEvent('paste', { delta, html, text, cancelable: true });
            editor.dispatchEvent(viewEvent);
            delta = viewEvent.delta;
            if (!viewEvent.defaultPrevented) {
                if (delta && delta.ops.length) {
                    const change = editor.change.delete(selection, hasLines ? dontFixNewline : undefined);
                    change.insertContent(at, delta).select(at + length);
                    editor.update(change, Source.paste);
                }
                else if (at !== to) {
                    editor.delete([at, to]);
                }
            }
        }
        return {
            init() {
                editor.root.addEventListener('paste', onPaste);
            },
            destroy() {
                editor.root.removeEventListener('paste', onPaste);
            }
        };
    }
    function getAttributes(line) {
        const { id, ...attributes } = line.attributes;
        return attributes;
    }

    const defaultOptions = {
        copyPlainText: true,
        copyHTML: true
    };
    function copy$1(editor, options = defaultOptions) {
        function onCopy(event) {
            if (!editor.enabled || !editor.doc.selection)
                return;
            event.preventDefault();
            const dataTransfer = event.clipboardData;
            const { doc } = editor;
            const { selection } = doc;
            if (!doc.selection)
                return;
            if (!dataTransfer || !selection)
                return;
            const range = normalizeRange(doc.selection);
            const slice = doc.slice(range[0], range[1]);
            if (!slice.ops.length)
                return;
            const text = slice
                .map(op => typeof op.insert === 'string' ? op.insert : ' ')
                .join('');
            if (options.copyHTML) {
                let html;
                if (text.includes('\n')) {
                    slice.push({ insert: '\n', attributes: doc.getLineFormat(range[1]) });
                    html = docToHTML(editor, new TextDocument(slice));
                }
                else {
                    html = inlineToHTML(editor, slice);
                }
                dataTransfer.setData('text/html', html);
            }
            if (options.copyPlainText) {
                dataTransfer.setData('text/plain', text);
            }
        }
        function onCut(event) {
            onCopy(event);
            editor.delete();
        }
        return {
            init() {
                editor.root.addEventListener('copy', onCopy);
                editor.root.addEventListener('cut', onCut);
            },
            destroy() {
                editor.root.removeEventListener('copy', onCopy);
                editor.root.removeEventListener('cut', onCut);
            }
        };
    }

    function rendering(editor) {
        editor.on('change', onChange);
        function render$1(what) {
            if (!what) {
                const { doc } = editor.modules.decorations || editor;
                render(editor, doc);
            }
            else {
                const { doc, old } = what;
                if (old && doc) {
                    renderChanges(editor, old, doc);
                }
                else if (doc) {
                    render(editor, doc);
                }
            }
        }
        function onChange(event) {
            const { doc, old } = editor.modules.decorations || event;
            if (old.lines !== doc.lines) {
                renderChanges(editor, old, doc);
            }
        }
        return {
            render: render$1,
            destroy() {
                editor.off('change', onChange);
            }
        };
    }

    function selection(editor) {
        let rootDocument;
        let rootWindow;
        let paused = false;
        function onSelectionChange() {
            if (!editor.enabled)
                return;
            const selection = getSelection(editor);
            if (!selection && paused)
                return;
            if (paused)
                paused = false;
            if (selection && selection[0] === selection[1] && editor.doc.selection && editor.doc.selection[0] === selection[0] && editor.doc.selection[1] === selection[0] + 1) {
                // Allow a frozen line (e.g. hr) to move the cursor left with a left arrow key
                const line = editor.doc.getLineAt(selection[0]);
                const type = editor.typeset.lines.findByAttributes(line.attributes, true);
                if (type.frozen) {
                    selection[0]--;
                    selection[1]--;
                }
            }
            const { doc } = editor;
            if (!isEqual(doc.selection, selection)) {
                if (selection && selection[0] === selection[1] && selection[0] >= doc.length) {
                    return; // Assuming this is a text composition at the end of the document, allow the entry
                }
                editor.select(selection);
            }
        }
        function renderSelection() {
            if (paused || !editor.enabled)
                return;
            setSelection(editor, editor.doc.selection);
        }
        function onDecorate() {
            const { doc, typeset: { lines } } = editor;
            const decorator = editor.modules.decorations.getDecorator('selection');
            decorator.clear();
            const selection = doc.selection;
            if (selection) {
                doc.getLinesAt(selection).forEach(line => {
                    if (lines.findByAttributes(line.attributes, true).frozen) {
                        const focused = isEqual(selection, doc.getLineRange(line));
                        decorator.decorateLine(doc.getLineRange(line)[0], { class: 'selected' + (focused ? ' focus' : '') });
                    }
                });
            }
            decorator.apply();
        }
        function onMouseDown(event) {
            // Helps select lines that are not easily selectable (e.g. <hr>)
            let node = event.target;
            while (node.parentNode && node.parentNode !== editor.root)
                node = node.parentNode;
            const start = getLineNodeStart(editor.root, node);
            const line = start != null && editor.doc.getLineAt(start);
            const type = line && editor.typeset.lines.findByAttributes(line.attributes);
            if (start != null && line && type && type.frozen) {
                event.preventDefault();
                editor.select([start, start + line.length]);
            }
        }
        function onChange(event) {
            var _a;
            const selection = ((_a = event.doc) === null || _a === void 0 ? void 0 : _a.selection) || editor.doc.selection;
            setSelection(editor, selection);
        }
        function onWindowFocus() {
            editor.root.classList.toggle('window-inactive', !rootDocument.hasFocus());
        }
        function pause() {
            paused = true;
            const { selection } = editor.doc;
            const { decorations } = editor.modules;
            if (selection && selection[0] !== selection[1] && decorations) {
                const decorator = decorations.getDecorator('pausedSelection');
                decorator.decorateText(selection, { class: 'selected' }).apply();
            }
        }
        function resume() {
            paused = false;
            const { decorations } = editor.modules;
            if (decorations) {
                decorations.removeDecorations('pausedSelection');
            }
            setTimeout(renderSelection);
        }
        return {
            pause,
            resume,
            renderSelection,
            init() {
                rootDocument = editor.root.ownerDocument;
                rootWindow = rootDocument.defaultView;
                rootDocument.addEventListener('selectionchange', onSelectionChange);
                rootWindow.addEventListener('focus', onWindowFocus);
                rootWindow.addEventListener('blur', onWindowFocus);
                editor.root.addEventListener('mousedown', onMouseDown);
                editor.on('change', onChange);
                editor.on('decorate', onDecorate);
            },
            destroy() {
                rootDocument.removeEventListener('selectionchange', onSelectionChange);
                rootWindow.removeEventListener('focus', onWindowFocus);
                rootWindow.removeEventListener('blur', onWindowFocus);
                editor.root.removeEventListener('mousedown', onMouseDown);
                editor.off('change', onChange);
                editor.off('decorate', onDecorate);
                paused = false;
                rootDocument = null;
                rootWindow = null;
            }
        };
    }

    /**
     * Set placeholder text in the editable area when there is no content. Then add the css:
     *
     * ```css
     * .placeholder {
     *   position: relative;
     * }
     * .placeholder::before {
     *   content: attr(data-placeholder);
     *   position: absolute;
     *   left: 0;
     *   right: 0;
     *   opacity: 0.5;
     * }
     * ```
     */
    function placeholder(placeholder, options) {
        return (editor) => {
            function onDecorate({ doc }) {
                var _a, _b, _c;
                const decorator = editor.modules.decorations.getDecorator('placeholder');
                const text = (typeof placeholder === 'function' ? placeholder() : placeholder) || '';
                let lastDecorations;
                if (decorator.hasDecorations()) {
                    const ops = decorator.getDecoration().ops;
                    const last = ops[ops.length - 1];
                    lastDecorations = (_b = (_a = last.attributes) === null || _a === void 0 ? void 0 : _a.decoration) === null || _b === void 0 ? void 0 : _b.placeholder;
                }
                const { lines } = editor.typeset;
                const type = lines.findByAttributes((_c = doc.lines[0]) === null || _c === void 0 ? void 0 : _c.attributes, true);
                const showPlaceholder = lines.default === type && doc.length === 1;
                if (showPlaceholder || (options === null || options === void 0 ? void 0 : options.keepAttribute)) {
                    const attributes = { 'data-placeholder': text || '' };
                    if (showPlaceholder)
                        attributes.class = 'placeholder';
                    if (!isEqual(attributes, lastDecorations)) {
                        decorator.remove();
                        decorator.decorateLine(0, attributes).apply();
                    }
                }
                else {
                    decorator.remove();
                }
            }
            editor.addEventListener('decorate', onDecorate);
            return {
                destroy() {
                    editor.removeEventListener('decorate', onDecorate);
                }
            };
        };
    }

    const defaultModules = { keyboard, input, copy: copy$1, paste, history, decorations, rendering, selection };

    const EMPTY_NOPTIFIER = () => { };
    const EMPTY_ACTIVE = readable({}, EMPTY_NOPTIFIER);
    const EMPTY_DOC = readable(new TextDocument(), EMPTY_NOPTIFIER);
    const EMPTY_SELECTION = readable(null, EMPTY_NOPTIFIER);
    const EMPTY_ROOT = readable(undefined, EMPTY_NOPTIFIER);
    function editorStores(editor) {
        const active = proxy(activeStore(editor));
        const doc = proxy(docStore(editor));
        const selection = proxy(selectionStore(editor));
        const root = proxy(rootStore(editor));
        const focus = focusStore(selection);
        function updateEditor(value) {
            if (value === editor)
                return;
            editor = value;
            active.set(activeStore(editor));
            doc.set(docStore(editor));
            selection.set(selectionStore(editor));
            root.set(rootStore(editor));
        }
        return {
            active,
            doc,
            selection,
            root,
            focus,
            updateEditor,
        };
    }
    function activeStore(editor) {
        if (!editor)
            return EMPTY_ACTIVE;
        let active = editor.getActive();
        return readable(active, set => {
            const update = () => {
                const newActive = editor.getActive();
                if (!isEqual(active, newActive))
                    set(active = newActive);
            };
            editor.on('changed', update);
            editor.on('format', update);
            return () => {
                editor.off('changed', update);
                editor.off('format', update);
            };
        });
    }
    function docStore(editor) {
        if (!editor)
            return EMPTY_DOC;
        return readable(editor.doc, set => {
            const update = () => set(editor.doc);
            update();
            editor.on('changed', update);
            return () => editor.off('changed', update);
        });
    }
    function selectionStore(editor) {
        if (!editor)
            return EMPTY_SELECTION;
        return readable(editor.doc.selection, set => {
            const update = () => set(editor.doc.selection);
            update();
            editor.on('changed', update);
            return () => editor.off('changed', update);
        });
    }
    function focusStore(selection) {
        return derived(selection, selection => !!selection);
    }
    function rootStore(editor) {
        if (!editor)
            return EMPTY_ROOT;
        return readable(editor._root, set => {
            const update = () => set(editor._root);
            update();
            editor.on('root', update);
            return () => editor.off('root', update);
        });
    }
    // Can be create in a component on init and set to another store async, allowing for $mystore use
    function proxy(defaultValueOrStore) {
        const defaultValue = 'subscribe' in defaultValueOrStore ? get_store_value(defaultValueOrStore) : defaultValueOrStore;
        const { set: write, subscribe } = writable(defaultValue);
        let unsub;
        if ('subscribe' in defaultValueOrStore) {
            set(defaultValueOrStore);
        }
        function set(store) {
            if (unsub)
                unsub();
            if (store)
                unsub = store.subscribe(value => write(value));
        }
        return {
            set,
            subscribe
        };
    }

    line({
        name: 'paragraph',
        selector: 'p',
        commands: editor => () => editor.formatLine({}),
        shortcuts: 'Mod+0',
        render: (attributes, children) => h('p', null, children)
    });
    line({
        name: 'header',
        selector: 'h1, h2, h3, h4, h5, h6',
        defaultFollows: true,
        commands: editor => ({
            header: (header) => editor.toggleLineFormat({ header }),
            header1: () => editor.toggleLineFormat({ header: 1 }),
            header2: () => editor.toggleLineFormat({ header: 2 }),
            header3: () => editor.toggleLineFormat({ header: 3 }),
            header4: () => editor.toggleLineFormat({ header: 4 }),
            header5: () => editor.toggleLineFormat({ header: 5 }),
            header6: () => editor.toggleLineFormat({ header: 6 }),
        }),
        shortcuts: {
            'Mod+1': 'header1',
            'Mod+2': 'header2',
            'Mod+3': 'header3',
            'Mod+4': 'header4',
            'Mod+5': 'header5',
            'Mod+6': 'header6',
        },
        fromDom: (node) => ({ header: parseInt(node.nodeName.replace('H', '')) }),
        render: (attributes, children) => h(`h${attributes.header}`, null, children),
    });
    line({
        name: 'list',
        selector: 'ul > li, ol > li',
        indentable: true,
        commands: editor => ({
            bulletList: () => editor.toggleLineFormat({ list: 'bullet' }),
            orderedList: () => editor.toggleLineFormat({ list: 'ordered' }),
            checkList: () => editor.toggleLineFormat({ list: 'check' }),
            indent: () => editor.indent(),
            outdent: () => editor.outdent(),
            toggleCheck: (id) => {
                const line = typeof id === 'string'
                    ? editor.doc.getLineBy(id)
                    : editor.doc.selection
                        ? editor.doc.getLineAt(editor.doc.selection[0])
                        : null;
                if (!line)
                    return false;
                const [at] = editor.doc.getLineRange(line);
                const format = { list: 'check' };
                if (!line.attributes.checked)
                    format.checked = true;
                editor.formatLine(format, at);
            },
        }),
        shortcuts: {
            'Mod+Space': 'toggleCheck',
        },
        fromDom(node) {
            let indent = -1, parent = node.parentNode;
            const list = node.hasAttribute('data-checked') ? 'check' : parent && parent.nodeName === 'OL' ? 'ordered' : 'bullet';
            while (parent) {
                if (/^UL|OL$/.test(parent.nodeName))
                    indent++;
                else if (parent.nodeName !== 'LI')
                    break;
                parent = parent.parentNode;
            }
            if (!indent && node.className.startsWith('ql-indent-')) {
                // Support pasting from quilljs content
                indent = parseInt(node.className.replace('ql-indent-', ''));
            }
            const attr = { list };
            if (indent)
                attr.indent = indent;
            if (node.getAttribute('data-checked') === 'true')
                attr.checked = true;
            return attr;
        },
        nextLineAttributes(attributes) {
            const { start, ...rest } = attributes;
            return rest;
        },
        shouldCombine: (prev, next) => prev.list === next.list || next.indent,
        renderMultiple: (lists, editor, forHTML) => {
            const topLevelChildren = [];
            const levels = [];
            // e.g. levels = [ul, ul]
            lists.forEach(([attributes, children, id]) => {
                const type = attributes.list === 'ordered' ? 'ol' : 'ul';
                const index = attributes.indent || 0;
                let props = { key: id };
                if (attributes.list === 'check') {
                    function toggle(event) {
                        if (!editor.enabled)
                            return;
                        event.preventDefault();
                        editor.commands.toggleCheck(id);
                    }
                    const check = h('button', { class: 'check-list-check', onmousedown: toggle, ontouchstart: toggle, });
                    if (children.length === 1 && children[0].type === 'br')
                        children.push(check);
                    else
                        children.unshift(check);
                    props = {
                        ...props,
                        class: 'check-list-item',
                        ['data-checked']: '' + (attributes.checked || false),
                    };
                }
                const item = applyDecorations(h('li', props, children), attributes);
                while (index >= levels.length) {
                    const newLevel = h(type, { start: attributes.start, type: attributes.type, key: `${id}-outer` });
                    const childrenArray = levels.length ? levels[levels.length - 1].children : topLevelChildren;
                    const lastChild = childrenArray[childrenArray.length - 1];
                    if (typeof lastChild === 'object' && lastChild.type === 'li') {
                        if (forHTML) {
                            // Correct HTML
                            lastChild.children.push(newLevel);
                        }
                        else {
                            // Technically incorrect HTML needed to fix selection bug: when clicking to the right of a list item with a
                            // sub-item, the selection goes to the start of the line instead of the end
                            childrenArray.push(newLevel);
                        }
                    }
                    else {
                        childrenArray.push(newLevel);
                    }
                    levels.push(newLevel);
                }
                if (!compareLists(levels[index], type, attributes)) {
                    const newLevel = h(type, { start: attributes.start, type: attributes.type });
                    const childrenArray = index ? levels[index - 1].children : topLevelChildren;
                    childrenArray.push(newLevel);
                    levels[index] = newLevel;
                }
                levels[index].children.push(item);
                levels.length = index + 1;
            });
            function compareLists(list, type, attributes) {
                return list.type === type
                    && (list.props.start === attributes.start
                        || (list.props.start && !attributes.start))
                    && list.props.type === attributes.type;
            }
            return topLevelChildren[0];
        }
    });
    line({
        name: 'blockquote',
        selector: 'blockquote p',
        commands: editor => (blockquote = true) => {
            if (typeof blockquote !== 'string')
                blockquote = true;
            editor.toggleLineFormat({ blockquote });
        },
        fromDom(node) {
            const { className } = node.parentNode;
            const match = className.match(/quote-(\S+)/);
            const blockquote = match && match[1] !== 'true' && match[1] || true;
            return { blockquote };
        },
        shouldCombine: (prev, next) => prev.blockquote === next.blockquote,
        renderMultiple: quotes => {
            const type = quotes[0][0].blockquote;
            const props = typeof type === 'string' ? { className: `quote-${type}` } : null;
            const children = quotes.map(([attributes, children, id]) => h('p', { key: id }, children));
            return h('blockquote', props, children);
        }
    });
    line({
        name: 'code-block',
        selector: 'pre code',
        contained: true,
        commands: editor => () => editor.toggleLineFormat({ ['code-block']: true }),
        renderMultiple: lines => {
            const children = [];
            lines.forEach(([attributes, inlineChildren, id]) => {
                if (inlineChildren.length && (inlineChildren[inlineChildren.length - 1].type === 'br')) {
                    inlineChildren.pop();
                }
                children.push(h('code', { key: id }, inlineChildren));
                children.push('\n');
            });
            return h('pre', { spellcheck: false }, children);
        }
    });
    line({
        name: 'hr',
        selector: 'hr',
        frozen: true,
        commands: editor => () => {
            const { doc } = editor;
            const { selection } = doc;
            if (!selection)
                return;
            const range = normalizeRange(selection);
            const change = editor.change.delete(range);
            if (range[0] === range[1] && doc.getLineAt(range[0]).length === 1) {
                change
                    .insert(range[0], '\n', { ...doc.getLineFormat(range[0]) })
                    .formatLine(range[0], { hr: true });
            }
            else {
                const delta = new Delta()
                    .insert('\n', doc.getLineAt(range[0]).attributes)
                    .insert('\n', { hr: true });
                change.insertContent(range[0], delta);
                change.select(range[0] + 2);
            }
            editor.update(change);
        },
        render: () => h('hr'),
    });

    format$1({
        name: 'bold',
        selector: 'strong, b',
        styleSelector: '[style*="font-weight:bold"], [style*="font-weight: bold"]',
        commands: editor => () => editor.toggleTextFormat({ bold: true }),
        shortcuts: 'Mod+B',
        render: (attributes, children) => h('strong', null, children),
    });
    format$1({
        name: 'italic',
        selector: 'em, i',
        styleSelector: '[style*="font-style:italic"], [style*="font-style: italic"]',
        commands: editor => () => editor.toggleTextFormat({ italic: true }),
        shortcuts: 'Mod+I',
        render: (attributes, children) => h('em', null, children),
    });
    format$1({
        name: 'code',
        selector: 'code',
        commands: editor => () => editor.toggleTextFormat({ code: true }),
        render: (attributes, children) => h('code', null, children),
    });
    format$1({
        name: 'link',
        selector: 'a[href]',
        greedy: false,
        commands: editor => (link) => editor.toggleTextFormat({ link }),
        fromDom: (node) => node.href,
        render: (attributes, children) => h('a', { href: attributes.link, target: '_blank' }, children),
    });

    embed({
        name: 'image',
        selector: 'img',
        commands: editor => (image, props) => editor.insert({ image, ...props }),
        fromDom: (node) => {
            const image = {};
            ['src', 'alt', 'width', 'height'].forEach(name => {
                if (!node.hasAttribute(name))
                    return;
                const value = node.getAttribute(name);
                if (name === 'src')
                    name = 'image';
                image[name] = value;
            });
            return image;
        },
        render: (embed) => {
            const { image, ...props } = embed;
            props.src = image;
            return h('img', props);
        },
    });
    embed({
        name: 'br',
        selector: 'br',
        commands: editor => () => editor.insert({ br: true }),
        render: () => h('br'),
    });

    const defaultTypes = {
        lines: ['paragraph', 'header', 'list', 'blockquote', 'code-block', 'hr',],
        formats: ['link', 'bold', 'italic', 'code',],
        embeds: ['image', 'br',],
    };

    const EMPTY_OBJ = {};
    const EMPTY_ARR = [];
    const PROXIED_EVENTS = ['focus', 'blur', 'keydown', 'mousedown', 'mouseup', 'click'];
    const eventProxies = new WeakMap();
    class EditorChangeEvent extends Event {
        constructor(type, init) {
            super(type, init);
            this.old = init.old;
            this.doc = init.doc;
            this.change = init.change;
            this.changedLines = init.changedLines;
            this.source = init.source;
            // Fix Safari bug, see https://stackoverflow.com/a/58471803
            Object.setPrototypeOf(this, EditorChangeEvent.prototype);
        }
        // Modify the data during a "changing" event before doc is committed
        modify(delta) {
            if (!this.cancelable)
                throw new Error('Cannot modify an applied change, listen to the "changing" event');
            this.doc = this.doc.apply(delta);
            if (this.change)
                this.change.delta = this.change.delta.compose(delta);
            if (this.changedLines) {
                this.changedLines = this.old.lines === this.doc.lines ? EMPTY_ARR : getChangedLines(this.old, this.doc);
            }
        }
    }
    class EditorFormatEvent extends Event {
        constructor(type, init) {
            super(type, init);
            this.formats = init.formats;
        }
    }
    class Editor extends EventDispatcher {
        constructor(options = {}) {
            super();
            this.activeFormats = EMPTY_OBJ;
            this.commands = {};
            this.shortcuts = {};
            this.modules = {};
            this.catchErrors = !options.dev;
            this.identifier = options.identifier;
            this.typeset = new Typeset(options.types || defaultTypes);
            if (options.doc) {
                this.doc = options.doc;
            }
            else if (options.html) {
                this.doc = docFromHTML(this, options.html);
            }
            else if (options.text) {
                this.doc = new TextDocument(new Delta().insert(options.text));
            }
            else {
                this.doc = new TextDocument();
            }
            this.throwOnError = options.throwOnError || false;
            this._enabled = options.enabled === undefined ? true : options.enabled;
            this._modules = { ...defaultModules, ...options.modules };
            if (options.root)
                this.setRoot(options.root);
        }
        get root() {
            if (!this._root) {
                this.setRoot(document.createElement('div'));
            }
            return this._root;
        }
        get enabled() {
            return this._enabled;
        }
        set enabled(value) {
            value = !!value;
            const changed = this._enabled !== value;
            if (!value && this.doc.selection)
                this.select(null, Source.api);
            this._enabled = value;
            if (this._root)
                this._root.contentEditable = value ? 'true' : 'inherit';
            if (changed)
                this.dispatchEvent(new Event('enabledchange'));
        }
        get change() {
            const change = new TextChange(this.doc);
            change.apply = (source = Source.user) => this.update(change, source);
            return change;
        }
        setRoot(root) {
            if (!root)
                throw new TypeError('Root must be set, cannot be ' + root);
            this.destroy();
            this._root = root;
            this.init();
            this.dispatchEvent(new Event('root'));
            return this;
        }
        update(change, source = Source.user) {
            if (!this.enabled && source !== Source.api) {
                return this;
            }
            if (change instanceof Delta) {
                change = new TextChange(this.doc, change);
            }
            const old = this.doc;
            const doc = old.apply(change, undefined, this.throwOnError);
            const changedLines = old.lines === doc.lines ? EMPTY_ARR : getChangedLines(old, doc);
            this.set(doc, source, change, changedLines);
            return this;
        }
        set(doc, source = Source.user, change, changedLines) {
            const old = this.doc;
            if (doc instanceof Delta) {
                doc = new TextDocument(doc);
            }
            if ((!this.enabled && source !== Source.api) || !doc || old.equals(doc)) {
                return this;
            }
            const changingEvent = new EditorChangeEvent('changing', { cancelable: true, old, doc, change, changedLines, source });
            this.dispatchEvent(changingEvent, this.catchErrors);
            if (changingEvent.defaultPrevented || old.equals(changingEvent.doc))
                return this;
            this.activeFormats = (change === null || change === void 0 ? void 0 : change.activeFormats) ? change.activeFormats : getActiveFormats(this, changingEvent.doc);
            this.doc = changingEvent.doc;
            this.dispatchEvent(new EditorChangeEvent('change', { ...changingEvent, cancelable: false }), this.catchErrors);
            this.dispatchEvent(new EditorChangeEvent('changed', { ...changingEvent, cancelable: false }), this.catchErrors);
            return this;
        }
        getHTML() {
            return docToHTML(this, this.doc);
        }
        setHTML(html, selection = this.doc.selection, source) {
            return this.set(docFromHTML(this, html, selection));
        }
        getDelta() {
            return this.doc.toDelta();
        }
        setDelta(delta, selection = this.doc.selection, source) {
            return this.set(new TextDocument(delta, selection), source);
        }
        getText(range) {
            return this.doc.getText(range);
        }
        setText(text, selection = this.doc.selection, source) {
            return this.set(new TextDocument(new Delta().insert(text), selection), source);
        }
        getActive() {
            const { selection } = this.doc;
            let active = selection
                ? selection[0] === selection[1]
                    ? { ...this.activeFormats, ...this.doc.getLineFormat(selection) }
                    : { ...this.doc.getFormats(selection) }
                : {};
            Object.values(this.modules).forEach(module => {
                if (module.getActive)
                    active = { ...active, ...module.getActive() };
            });
            return active;
        }
        select(at, source) {
            return this.update(this.change.select(at), source);
        }
        insert(insert, format, selection = this.doc.selection, options) {
            if (!selection)
                return this;
            const inPlace = isEqual(selection, this.doc.selection);
            if (format == null && typeof insert === 'string' && insert !== '\n') {
                format = inPlace ? this.activeFormats : getActiveFormats(this, this.doc, selection);
            }
            const type = this.typeset.lines.findByAttributes(format, true);
            const change = this.change.delete(selection);
            const at = normalizeRange(selection)[0];
            if (inPlace)
                change.setActiveFormats(insert !== '\n' && format || getActiveFormats(this, this.doc, selection));
            if (insert === '\n' && type.frozen) {
                const lineFormat = { ...this.doc.getLineFormat(at) };
                const secondLine = { ...format };
                let lastLine = { ...lineFormat };
                const newlines = new Delta()
                    .insert('\n', lineFormat);
                if (this.doc.getLineRange(at)[1] - 1 !== at) {
                    newlines.insert('\n', secondLine);
                }
                else {
                    lastLine = secondLine;
                }
                change.insertContent(at, newlines).formatLine(at, lastLine).select(at + 2);
            }
            else {
                change.insert(at, insert, format, options);
            }
            return this.update(change);
        }
        insertContent(content, selection = this.doc.selection) {
            if (!selection)
                return this;
            const change = this.change
                .delete(selection)
                .insertContent(selection[0], content);
            return this.update(change);
        }
        delete(directionOrSelection, options) {
            let range;
            //  = this.doc.selection;
            if (Array.isArray(directionOrSelection)) {
                range = normalizeRange(directionOrSelection);
            }
            else {
                if (!this.doc.selection)
                    return this;
                range = normalizeRange(this.doc.selection);
                if (directionOrSelection && range[0] === range[1]) {
                    if (directionOrSelection < 0)
                        range = [range[0] + directionOrSelection, range[1]];
                    else
                        range = [range[0], range[1] + directionOrSelection];
                }
            }
            const formats = getActiveFormats(this, this.doc, range);
            const change = this.change.delete(range, options).select(range[0]).setActiveFormats(formats);
            return this.update(change);
        }
        formatText(format, selection = this.doc.selection) {
            if (!selection)
                return this;
            if (typeof format === 'string')
                format = { [format]: true };
            if (selection[0] === selection[1]) {
                this.activeFormats = AttributeMap$1.compose(this.activeFormats, format) || EMPTY_OBJ;
                this.dispatchEvent(new EditorFormatEvent('format', { formats: this.activeFormats }));
                return this;
            }
            changeFormat(this, 'formatText', format, selection);
            return this;
        }
        toggleTextFormat(format, selection = this.doc.selection) {
            if (!selection)
                return this;
            if (typeof format === 'string')
                format = { [format]: true };
            if (selection[0] === selection[1]) {
                if (hasFormat(format, this.activeFormats))
                    format = AttributeMap$1.invert(format);
                this.activeFormats = AttributeMap$1.compose(this.activeFormats, format) || EMPTY_OBJ;
                this.dispatchEvent(new EditorFormatEvent('format', { formats: this.activeFormats }));
                return this;
            }
            changeFormat(this, 'toggleTextFormat', format, selection);
            return this;
        }
        formatLine(format, selection = this.doc.selection) {
            if (typeof format === 'string')
                format = { [format]: true };
            changeFormat(this, 'formatLine', format, selection);
            return this;
        }
        toggleLineFormat(format, selection = this.doc.selection) {
            if (typeof format === 'string')
                format = { [format]: true };
            changeFormat(this, 'toggleLineFormat', format, selection);
            return this;
        }
        indent() {
            indentLines(this, 1);
            return this;
        }
        outdent() {
            indentLines(this, -1);
            return this;
        }
        removeFormat(selection = this.doc.selection) {
            changeFormat(this, 'removeFormat', null, selection);
            return this;
        }
        getBounds(range, relativeTo, relativeInside) {
            var _a;
            if (typeof range === 'number')
                range = [range, range];
            if (!range)
                return undefined;
            let rect = (_a = getBoudingBrowserRange(this, range)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
            if (rect && relativeTo) {
                const relative = relativeTo.getBoundingClientRect();
                const leftOffset = (relativeInside ? relativeTo.scrollLeft : 0) - relative.x;
                const topOffset = (relativeInside ? relativeTo.scrollTop : 0) - relative.y;
                rect = new DOMRect(rect.x + leftOffset, rect.y + topOffset, rect.width, rect.height);
            }
            return rect;
        }
        getAllBounds(range, relativeTo, relativeInside) {
            var _a;
            if (typeof range === 'number')
                range = [range, range];
            const collection = (_a = getBoudingBrowserRange(this, range)) === null || _a === void 0 ? void 0 : _a.getClientRects();
            let list = collection && Array.from(collection);
            if (list && relativeTo) {
                const relative = relativeTo.getBoundingClientRect();
                const leftOffset = (relativeInside ? relativeTo.scrollLeft : 0) - relative.x;
                const topOffset = (relativeInside ? relativeTo.scrollTop : 0) - relative.y;
                list = list.map(rect => new DOMRect(rect.x + leftOffset, rect.y + topOffset, rect.width, rect.height));
            }
            return list;
        }
        getIndexFromPoint(x, y) {
            return getIndexFromPoint(this, x, y);
        }
        render() {
            var _a, _b, _c;
            (_a = this.modules.decorations) === null || _a === void 0 ? void 0 : _a.gatherDecorations();
            (_b = this.modules.rendering) === null || _b === void 0 ? void 0 : _b.render();
            (_c = this.modules.selection) === null || _c === void 0 ? void 0 : _c.renderSelection();
            return this;
        }
        init() {
            const root = this._root;
            if (root.editor)
                root.editor.destroy();
            root.editor = this;
            this.enabled = this._enabled;
            this.commands = {};
            PROXIED_EVENTS.forEach(type => this._root.addEventListener(type, getEventProxy(this)));
            this.typeset.lines.list.forEach(type => type.commands && mergeCommands(this, type.name, type.commands(this)));
            this.typeset.formats.list.forEach(type => type.commands && mergeCommands(this, type.name, type.commands(this)));
            this.typeset.embeds.list.forEach(type => type.commands && mergeCommands(this, type.name, type.commands(this)));
            Object.keys(this._modules).forEach(key => {
                if (!this._modules[key])
                    return;
                const module = this.modules[key] = this._modules[key](this);
                if (module.commands)
                    mergeCommands(this, key, module.commands);
            });
            this.shortcuts = createShortcutMap(this);
            Object.keys(this.modules).forEach(key => { var _a, _b; return (_b = (_a = this.modules[key]).init) === null || _b === void 0 ? void 0 : _b.call(_a); });
            this.render();
        }
        destroy() {
            const root = this._root;
            if (!root)
                return;
            PROXIED_EVENTS.forEach(type => root.removeEventListener(type, getEventProxy(this)));
            Object.values(this.modules).forEach(module => module.destroy && module.destroy());
            this._root = undefined;
            delete root.editor;
        }
    }
    function changeFormat(editor, op, format, selection) {
        if (!selection)
            return;
        const change = editor.change[op](selection, format);
        editor.update(change);
    }
    function getActiveFormats(editor, doc, selection = doc.selection) {
        const { formats } = editor.typeset;
        if (!selection || selection[0] === 0)
            return EMPTY_OBJ;
        const at = normalizeRange(selection)[0];
        // If start of a non-empty line, use the format of the first character, otherwise use the format of the preceeding
        let formatAt = at;
        const attributes = doc.getTextFormat(formatAt);
        const format = {};
        // Sort them by the order found in marks and be efficient
        Object.keys(attributes).forEach(name => {
            const type = formats.get(name);
            if (type && (type.greedy !== false || doc.getTextFormat(at)[name])) {
                format[name] = attributes[name];
            }
        });
        return format;
    }
    function getChangedLines(oldDoc, newDoc) {
        const set = new Set(oldDoc.lines);
        return newDoc.lines.filter(line => !set.has(line));
    }
    function mergeCommands(editor, name, other) {
        if (!other)
            return;
        if (typeof other === 'function')
            editor.commands[name] = enhanceCommand(editor, other);
        else
            Object.keys(other).forEach(key => editor.commands[key] = enhanceCommand(editor, other[key]));
    }
    function enhanceCommand(editor, command) {
        return (...args) => {
            command(...args);
            if (editor.doc.selection)
                editor.root.focus();
        };
    }
    function indentLines(editor, direction = 1) {
        const { typeset: { lines }, doc } = editor;
        const { selection } = doc;
        if (!selection)
            return doc;
        const change = editor.change;
        doc.getLinesAt(selection).forEach(line => {
            const type = lines.findByAttributes(line.attributes, true);
            if (!type.indentable)
                return;
            const range = doc.getLineRange(line);
            let indent = (line.attributes.indent || 0) + direction;
            if (indent <= 0)
                indent = null;
            change.formatLine(range[0], indent < 0 ? EMPTY_OBJ : { ...line.attributes, indent });
        });
        editor.update(change);
    }
    function getEventProxy(editor) {
        let proxy = eventProxies.get(editor);
        if (!proxy) {
            proxy = eventProxy.bind(editor);
            eventProxies.set(editor, proxy);
        }
        return proxy;
    }
    function eventProxy(event) {
        this.dispatchEvent(event);
    }
    function createShortcutMap(editor) {
        const all = {};
        const { typeset: { lines, formats, embeds }, modules } = editor;
        mergeTypeShortcuts(lines, all);
        mergeTypeShortcuts(formats, all);
        mergeTypeShortcuts(embeds, all);
        mergeModuleShortcuts(modules, all);
        return all;
    }
    function mergeTypeShortcuts(types, shortcuts) {
        types.list.forEach(type => {
            const typeShortcuts = type.shortcuts;
            if (!typeShortcuts)
                return;
            if (typeof typeShortcuts === 'string') {
                shortcuts[typeShortcuts] = type.name;
            }
            else {
                mergeShortcuts(typeShortcuts, shortcuts);
            }
        });
    }
    function mergeModuleShortcuts(modules, all) {
        Object.keys(modules).forEach(name => {
            var _a;
            const shortcuts = (_a = modules[name]) === null || _a === void 0 ? void 0 : _a.shortcuts;
            if (shortcuts)
                mergeShortcuts(shortcuts, all);
        });
    }
    function mergeShortcuts(shortcuts, all) {
        Object.keys(shortcuts).forEach(shortcut => all[shortcut] = shortcuts[shortcut]);
    }

    const file$k = "src/frontend/src/components/Header.svelte";
    const get_actions_slot_changes = dirty => ({});
    const get_actions_slot_context = ctx => ({});
    const get_title_slot_changes = dirty => ({});
    const get_title_slot_context = ctx => ({});

    function create_fragment$m(ctx) {
    	let div3;
    	let div0;
    	let label;
    	let svg;
    	let path;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let current;
    	const title_slot_template = /*#slots*/ ctx[1].title;
    	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[0], get_title_slot_context);
    	const actions_slot_template = /*#slots*/ ctx[1].actions;
    	const actions_slot = create_slot(actions_slot_template, ctx, /*$$scope*/ ctx[0], get_actions_slot_context);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			label = element("label");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			div1 = element("div");
    			if (title_slot) title_slot.c();
    			t1 = space();
    			div2 = element("div");
    			if (actions_slot) actions_slot.c();
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "stroke-width", "2");
    			attr_dev(path, "d", "M4 6h16M4 12h16M4 18h16");
    			add_location(path, file$k, 9, 8, 334);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "class", "inline-block w-6 h-6 stroke-current");
    			add_location(svg, file$k, 3, 6, 170);
    			attr_dev(label, "for", "my-drawer-3");
    			attr_dev(label, "class", "btn btn-square btn-ghost");
    			add_location(label, file$k, 2, 4, 105);
    			attr_dev(div0, "class", "flex-none lg:hidden");
    			add_location(div0, file$k, 1, 2, 67);
    			attr_dev(div1, "class", "flex-1 px-2 mx-2 font-bold text-lg");
    			add_location(div1, file$k, 18, 2, 520);
    			add_location(div2, file$k, 21, 2, 606);
    			attr_dev(div3, "class", "w-full navbar bg-base-100 border-b border-base-300");
    			add_location(div3, file$k, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, label);
    			append_dev(label, svg);
    			append_dev(svg, path);
    			append_dev(div3, t0);
    			append_dev(div3, div1);

    			if (title_slot) {
    				title_slot.m(div1, null);
    			}

    			append_dev(div3, t1);
    			append_dev(div3, div2);

    			if (actions_slot) {
    				actions_slot.m(div2, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (title_slot) {
    				if (title_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						title_slot,
    						title_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[0], dirty, get_title_slot_changes),
    						get_title_slot_context
    					);
    				}
    			}

    			if (actions_slot) {
    				if (actions_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						actions_slot,
    						actions_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(actions_slot_template, /*$$scope*/ ctx[0], dirty, get_actions_slot_changes),
    						get_actions_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title_slot, local);
    			transition_in(actions_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title_slot, local);
    			transition_out(actions_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (title_slot) title_slot.d(detaching);
    			if (actions_slot) actions_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, ['title','actions']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    // A svelte action to set the root for your Editor to an element. E.g.
    // <div class="my-editor" use:asRoot={myEditor}></div>
    function asRoot(root, editor) {
        function update(newEditor) {
            if (editor === newEditor)
                return;
            destroy();
            if (newEditor)
                newEditor.setRoot(root);
            editor = newEditor;
        }
        if (root.children.length) {
            editor.set(docFromDom(editor, root));
        }
        if (editor)
            editor.setRoot(root);
        function destroy() {
            if (editor)
                editor.destroy();
        }
        return { update, destroy };
    }

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top, bottom, right, left];
    var start = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect$2,
      requires: ['computeStyles']
    };

    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    var max = Math.max;
    var min = Math.min;
    var round = Math.round;

    function getBoundingClientRect(element, includeScale) {
      if (includeScale === void 0) {
        includeScale = false;
      }

      var rect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;

      if (isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
        // Fallback to 1 in case both values are `0`

        if (offsetWidth > 0) {
          scaleX = round(rect.width) / offsetWidth || 1;
        }

        if (offsetHeight > 0) {
          scaleY = round(rect.height) / offsetHeight || 1;
        }
      }

      return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
      };
    }

    // means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$1(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
      var isIE = navigator.userAgent.indexOf('Trident') !== -1;

      if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$1(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }
    function withinMaxClamp(min, value, max) {
      var v = within(min, value, max);
      return v > max ? max : v;
    }

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top : left;
      var maxProp = axis === 'y' ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      if (process.env.NODE_ENV !== "production") {
        if (!isHTMLElement(arrowElement)) {
          console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
        }
      }

      if (!contains(state.elements.popper, arrowElement)) {
        if (process.env.NODE_ENV !== "production") {
          console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
        }

        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets,
          isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x,
          x = _offsets$x === void 0 ? 0 : _offsets$x,
          _offsets$y = offsets.y,
          y = _offsets$y === void 0 ? 0 : _offsets$y;

      var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);

          if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
          offsetParent[heightProp];
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
          offsetParent[widthProp];
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref4.x;
      y = _ref4.y;

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref5) {
      var state = _ref5.state,
          options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

      if (process.env.NODE_ENV !== "production") {
        var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

        if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
          return transitionProperty.indexOf(property) >= 0;
        })) {
          console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
        }
      }

      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    var passive = {
      passive: true
    };

    function effect(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect,
      data: {}
    };

    var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent

        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle$1(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle$1(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element) {
      var rect = getBoundingClientRect(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;

        if (process.env.NODE_ENV !== "production") {
          console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
        }
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement(placement);

        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis) {
        var _offsetModifierState$;

        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = offset + overflow[mainSide];
        var max$1 = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _offsetModifierState$2;

        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _len = altAxis === 'y' ? 'height' : 'width';

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round(rect.width) / element.offsetWidth || 1;
      var scaleY = round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    } // Returns the composite rect of an element relative to its offsetParent.
    // Composite means it takes into account transforms as well as layout.


    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function format(str) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return [].concat(args).reduce(function (p, c) {
        return p.replace(/%s/, c);
      }, str);
    }

    var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
    var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
    var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
    function validateModifiers(modifiers) {
      modifiers.forEach(function (modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function (value, index, self) {
          return self.indexOf(value) === index;
        }).forEach(function (key) {
          switch (key) {
            case 'name':
              if (typeof modifier.name !== 'string') {
                console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
              }

              break;

            case 'enabled':
              if (typeof modifier.enabled !== 'boolean') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
              }

              break;

            case 'phase':
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
              }

              break;

            case 'fn':
              if (typeof modifier.fn !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'effect':
              if (modifier.effect != null && typeof modifier.effect !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'requires':
              if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
              }

              break;

            case 'requiresIfExists':
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
              }

              break;

            case 'options':
            case 'data':
              break;

            default:
              console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                return "\"" + s + "\"";
              }).join(', ') + "; but \"" + key + "\" was provided.");
          }

          modifier.requires && modifier.requires.forEach(function (requirement) {
            if (modifiers.find(function (mod) {
              return mod.name === requirement;
            }) == null) {
              console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            }
          });
        });
      });
    }

    function uniqueBy(arr, fn) {
      var identifiers = new Set();
      return arr.filter(function (item) {
        var identifier = fn(item);

        if (!identifiers.has(identifier)) {
          identifiers.add(identifier);
          return true;
        }
      });
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
    var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(setOptionsAction) {
            var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            }); // Validate the provided modifiers so that the consumer will get warned
            // if one of the modifiers is invalid for any reason

            if (process.env.NODE_ENV !== "production") {
              var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                var name = _ref.name;
                return name;
              });
              validateModifiers(modifiers);

              if (getBasePlacement(state.options.placement) === auto) {
                var flipModifier = state.orderedModifiers.find(function (_ref2) {
                  var name = _ref2.name;
                  return name === 'flip';
                });

                if (!flipModifier) {
                  console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                }
              }

              var _getComputedStyle = getComputedStyle$1(popper),
                  marginTop = _getComputedStyle.marginTop,
                  marginRight = _getComputedStyle.marginRight,
                  marginBottom = _getComputedStyle.marginBottom,
                  marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
              // cause bugs with positioning, so we'll warn the consumer


              if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                return parseFloat(margin);
              })) {
                console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
              }
            }

            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {
              if (process.env.NODE_ENV !== "production") {
                console.error(INVALID_ELEMENT_ERROR);
              }

              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            var __debug_loops__ = 0;

            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (process.env.NODE_ENV !== "production") {
                __debug_loops__ += 1;

                if (__debug_loops__ > 100) {
                  console.error(INFINITE_LOOP_ERROR);
                  break;
                }
              }

              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {
          if (process.env.NODE_ENV !== "production") {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref3) {
            var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    const OFFSCREEN = -100000;
    const OFFSCREEN_RECT = {
        left: OFFSCREEN,
        right: OFFSCREEN,
        top: OFFSCREEN,
        bottom: OFFSCREEN,
        width: 0,
        height: 0,
    };

    const file$j = "node_modules/typewriter-editor/lib/BubbleMenu.svelte";

    const get_default_slot_changes = dirty => ({
    	commands: dirty[0] & /*editor*/ 1,
    	active: dirty[0] & /*$active*/ 32,
    	selection: dirty[0] & /*activeSelection*/ 16,
    	focus: dirty[0] & /*$focus*/ 64,
    	placement: dirty[0] & /*actualPlacement*/ 8
    });

    const get_default_slot_context = ctx => ({
    	commands: /*editor*/ ctx[0].commands,
    	active: /*$active*/ ctx[5],
    	selection: /*activeSelection*/ ctx[4],
    	focus: /*$focus*/ ctx[6],
    	placement: /*actualPlacement*/ ctx[3]
    });

    // (115:0) {#if activeSelection && activeSelection[0] !== activeSelection[1]}
    function create_if_block$7(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[24].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], get_default_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", /*className*/ ctx[1]);
    			add_location(div, file$j, 115, 0, 3049);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[25](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "focusin", /*onGainFocus*/ ctx[12], false, false, false, false),
    					listen_dev(div, "focusout", /*onLoseFocus*/ ctx[13], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope, editor, $active, activeSelection, $focus, actualPlacement*/ 8388729)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[23],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[23], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}

    			if (!current || dirty[0] & /*className*/ 2) {
    				attr_dev(div, "class", /*className*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[25](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(115:0) {#if activeSelection && activeSelection[0] !== activeSelection[1]}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*activeSelection*/ ctx[4] && /*activeSelection*/ ctx[4][0] !== /*activeSelection*/ ctx[4][1] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*activeSelection*/ ctx[4] && /*activeSelection*/ ctx[4][0] !== /*activeSelection*/ ctx[4][1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*activeSelection*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let activeSelection;
    	let $root;
    	let $doc;
    	let $selection;
    	let $active;
    	let $focus;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BubbleMenu', slots, ['default']);
    	let { editor } = $$props;
    	let { class: className = 'bubble-menu' } = $$props;
    	let { offset = 0 } = $$props;
    	let { padding = 4 } = $$props;
    	let { for: forLineType } = $$props;
    	let { placement = 'top' } = $$props;
    	let menu;
    	let popper;
    	let oldRoot;
    	let oldDoc;
    	let mouseDown = false;
    	let menuHasFocus = false;
    	let actualPlacement = placement;
    	const { active, doc, selection, focus, root, updateEditor } = editorStores(editor);
    	validate_store(active, 'active');
    	component_subscribe($$self, active, value => $$invalidate(5, $active = value));
    	validate_store(doc, 'doc');
    	component_subscribe($$self, doc, value => $$invalidate(21, $doc = value));
    	validate_store(selection, 'selection');
    	component_subscribe($$self, selection, value => $$invalidate(22, $selection = value));
    	validate_store(focus, 'focus');
    	component_subscribe($$self, focus, value => $$invalidate(6, $focus = value));
    	validate_store(root, 'root');
    	component_subscribe($$self, root, value => $$invalidate(20, $root = value));

    	function update() {
    		if (mouseDown) return;

    		if (menu) {
    			if (popper) {
    				popper.update();
    			} else {
    				const element = {
    					getBoundingClientRect: () => editor.getBounds(activeSelection) || OFFSCREEN_RECT,
    					contextElement: editor.root
    				};

    				popper = createPopper(element, menu, {
    					placement,
    					modifiers: [
    						{
    							name: 'arrow',
    							options: { element: '[data-arrow]' }
    						},
    						{
    							name: 'computeStyles',
    							options: { adaptive: false }
    						},
    						{
    							name: 'offset',
    							options: { offset: [0, offset] }
    						},
    						{
    							name: 'preventOverflow',
    							options: { padding }
    						},
    						{
    							name: 'dataOutput',
    							enabled: true,
    							phase: 'write',
    							fn({ state }) {
    								$$invalidate(3, actualPlacement = state.placement.split('-')[0]);
    							}
    						}
    					]
    				});

    				requestAnimationFrame(() => menu && menu.classList.add('active'));
    			}
    		} else {
    			if (popper && !menuHasFocus) {
    				popper.destroy();
    				popper = null;
    			}
    		}
    	}

    	function getActive(mouseDown, menuHasFocus, selection) {
    		let lineType;

    		if (selection && selection[0] === selection[1] - 1) {
    			const line = editor.doc.getLineAt(selection[0]);
    			const type = editor.typeset.lines.findByAttributes(line.attributes, true);

    			if (type.frozen) {
    				lineType = type.name;
    			}
    		}

    		if (lineType != forLineType) selection = null;
    		return mouseDown || menuHasFocus ? activeSelection : selection;
    	}

    	function onMouseDown() {
    		$$invalidate(18, mouseDown = true);
    	}

    	function onMouseUp() {
    		$$invalidate(18, mouseDown = false);
    		update();
    	}

    	function updateRoot(root) {
    		if (oldRoot) {
    			oldRoot.removeEventListener('mousedown', onMouseDown);
    			(oldDoc || oldRoot).removeEventListener('mouseup', onMouseUp);
    		}

    		oldRoot = root;
    		oldDoc = root && root.ownerDocument;

    		if (oldRoot) {
    			oldRoot.addEventListener('mousedown', onMouseDown);
    			(oldDoc || oldRoot).addEventListener('mouseup', onMouseUp);
    		}
    	}

    	function onGainFocus(event) {
    		if (menuHasFocus || event.target.nodeName === 'BUTTON') return;
    		editor.modules.selection.pause();
    		$$invalidate(19, menuHasFocus = true);
    	}

    	function onLoseFocus() {
    		if (!menuHasFocus) return;
    		editor.modules.selection.resume();
    		$$invalidate(19, menuHasFocus = false);
    	}

    	onDestroy(() => {
    		updateRoot();
    		onLoseFocus();
    		if (popper) popper.destroy();
    	});

    	$$self.$$.on_mount.push(function () {
    		if (editor === undefined && !('editor' in $$props || $$self.$$.bound[$$self.$$.props['editor']])) {
    			console.warn("<BubbleMenu> was created without expected prop 'editor'");
    		}

    		if (forLineType === undefined && !('for' in $$props || $$self.$$.bound[$$self.$$.props['for']])) {
    			console.warn("<BubbleMenu> was created without expected prop 'for'");
    		}
    	});

    	const writable_props = ['editor', 'class', 'offset', 'padding', 'for', 'placement'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BubbleMenu> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			menu = $$value;
    			$$invalidate(2, menu);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('editor' in $$props) $$invalidate(0, editor = $$props.editor);
    		if ('class' in $$props) $$invalidate(1, className = $$props.class);
    		if ('offset' in $$props) $$invalidate(14, offset = $$props.offset);
    		if ('padding' in $$props) $$invalidate(15, padding = $$props.padding);
    		if ('for' in $$props) $$invalidate(16, forLineType = $$props.for);
    		if ('placement' in $$props) $$invalidate(17, placement = $$props.placement);
    		if ('$$scope' in $$props) $$invalidate(23, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onDestroy,
    		createPopper,
    		OFFSCREEN_RECT,
    		editorStores,
    		editor,
    		className,
    		offset,
    		padding,
    		forLineType,
    		placement,
    		menu,
    		popper,
    		oldRoot,
    		oldDoc,
    		mouseDown,
    		menuHasFocus,
    		actualPlacement,
    		active,
    		doc,
    		selection,
    		focus,
    		root,
    		updateEditor,
    		update,
    		getActive,
    		onMouseDown,
    		onMouseUp,
    		updateRoot,
    		onGainFocus,
    		onLoseFocus,
    		activeSelection,
    		$root,
    		$doc,
    		$selection,
    		$active,
    		$focus
    	});

    	$$self.$inject_state = $$props => {
    		if ('editor' in $$props) $$invalidate(0, editor = $$props.editor);
    		if ('className' in $$props) $$invalidate(1, className = $$props.className);
    		if ('offset' in $$props) $$invalidate(14, offset = $$props.offset);
    		if ('padding' in $$props) $$invalidate(15, padding = $$props.padding);
    		if ('forLineType' in $$props) $$invalidate(16, forLineType = $$props.forLineType);
    		if ('placement' in $$props) $$invalidate(17, placement = $$props.placement);
    		if ('menu' in $$props) $$invalidate(2, menu = $$props.menu);
    		if ('popper' in $$props) popper = $$props.popper;
    		if ('oldRoot' in $$props) oldRoot = $$props.oldRoot;
    		if ('oldDoc' in $$props) oldDoc = $$props.oldDoc;
    		if ('mouseDown' in $$props) $$invalidate(18, mouseDown = $$props.mouseDown);
    		if ('menuHasFocus' in $$props) $$invalidate(19, menuHasFocus = $$props.menuHasFocus);
    		if ('actualPlacement' in $$props) $$invalidate(3, actualPlacement = $$props.actualPlacement);
    		if ('activeSelection' in $$props) $$invalidate(4, activeSelection = $$props.activeSelection);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*editor*/ 1) {
    			updateEditor(editor);
    		}

    		if ($$self.$$.dirty[0] & /*mouseDown, menuHasFocus, $selection*/ 4980736) {
    			$$invalidate(4, activeSelection = getActive(mouseDown, menuHasFocus, $selection));
    		}

    		if ($$self.$$.dirty[0] & /*menu, $doc*/ 2097156) {
    			update();
    		}

    		if ($$self.$$.dirty[0] & /*$root*/ 1048576) {
    			updateRoot($root);
    		}
    	};

    	return [
    		editor,
    		className,
    		menu,
    		actualPlacement,
    		activeSelection,
    		$active,
    		$focus,
    		active,
    		doc,
    		selection,
    		focus,
    		root,
    		onGainFocus,
    		onLoseFocus,
    		offset,
    		padding,
    		forLineType,
    		placement,
    		mouseDown,
    		menuHasFocus,
    		$root,
    		$doc,
    		$selection,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class BubbleMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$3(
    			this,
    			options,
    			instance$l,
    			create_fragment$l,
    			safe_not_equal,
    			{
    				editor: 0,
    				class: 1,
    				offset: 14,
    				padding: 15,
    				for: 16,
    				placement: 17
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BubbleMenu",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get editor() {
    		throw new Error("<BubbleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set editor(value) {
    		throw new Error("<BubbleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<BubbleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<BubbleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offset() {
    		throw new Error("<BubbleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offset(value) {
    		throw new Error("<BubbleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get padding() {
    		throw new Error("<BubbleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set padding(value) {
    		throw new Error("<BubbleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get for() {
    		throw new Error("<BubbleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set for(value) {
    		throw new Error("<BubbleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placement() {
    		throw new Error("<BubbleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placement(value) {
    		throw new Error("<BubbleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const file$i = "node_modules/svelte-icons/components/IconBase.svelte";

    // (18:2) {#if title}
    function create_if_block$6(ctx) {
    	let title_1;
    	let t;

    	const block = {
    		c: function create() {
    			title_1 = svg_element("title");
    			t = text(/*title*/ ctx[0]);
    			add_location(title_1, file$i, 18, 4, 296);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title_1, anchor);
    			append_dev(title_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(18:2) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let svg;
    	let if_block_anchor;
    	let current;
    	let if_block = /*title*/ ctx[0] && create_if_block$6(ctx);
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			if (default_slot) default_slot.c();
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[1]);
    			attr_dev(svg, "class", "svelte-n8v3p5");
    			add_location(svg, file$i, 16, 0, 227);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			if (if_block) if_block.m(svg, null);
    			append_dev(svg, if_block_anchor);

    			if (default_slot) {
    				default_slot.m(svg, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					if_block.m(svg, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*viewBox*/ 2) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('IconBase', slots, ['default']);
    	let { title = null } = $$props;
    	let { viewBox } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (viewBox === undefined && !('viewBox' in $$props || $$self.$$.bound[$$self.$$.props['viewBox']])) {
    			console.warn("<IconBase> was created without expected prop 'viewBox'");
    		}
    	});

    	const writable_props = ['title', 'viewBox'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<IconBase> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('viewBox' in $$props) $$invalidate(1, viewBox = $$props.viewBox);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ title, viewBox });

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('viewBox' in $$props) $$invalidate(1, viewBox = $$props.viewBox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, viewBox, $$scope, slots];
    }

    class IconBase extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$k, create_fragment$k, safe_not_equal, { title: 0, viewBox: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IconBase",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get title() {
    		throw new Error("<IconBase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<IconBase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewBox() {
    		throw new Error("<IconBase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewBox(value) {
    		throw new Error("<IconBase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const file$h = "node_modules/svelte-icons/fa/FaHeading.svelte";

    // (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
    function create_default_slot$9(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", "M448 96v320h32a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H320a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32V288H160v128h32a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H32a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32V96H32a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h160a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16h-32v128h192V96h-32a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h160a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16z");
    			add_location(path, file$h, 4, 10, 153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let iconbase;
    	let current;
    	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

    	let iconbase_props = {
    		$$slots: { default: [create_default_slot$9] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
    	}

    	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(iconbase.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbase, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbase_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				iconbase_changes.$$scope = { dirty, ctx };
    			}

    			iconbase.$set(iconbase_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbase.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbase.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbase, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FaHeading', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ IconBase });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FaHeading extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FaHeading",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    const file$g = "node_modules/svelte-icons/fa/FaBold.svelte";

    // (4:8) <IconBase viewBox="0 0 384 512" {...$$props}>
    function create_default_slot$8(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", "M333.49 238a122 122 0 0 0 27-65.21C367.87 96.49 308 32 233.42 32H34a16 16 0 0 0-16 16v48a16 16 0 0 0 16 16h31.87v288H34a16 16 0 0 0-16 16v48a16 16 0 0 0 16 16h209.32c70.8 0 134.14-51.75 141-122.4 4.74-48.45-16.39-92.06-50.83-119.6zM145.66 112h87.76a48 48 0 0 1 0 96h-87.76zm87.76 288h-87.76V288h87.76a56 56 0 0 1 0 112z");
    			add_location(path, file$g, 4, 10, 153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(4:8) <IconBase viewBox=\\\"0 0 384 512\\\" {...$$props}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let iconbase;
    	let current;
    	const iconbase_spread_levels = [{ viewBox: "0 0 384 512" }, /*$$props*/ ctx[0]];

    	let iconbase_props = {
    		$$slots: { default: [create_default_slot$8] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
    	}

    	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(iconbase.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbase, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbase_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				iconbase_changes.$$scope = { dirty, ctx };
    			}

    			iconbase.$set(iconbase_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbase.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbase.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbase, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FaBold', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ IconBase });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FaBold extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FaBold",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    const file$f = "node_modules/svelte-icons/fa/FaItalic.svelte";

    // (4:8) <IconBase viewBox="0 0 320 512" {...$$props}>
    function create_default_slot$7(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", "M320 48v32a16 16 0 0 1-16 16h-62.76l-80 320H208a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H16a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h62.76l80-320H112a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h192a16 16 0 0 1 16 16z");
    			add_location(path, file$f, 4, 10, 153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(4:8) <IconBase viewBox=\\\"0 0 320 512\\\" {...$$props}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let iconbase;
    	let current;
    	const iconbase_spread_levels = [{ viewBox: "0 0 320 512" }, /*$$props*/ ctx[0]];

    	let iconbase_props = {
    		$$slots: { default: [create_default_slot$7] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
    	}

    	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(iconbase.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbase, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbase_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				iconbase_changes.$$scope = { dirty, ctx };
    			}

    			iconbase.$set(iconbase_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbase.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbase.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbase, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FaItalic', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ IconBase });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FaItalic extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FaItalic",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    const file$e = "node_modules/svelte-icons/fa/FaListUl.svelte";

    // (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
    function create_default_slot$6(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", "M48 48a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm0 160a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm0 160a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm448 16H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z");
    			add_location(path, file$e, 4, 10, 153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let iconbase;
    	let current;
    	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

    	let iconbase_props = {
    		$$slots: { default: [create_default_slot$6] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
    	}

    	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(iconbase.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbase, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbase_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				iconbase_changes.$$scope = { dirty, ctx };
    			}

    			iconbase.$set(iconbase_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbase.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbase.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbase, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FaListUl', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ IconBase });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FaListUl extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FaListUl",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    const file$d = "src/frontend/src/components/NoteEditor.svelte";

    // (19:0) <BubbleMenu for={null} {editor} let:commands offset={8}>
    function create_default_slot$5(ctx) {
    	let div;
    	let button0;
    	let span0;
    	let heading;
    	let t0;
    	let button1;
    	let span1;
    	let falistul;
    	let t1;
    	let button2;
    	let span2;
    	let bold;
    	let t2;
    	let button3;
    	let span3;
    	let italic;
    	let current;
    	let mounted;
    	let dispose;
    	heading = new FaHeading({ $$inline: true });
    	falistul = new FaListUl({ $$inline: true });
    	bold = new FaBold({ $$inline: true });
    	italic = new FaItalic({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			button0 = element("button");
    			span0 = element("span");
    			create_component(heading.$$.fragment);
    			t0 = space();
    			button1 = element("button");
    			span1 = element("span");
    			create_component(falistul.$$.fragment);
    			t1 = space();
    			button2 = element("button");
    			span2 = element("span");
    			create_component(bold.$$.fragment);
    			t2 = space();
    			button3 = element("button");
    			span3 = element("span");
    			create_component(italic.$$.fragment);
    			attr_dev(span0, "class", "w-6 h-6 p-1");
    			add_location(span0, file$d, 21, 6, 784);
    			attr_dev(button0, "class", "btn btn-sm");
    			add_location(button0, file$d, 20, 4, 722);
    			attr_dev(span1, "class", "w-6 h-6 p-1");
    			add_location(span1, file$d, 24, 6, 912);
    			attr_dev(button1, "class", "btn btn-sm");
    			add_location(button1, file$d, 23, 4, 847);
    			attr_dev(span2, "class", "w-6 h-6 p-1");
    			add_location(span2, file$d, 27, 6, 1035);
    			attr_dev(button2, "class", "btn btn-sm");
    			add_location(button2, file$d, 26, 4, 976);
    			attr_dev(span3, "class", "w-6 h-6 p-1");
    			add_location(span3, file$d, 30, 6, 1156);
    			attr_dev(button3, "class", "btn btn-sm");
    			add_location(button3, file$d, 29, 4, 1095);
    			attr_dev(div, "class", "btn-group");
    			add_location(div, file$d, 19, 2, 694);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(button0, span0);
    			mount_component(heading, span0, null);
    			append_dev(div, t0);
    			append_dev(div, button1);
    			append_dev(button1, span1);
    			mount_component(falistul, span1, null);
    			append_dev(div, t1);
    			append_dev(div, button2);
    			append_dev(button2, span2);
    			mount_component(bold, span2, null);
    			append_dev(div, t2);
    			append_dev(div, button3);
    			append_dev(button3, span3);
    			mount_component(italic, span3, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*commands*/ ctx[3].header1)) /*commands*/ ctx[3].header1.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*commands*/ ctx[3].bulletList)) /*commands*/ ctx[3].bulletList.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*commands*/ ctx[3].bold)) /*commands*/ ctx[3].bold.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button3,
    						"click",
    						function () {
    							if (is_function(/*commands*/ ctx[3].italic)) /*commands*/ ctx[3].italic.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(heading.$$.fragment, local);
    			transition_in(falistul.$$.fragment, local);
    			transition_in(bold.$$.fragment, local);
    			transition_in(italic.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(heading.$$.fragment, local);
    			transition_out(falistul.$$.fragment, local);
    			transition_out(bold.$$.fragment, local);
    			transition_out(italic.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(heading);
    			destroy_component(falistul);
    			destroy_component(bold);
    			destroy_component(italic);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(19:0) <BubbleMenu for={null} {editor} let:commands offset={8}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let bubblemenu;
    	let t;
    	let div;
    	let div_class_value;
    	let asRoot_action;
    	let current;
    	let mounted;
    	let dispose;

    	bubblemenu = new BubbleMenu({
    			props: {
    				for: null,
    				editor: /*editor*/ ctx[0],
    				offset: 8,
    				$$slots: {
    					default: [
    						create_default_slot$5,
    						({ commands }) => ({ 3: commands }),
    						({ commands }) => commands ? 8 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(bubblemenu.$$.fragment);
    			t = space();
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "p-4 min-h-[20rem] textarea border-base-300 " + /*classNames*/ ctx[2] + " " + (/*disabled*/ ctx[1] ? 'opacity-50' : '') + " svelte-16l1zf2");
    			add_location(div, file$d, 35, 0, 1238);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(bubblemenu, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(asRoot_action = asRoot.call(null, div, /*editor*/ ctx[0])),
    					action_destroyer(focus.call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const bubblemenu_changes = {};
    			if (dirty & /*editor*/ 1) bubblemenu_changes.editor = /*editor*/ ctx[0];

    			if (dirty & /*$$scope, commands*/ 24) {
    				bubblemenu_changes.$$scope = { dirty, ctx };
    			}

    			bubblemenu.$set(bubblemenu_changes);

    			if (!current || dirty & /*classNames, disabled*/ 6 && div_class_value !== (div_class_value = "p-4 min-h-[20rem] textarea border-base-300 " + /*classNames*/ ctx[2] + " " + (/*disabled*/ ctx[1] ? 'opacity-50' : '') + " svelte-16l1zf2")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (asRoot_action && is_function(asRoot_action.update) && dirty & /*editor*/ 1) asRoot_action.update.call(null, /*editor*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bubblemenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bubblemenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bubblemenu, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function focus(el) {
    	el.focus();
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NoteEditor', slots, []);
    	let { editor } = $$props;
    	let { disabled = false } = $$props;
    	let { class: classNames = "" } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (editor === undefined && !('editor' in $$props || $$self.$$.bound[$$self.$$.props['editor']])) {
    			console.warn("<NoteEditor> was created without expected prop 'editor'");
    		}
    	});

    	const writable_props = ['editor', 'disabled', 'class'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NoteEditor> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('editor' in $$props) $$invalidate(0, editor = $$props.editor);
    		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
    		if ('class' in $$props) $$invalidate(2, classNames = $$props.class);
    	};

    	$$self.$capture_state = () => ({
    		asRoot,
    		BubbleMenu,
    		Heading: FaHeading,
    		Bold: FaBold,
    		Italic: FaItalic,
    		FaListUl,
    		editor,
    		disabled,
    		classNames,
    		focus
    	});

    	$$self.$inject_state = $$props => {
    		if ('editor' in $$props) $$invalidate(0, editor = $$props.editor);
    		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
    		if ('classNames' in $$props) $$invalidate(2, classNames = $$props.classNames);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*disabled*/ 2) {
    			$$invalidate(0, editor.enabled = !disabled, editor);
    		}
    	};

    	return [editor, disabled, classNames];
    }

    class NoteEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$f, create_fragment$f, safe_not_equal, { editor: 0, disabled: 1, class: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NoteEditor",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get editor() {
    		throw new Error("<NoteEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set editor(value) {
    		throw new Error("<NoteEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<NoteEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<NoteEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<NoteEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<NoteEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const file$c = "src/frontend/src/components/TagEditor.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (24:2) {#each tags as tag}
    function create_each_block$5(ctx) {
    	let button;
    	let span;
    	let t0_value = /*tag*/ ctx[11] + "";
    	let t0;
    	let t1;
    	let svg;
    	let path;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[7](/*tag*/ ctx[11]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			svg = svg_element("svg");
    			path = svg_element("path");
    			add_location(span, file$c, 28, 6, 696);
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "stroke-width", "2");
    			attr_dev(path, "d", "M6 18L18 6M6 6l12 12");
    			add_location(path, file$c, 35, 8, 885);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "class", "inline-block w-4 h-4 stroke-current");
    			add_location(svg, file$c, 29, 6, 721);
    			attr_dev(button, "class", "btn btn-outline btn-sm flex items-center");
    			add_location(button, file$c, 24, 4, 586);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);
    			append_dev(span, t0);
    			append_dev(button, t1);
    			append_dev(button, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*tags*/ 1 && t0_value !== (t0_value = /*tag*/ ctx[11] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(24:2) {#each tags as tag}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div;
    	let t0;
    	let input;
    	let input_class_value;
    	let t1;
    	let button;
    	let t2;
    	let button_disabled_value;
    	let mounted;
    	let dispose;
    	let each_value = /*tags*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			input = element("input");
    			t1 = space();
    			button = element("button");
    			t2 = text("Add");
    			attr_dev(input, "placeholder", "Add tag...");
    			attr_dev(input, "class", input_class_value = "bg-transparent text-base rounded-lg h-8 px-3 w-32 " + (/*disabled*/ ctx[1] ? 'opacity-50' : ''));
    			input.disabled = /*disabled*/ ctx[1];
    			add_location(input, file$c, 44, 2, 1070);
    			attr_dev(button, "class", "btn btn-sm btn-ghost");
    			button.disabled = button_disabled_value = /*newTag*/ ctx[2].trim().length === 0 || /*tags*/ ctx[0].includes(/*newTag*/ ctx[2]) || /*disabled*/ ctx[1];
    			add_location(button, file$c, 54, 2, 1316);
    			attr_dev(div, "class", "flex flex-wrap gap-2");
    			add_location(div, file$c, 22, 0, 525);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}

    			append_dev(div, t0);
    			append_dev(div, input);
    			set_input_value(input, /*newTag*/ ctx[2]);
    			/*input_binding*/ ctx[9](input);
    			append_dev(div, t1);
    			append_dev(div, button);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[8]),
    					listen_dev(input, "keypress", /*onKeyPress*/ ctx[6], false, false, false, false),
    					listen_dev(button, "click", /*add*/ ctx[4], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*remove, tags*/ 33) {
    				each_value = /*tags*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, t0);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*disabled*/ 2 && input_class_value !== (input_class_value = "bg-transparent text-base rounded-lg h-8 px-3 w-32 " + (/*disabled*/ ctx[1] ? 'opacity-50' : ''))) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*disabled*/ 2) {
    				prop_dev(input, "disabled", /*disabled*/ ctx[1]);
    			}

    			if (dirty & /*newTag*/ 4 && input.value !== /*newTag*/ ctx[2]) {
    				set_input_value(input, /*newTag*/ ctx[2]);
    			}

    			if (dirty & /*newTag, tags, disabled*/ 7 && button_disabled_value !== (button_disabled_value = /*newTag*/ ctx[2].trim().length === 0 || /*tags*/ ctx[0].includes(/*newTag*/ ctx[2]) || /*disabled*/ ctx[1])) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			/*input_binding*/ ctx[9](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TagEditor', slots, []);
    	let { tags } = $$props;
    	let { disabled = false } = $$props;
    	let newTag = "";
    	let newTagInput;
    	const dispatch = createEventDispatcher();

    	function add() {
    		dispatch("add", newTag);
    		$$invalidate(2, newTag = "");
    		newTagInput.focus();
    	}

    	function remove(tag) {
    		dispatch("remove", tag);
    	}

    	function onKeyPress(e) {
    		if (e.key === "Enter" && newTag.trim().length > 0 && !tags.includes(newTag)) {
    			add();
    		}
    	}

    	$$self.$$.on_mount.push(function () {
    		if (tags === undefined && !('tags' in $$props || $$self.$$.bound[$$self.$$.props['tags']])) {
    			console.warn("<TagEditor> was created without expected prop 'tags'");
    		}
    	});

    	const writable_props = ['tags', 'disabled'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TagEditor> was created with unknown prop '${key}'`);
    	});

    	const click_handler = tag => remove(tag);

    	function input_input_handler() {
    		newTag = this.value;
    		$$invalidate(2, newTag);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			newTagInput = $$value;
    			$$invalidate(3, newTagInput);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('tags' in $$props) $$invalidate(0, tags = $$props.tags);
    		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		tags,
    		disabled,
    		newTag,
    		newTagInput,
    		dispatch,
    		add,
    		remove,
    		onKeyPress
    	});

    	$$self.$inject_state = $$props => {
    		if ('tags' in $$props) $$invalidate(0, tags = $$props.tags);
    		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
    		if ('newTag' in $$props) $$invalidate(2, newTag = $$props.newTag);
    		if ('newTagInput' in $$props) $$invalidate(3, newTagInput = $$props.newTagInput);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		tags,
    		disabled,
    		newTag,
    		newTagInput,
    		add,
    		remove,
    		onKeyPress,
    		click_handler,
    		input_input_handler,
    		input_binding
    	];
    }

    class TagEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$e, create_fragment$e, safe_not_equal, { tags: 0, disabled: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TagEditor",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get tags() {
    		throw new Error("<TagEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tags(value) {
    		throw new Error("<TagEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<TagEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<TagEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const file$b = "src/frontend/src/components/SharingEditor.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    // (102:2) {:else}
    function create_else_block$4(ctx) {
    	let p0;
    	let t0;
    	let span0;
    	let t2;
    	let span1;
    	let t3_value = /*editedNote*/ ctx[0].owner + "";
    	let t3;
    	let t4;
    	let t5;
    	let p1;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			t0 = text("This note is ");
    			span0 = element("span");
    			span0.textContent = "shared";
    			t2 = text(" with you. It is owned\n      by ");
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = text(".");
    			t5 = space();
    			p1 = element("p");
    			p1.textContent = "Users with whom the owner shared the note:";
    			attr_dev(span0, "class", "font-bold");
    			add_location(span0, file$b, 103, 19, 3443);
    			attr_dev(span1, "class", "italic font-bold");
    			add_location(span1, file$b, 104, 9, 3512);
    			attr_dev(p0, "class", "mt-3");
    			add_location(p0, file$b, 102, 4, 3407);
    			attr_dev(p1, "class", "mt-3");
    			add_location(p1, file$b, 106, 4, 3583);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			append_dev(p0, t0);
    			append_dev(p0, span0);
    			append_dev(p0, t2);
    			append_dev(p0, span1);
    			append_dev(span1, t3);
    			append_dev(p0, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, p1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*editedNote*/ 1 && t3_value !== (t3_value = /*editedNote*/ ctx[0].owner + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(p1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(102:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (96:2) {#if ownedByMe}
    function create_if_block$5(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Add users by their principal or everyone to allow them to read the IP Doc.\n      Optionally you can set a date at which the note will become readable by them.\n      Each user has their principal with a copy button at the top left of the page.";
    			attr_dev(p, "class", "mt-1");
    			add_location(p, file$b, 96, 4, 3118);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(96:2) {#if ownedByMe}",
    		ctx
    	});

    	return block;
    }

    // (110:4) {#each editedNote.users as sharing}
    function create_each_block$4(ctx) {
    	let div;
    	let button;
    	let span0;
    	let b0;
    	let t1;
    	let t2_value = (/*sharing*/ ctx[23].name || "everyone") + "";
    	let t2;
    	let t3;
    	let span1;
    	let b1;
    	let t5;

    	let t6_value = (/*sharing*/ ctx[23].when
    	? new Date(Number(/*sharing*/ ctx[23].when / BigInt(1000000))).toLocaleString()
    	: "always") + "";

    	let t6;
    	let t7;
    	let svg;
    	let line0;
    	let line1;
    	let button_disabled_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[13](/*sharing*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			span0 = element("span");
    			b0 = element("b");
    			b0.textContent = "Who:";
    			t1 = space();
    			t2 = text(t2_value);
    			t3 = space();
    			span1 = element("span");
    			b1 = element("b");
    			b1.textContent = "When:";
    			t5 = space();
    			t6 = text(t6_value);
    			t7 = space();
    			svg = svg_element("svg");
    			line0 = svg_element("line");
    			line1 = svg_element("line");
    			add_location(b0, file$b, 118, 16, 4022);
    			add_location(span0, file$b, 118, 10, 4016);
    			add_location(b1, file$b, 119, 16, 4086);
    			add_location(span1, file$b, 119, 10, 4080);
    			attr_dev(line0, "x1", "3");
    			attr_dev(line0, "y1", "3");
    			attr_dev(line0, "x2", "21");
    			attr_dev(line0, "y2", "21");
    			attr_dev(line0, "stroke", "currentColor");
    			attr_dev(line0, "stroke-width", "2");
    			add_location(line0, file$b, 121, 14, 4310);
    			attr_dev(line1, "x1", "3");
    			attr_dev(line1, "y1", "21");
    			attr_dev(line1, "x2", "21");
    			attr_dev(line1, "y2", "3");
    			attr_dev(line1, "stroke", "currentColor");
    			attr_dev(line1, "stroke-width", "2");
    			add_location(line1, file$b, 122, 14, 4401);
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$b, 120, 10, 4212);
    			attr_dev(button, "class", "btn btn-outline btn-sm flex flex-row items-center gap-2 space-2");
    			button.disabled = button_disabled_value = /*adding*/ ctx[8] || /*removing*/ ctx[9] || !/*ownedByMe*/ ctx[1];
    			add_location(button, file$b, 111, 8, 3777);
    			attr_dev(div, "class", "flex flex-row");
    			add_location(div, file$b, 110, 6, 3741);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    			append_dev(button, span0);
    			append_dev(span0, b0);
    			append_dev(span0, t1);
    			append_dev(span0, t2);
    			append_dev(button, t3);
    			append_dev(button, span1);
    			append_dev(span1, b1);
    			append_dev(span1, t5);
    			append_dev(span1, t6);
    			append_dev(button, t7);
    			append_dev(button, svg);
    			append_dev(svg, line0);
    			append_dev(svg, line1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*editedNote*/ 1 && t2_value !== (t2_value = (/*sharing*/ ctx[23].name || "everyone") + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*editedNote*/ 1 && t6_value !== (t6_value = (/*sharing*/ ctx[23].when
    			? new Date(Number(/*sharing*/ ctx[23].when / BigInt(1000000))).toLocaleString()
    			: "always") + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*adding, removing, ownedByMe*/ 770 && button_disabled_value !== (button_disabled_value = /*adding*/ ctx[8] || /*removing*/ ctx[9] || !/*ownedByMe*/ ctx[1])) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(110:4) {#each editedNote.users as sharing}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div2;
    	let p;
    	let t1;
    	let t2;
    	let div1;
    	let t3;
    	let div0;
    	let label0;
    	let span0;
    	let t5;
    	let input0;
    	let input0_disabled_value;
    	let t6;
    	let label0_class_value;
    	let t7;
    	let input1;
    	let input1_class_value;
    	let t8;
    	let label1;
    	let span1;
    	let t10;
    	let input2;
    	let input2_disabled_value;
    	let t11;
    	let label1_class_value;
    	let t12;
    	let input3;
    	let input3_class_value;
    	let input3_disabled_value;
    	let t13;
    	let button;

    	let t14_value = (/*adding*/ ctx[8]
    	? 'Adding...'
    	: /*removing*/ ctx[9] ? 'Removing... ' : 'Add') + "";

    	let t14;
    	let button_class_value;
    	let button_disabled_value;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*ownedByMe*/ ctx[1]) return create_if_block$5;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	let each_value = /*editedNote*/ ctx[0].users;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			p = element("p");
    			p.textContent = "Sharing IP Docs";
    			t1 = space();
    			if_block.c();
    			t2 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			div0 = element("div");
    			label0 = element("label");
    			span0 = element("span");
    			span0.textContent = "Who:";
    			t5 = space();
    			input0 = element("input");
    			t6 = text(" everyone");
    			t7 = space();
    			input1 = element("input");
    			t8 = space();
    			label1 = element("label");
    			span1 = element("span");
    			span1.textContent = "When:";
    			t10 = space();
    			input2 = element("input");
    			t11 = text("always");
    			t12 = space();
    			input3 = element("input");
    			t13 = space();
    			button = element("button");
    			t14 = text(t14_value);
    			attr_dev(p, "class", "text-lg font-bold mb-2");
    			add_location(p, file$b, 94, 2, 3042);
    			attr_dev(span0, "class", "mx-1 font-bold");
    			add_location(span0, file$b, 129, 8, 4679);
    			attr_dev(input0, "type", "checkbox");
    			attr_dev(input0, "class", "mx-1");
    			input0.disabled = input0_disabled_value = /*adding*/ ctx[8] || /*removing*/ ctx[9];
    			add_location(input0, file$b, 130, 8, 4728);
    			attr_dev(label0, "class", label0_class_value = "inline-flex items-center mx-3 font-normal " + (!/*ownedByMe*/ ctx[1] ? 'hidden' : ''));
    			add_location(label0, file$b, 128, 6, 4584);
    			attr_dev(input1, "placeholder", "Add principal...");

    			attr_dev(input1, "class", input1_class_value = "mx-3 bg-transparent text-base rounded-lg h-8 px-3 w-auto " + (/*adding*/ ctx[8] || /*removing*/ ctx[9]
    			? 'opacity-50'
    			: '') + " " + (!/*ownedByMe*/ ctx[1] || /*newSharingChecked*/ ctx[5]
    			? 'hidden'
    			: ''));

    			input1.disabled = /*adding*/ ctx[8];
    			add_location(input1, file$b, 135, 6, 4892);
    			attr_dev(span1, "class", "mx-1 font-bold");
    			add_location(span1, file$b, 148, 8, 5378);
    			attr_dev(input2, "type", "checkbox");
    			attr_dev(input2, "class", "mx-1");
    			input2.disabled = input2_disabled_value = /*adding*/ ctx[8] || /*removing*/ ctx[9];
    			add_location(input2, file$b, 149, 8, 5428);
    			attr_dev(label1, "class", label1_class_value = "inline-flex items-center mx-3 font-normal " + (!/*ownedByMe*/ ctx[1] ? 'hidden' : ''));
    			add_location(label1, file$b, 147, 6, 5283);
    			attr_dev(input3, "placeholder", "Add date...");
    			attr_dev(input3, "type", "datetime-local");

    			attr_dev(input3, "class", input3_class_value = "mx-3 bg-transparent text-base rounded-lg h-8 px-3 w-auto " + (/*adding*/ ctx[8] || /*removing*/ ctx[9]
    			? 'opacity-50'
    			: '') + " " + (!/*ownedByMe*/ ctx[1] || /*newWhenChecked*/ ctx[4]
    			? 'hidden'
    			: ''));

    			input3.disabled = input3_disabled_value = /*adding*/ ctx[8] || /*newWhenChecked*/ ctx[4];
    			add_location(input3, file$b, 154, 6, 5586);

    			attr_dev(button, "class", button_class_value = "mx-3 btn btn-sm btn-ghost " + (!/*ownedByMe*/ ctx[1] ? 'hidden' : '') + " " + (/*adding*/ ctx[8] || /*removing*/ ctx[9]
    			? 'loading'
    			: ''));

    			button.disabled = button_disabled_value = (/*newSharingChecked*/ ctx[5]
    			? false
    			: /*newSharing*/ ctx[2].trim().length === 0) || /*editedNote*/ ctx[0].users.find(/*func*/ ctx[20]) != null || /*adding*/ ctx[8] || /*removing*/ ctx[9];

    			add_location(button, file$b, 167, 6, 6016);
    			attr_dev(div0, "class", "flex flex-row text-sm");
    			add_location(div0, file$b, 127, 4, 4542);
    			attr_dev(div1, "class", "flex flex-col gap-2 mt-2");
    			add_location(div1, file$b, 108, 2, 3656);
    			attr_dev(div2, "class", "bg-gray-100 dark:bg-base-100 p-4 rounded-lg shadow-md");
    			add_location(div2, file$b, 93, 0, 2972);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, p);
    			append_dev(div2, t1);
    			if_block.m(div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div1, null);
    				}
    			}

    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			append_dev(div0, label0);
    			append_dev(label0, span0);
    			append_dev(label0, t5);
    			append_dev(label0, input0);
    			input0.checked = /*newSharingChecked*/ ctx[5];
    			append_dev(label0, t6);
    			append_dev(div0, t7);
    			append_dev(div0, input1);
    			set_input_value(input1, /*newSharing*/ ctx[2]);
    			/*input1_binding*/ ctx[16](input1);
    			append_dev(div0, t8);
    			append_dev(div0, label1);
    			append_dev(label1, span1);
    			append_dev(label1, t10);
    			append_dev(label1, input2);
    			input2.checked = /*newWhenChecked*/ ctx[4];
    			append_dev(label1, t11);
    			append_dev(div0, t12);
    			append_dev(div0, input3);
    			set_input_value(input3, /*newWhenValue*/ ctx[3]);
    			/*input3_binding*/ ctx[19](input3);
    			append_dev(div0, t13);
    			append_dev(div0, button);
    			append_dev(button, t14);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[14]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[15]),
    					listen_dev(input1, "keypress", /*onKeyPress*/ ctx[12], false, false, false, false),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[17]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[18]),
    					listen_dev(input3, "keypress", /*onKeyPress*/ ctx[12], false, false, false, false),
    					listen_dev(button, "click", /*add*/ ctx[10], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, t2);
    				}
    			}

    			if (dirty & /*adding, removing, ownedByMe, remove, editedNote, Date, Number, BigInt*/ 2819) {
    				each_value = /*editedNote*/ ctx[0].users;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t3);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*adding, removing*/ 768 && input0_disabled_value !== (input0_disabled_value = /*adding*/ ctx[8] || /*removing*/ ctx[9])) {
    				prop_dev(input0, "disabled", input0_disabled_value);
    			}

    			if (dirty & /*newSharingChecked*/ 32) {
    				input0.checked = /*newSharingChecked*/ ctx[5];
    			}

    			if (dirty & /*ownedByMe*/ 2 && label0_class_value !== (label0_class_value = "inline-flex items-center mx-3 font-normal " + (!/*ownedByMe*/ ctx[1] ? 'hidden' : ''))) {
    				attr_dev(label0, "class", label0_class_value);
    			}

    			if (dirty & /*adding, removing, ownedByMe, newSharingChecked*/ 802 && input1_class_value !== (input1_class_value = "mx-3 bg-transparent text-base rounded-lg h-8 px-3 w-auto " + (/*adding*/ ctx[8] || /*removing*/ ctx[9]
    			? 'opacity-50'
    			: '') + " " + (!/*ownedByMe*/ ctx[1] || /*newSharingChecked*/ ctx[5]
    			? 'hidden'
    			: ''))) {
    				attr_dev(input1, "class", input1_class_value);
    			}

    			if (dirty & /*adding*/ 256) {
    				prop_dev(input1, "disabled", /*adding*/ ctx[8]);
    			}

    			if (dirty & /*newSharing*/ 4 && input1.value !== /*newSharing*/ ctx[2]) {
    				set_input_value(input1, /*newSharing*/ ctx[2]);
    			}

    			if (dirty & /*adding, removing*/ 768 && input2_disabled_value !== (input2_disabled_value = /*adding*/ ctx[8] || /*removing*/ ctx[9])) {
    				prop_dev(input2, "disabled", input2_disabled_value);
    			}

    			if (dirty & /*newWhenChecked*/ 16) {
    				input2.checked = /*newWhenChecked*/ ctx[4];
    			}

    			if (dirty & /*ownedByMe*/ 2 && label1_class_value !== (label1_class_value = "inline-flex items-center mx-3 font-normal " + (!/*ownedByMe*/ ctx[1] ? 'hidden' : ''))) {
    				attr_dev(label1, "class", label1_class_value);
    			}

    			if (dirty & /*adding, removing, ownedByMe, newWhenChecked*/ 786 && input3_class_value !== (input3_class_value = "mx-3 bg-transparent text-base rounded-lg h-8 px-3 w-auto " + (/*adding*/ ctx[8] || /*removing*/ ctx[9]
    			? 'opacity-50'
    			: '') + " " + (!/*ownedByMe*/ ctx[1] || /*newWhenChecked*/ ctx[4]
    			? 'hidden'
    			: ''))) {
    				attr_dev(input3, "class", input3_class_value);
    			}

    			if (dirty & /*adding, newWhenChecked*/ 272 && input3_disabled_value !== (input3_disabled_value = /*adding*/ ctx[8] || /*newWhenChecked*/ ctx[4])) {
    				prop_dev(input3, "disabled", input3_disabled_value);
    			}

    			if (dirty & /*newWhenValue*/ 8) {
    				set_input_value(input3, /*newWhenValue*/ ctx[3]);
    			}

    			if (dirty & /*adding, removing*/ 768 && t14_value !== (t14_value = (/*adding*/ ctx[8]
    			? 'Adding...'
    			: /*removing*/ ctx[9] ? 'Removing... ' : 'Add') + "")) set_data_dev(t14, t14_value);

    			if (dirty & /*ownedByMe, adding, removing*/ 770 && button_class_value !== (button_class_value = "mx-3 btn btn-sm btn-ghost " + (!/*ownedByMe*/ ctx[1] ? 'hidden' : '') + " " + (/*adding*/ ctx[8] || /*removing*/ ctx[9]
    			? 'loading'
    			: ''))) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*newSharingChecked, newSharing, editedNote, newWhenValue, adding, removing*/ 813 && button_disabled_value !== (button_disabled_value = (/*newSharingChecked*/ ctx[5]
    			? false
    			: /*newSharing*/ ctx[2].trim().length === 0) || /*editedNote*/ ctx[0].users.find(/*func*/ ctx[20]) != null || /*adding*/ ctx[8] || /*removing*/ ctx[9])) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if_block.d();
    			destroy_each(each_blocks, detaching);
    			/*input1_binding*/ ctx[16](null);
    			/*input3_binding*/ ctx[19](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function dateValue(input) {
    	if (!input) {
    		return null;
    	}

    	const date = new Date(input);
    	return BigInt(date.valueOf()) * BigInt(1000000);
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $auth;
    	validate_store(auth, 'auth');
    	component_subscribe($$self, auth, $$value => $$invalidate(21, $auth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SharingEditor', slots, []);
    	let { editedNote } = $$props;
    	let { ownedByMe = false } = $$props;
    	const dispatch = createEventDispatcher();
    	let newSharing = "";

    	// biome-ignore lint/style/useConst: <explanation>
    	let newWhenValue = "";

    	// biome-ignore lint/style/useConst: <explanation>
    	let newWhenChecked = true;

    	// biome-ignore lint/style/useConst: <explanation>
    	let newSharingChecked = false;

    	let newSharingInput;
    	let newWhenInput;
    	let adding = false;
    	let removing = false;

    	async function add() {
    		$$invalidate(8, adding = true);

    		try {
    			await addUser(editedNote.id, newSharingChecked ? null : newSharing || null, dateValue(newWhenValue), $auth.actor);

    			addNotification({
    				type: "success",
    				message: "User successfully added"
    			});

    			$$invalidate(
    				0,
    				editedNote.users = [
    					...editedNote.users.filter(u => u.name !== newSharing),
    					{
    						name: newSharing,
    						when: dateValue(newWhenValue)
    					}
    				],
    				editedNote
    			);

    			const when = newWhenChecked
    			? null
    			: Number(dateValue(newWhenValue) / BigInt(1000000));

    			dispatch("message", {
    				action: "shared",
    				user: newSharingChecked ? null : newSharing || "everyone",
    				when,
    				createdAt: Date.now()
    			});

    			$$invalidate(2, newSharing = "");
    			$$invalidate(5, newSharingChecked = false);
    			newSharingInput.focus();
    			$$invalidate(4, newWhenChecked = true);
    		} catch(e) {
    			showError(e, "Could not add user.");
    		} finally {
    			$$invalidate(8, adding = false);
    		}

    		await refreshNotes($auth.actor, $auth.crypto).catch(e => showError(e, "Could not refresh notes."));
    	}

    	async function remove(sharing) {
    		$$invalidate(9, removing = true);

    		try {
    			await removeUser(editedNote.id, sharing, $auth.actor);
    			$$invalidate(0, editedNote.users = editedNote.users.filter(u => u.name !== sharing), editedNote);

    			addNotification({
    				type: "success",
    				message: "User successfully removed"
    			});

    			dispatch("message", {
    				action: "unshared",
    				user: sharing || "everyone",
    				when: null,
    				createdAt: Date.now()
    			});
    		} catch(e) {
    			showError(e, "Could not remove user.");
    		} finally {
    			$$invalidate(9, removing = false);
    		}

    		await refreshNotes($auth.actor, $auth.crypto).catch(e => showError(e, "Could not refresh notes."));
    	}

    	function onKeyPress(e) {
    		if (e.key === "Enter" && newSharing.trim().length > 0 && !editedNote.users.find(e => e.name === newSharing && e.when === dateValue(newWhenValue))) {
    			add();
    		}
    	}

    	$$self.$$.on_mount.push(function () {
    		if (editedNote === undefined && !('editedNote' in $$props || $$self.$$.bound[$$self.$$.props['editedNote']])) {
    			console.warn("<SharingEditor> was created without expected prop 'editedNote'");
    		}
    	});

    	const writable_props = ['editedNote', 'ownedByMe'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SharingEditor> was created with unknown prop '${key}'`);
    	});

    	const click_handler = sharing => {
    		remove(sharing.name);
    	};

    	function input0_change_handler() {
    		newSharingChecked = this.checked;
    		$$invalidate(5, newSharingChecked);
    	}

    	function input1_input_handler() {
    		newSharing = this.value;
    		$$invalidate(2, newSharing);
    	}

    	function input1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			newSharingInput = $$value;
    			$$invalidate(6, newSharingInput);
    		});
    	}

    	function input2_change_handler() {
    		newWhenChecked = this.checked;
    		$$invalidate(4, newWhenChecked);
    	}

    	function input3_input_handler() {
    		newWhenValue = this.value;
    		$$invalidate(3, newWhenValue);
    	}

    	function input3_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			newWhenInput = $$value;
    			$$invalidate(7, newWhenInput);
    		});
    	}

    	const func = u => newSharingChecked
    	? u.name === null
    	: u.name === newSharing && u.when === dateValue(newWhenValue);

    	$$self.$$set = $$props => {
    		if ('editedNote' in $$props) $$invalidate(0, editedNote = $$props.editedNote);
    		if ('ownedByMe' in $$props) $$invalidate(1, ownedByMe = $$props.ownedByMe);
    	};

    	$$self.$capture_state = () => ({
    		auth,
    		addUser,
    		refreshNotes,
    		removeUser,
    		addNotification,
    		showError,
    		editedNote,
    		ownedByMe,
    		createEventDispatcher,
    		dispatch,
    		newSharing,
    		newWhenValue,
    		newWhenChecked,
    		newSharingChecked,
    		newSharingInput,
    		newWhenInput,
    		adding,
    		removing,
    		dateValue,
    		add,
    		remove,
    		onKeyPress,
    		$auth
    	});

    	$$self.$inject_state = $$props => {
    		if ('editedNote' in $$props) $$invalidate(0, editedNote = $$props.editedNote);
    		if ('ownedByMe' in $$props) $$invalidate(1, ownedByMe = $$props.ownedByMe);
    		if ('newSharing' in $$props) $$invalidate(2, newSharing = $$props.newSharing);
    		if ('newWhenValue' in $$props) $$invalidate(3, newWhenValue = $$props.newWhenValue);
    		if ('newWhenChecked' in $$props) $$invalidate(4, newWhenChecked = $$props.newWhenChecked);
    		if ('newSharingChecked' in $$props) $$invalidate(5, newSharingChecked = $$props.newSharingChecked);
    		if ('newSharingInput' in $$props) $$invalidate(6, newSharingInput = $$props.newSharingInput);
    		if ('newWhenInput' in $$props) $$invalidate(7, newWhenInput = $$props.newWhenInput);
    		if ('adding' in $$props) $$invalidate(8, adding = $$props.adding);
    		if ('removing' in $$props) $$invalidate(9, removing = $$props.removing);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		editedNote,
    		ownedByMe,
    		newSharing,
    		newWhenValue,
    		newWhenChecked,
    		newSharingChecked,
    		newSharingInput,
    		newWhenInput,
    		adding,
    		removing,
    		add,
    		remove,
    		onKeyPress,
    		click_handler,
    		input0_change_handler,
    		input1_input_handler,
    		input1_binding,
    		input2_change_handler,
    		input3_input_handler,
    		input3_binding,
    		func
    	];
    }

    class SharingEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$d, create_fragment$d, safe_not_equal, { editedNote: 0, ownedByMe: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SharingEditor",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get editedNote() {
    		throw new Error("<SharingEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set editedNote(value) {
    		throw new Error("<SharingEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ownedByMe() {
    		throw new Error("<SharingEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ownedByMe(value) {
    		throw new Error("<SharingEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const file$a = "node_modules/svelte-icons/fa/FaTrash.svelte";

    // (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
    function create_default_slot$4(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", "M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z");
    			add_location(path, file$a, 4, 10, 153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let iconbase;
    	let current;
    	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

    	let iconbase_props = {
    		$$slots: { default: [create_default_slot$4] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
    	}

    	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(iconbase.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbase, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbase_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				iconbase_changes.$$scope = { dirty, ctx };
    			}

    			iconbase.$set(iconbase_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbase.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbase.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbase, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FaTrash', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ IconBase });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FaTrash extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FaTrash",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    const { Error: Error_1, Object: Object_1 } = globals;
    const file$9 = "src/frontend/src/components/EditNote.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (180:0) {:else}
    function create_else_block$3(ctx) {
    	let header;
    	let t;
    	let main;
    	let current_block_type_index;
    	let if_block;
    	let current;

    	header = new Header({
    			props: {
    				$$slots: { title: [create_title_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_4$1, create_if_block_5];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$notesStore*/ ctx[3].state === 'loading') return 0;
    		if (/*$notesStore*/ ctx[3].state === 'loaded') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_2(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t = space();
    			main = element("main");
    			if (if_block) if_block.c();
    			attr_dev(main, "class", "p-4");
    			add_location(main, file$9, 183, 2, 6653);
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, main, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(main, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const header_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				header_changes.$$scope = { dirty, ctx };
    			}

    			header.$set(header_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(main);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(180:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (98:0) {#if editedNote}
    function create_if_block$4(ctx) {
    	let header;
    	let t;
    	let main;
    	let current_block_type_index;
    	let if_block;
    	let current;

    	header = new Header({
    			props: {
    				$$slots: {
    					actions: [create_actions_slot$1],
    					title: [create_title_slot$2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_1$2, create_if_block_2$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$notesStore*/ ctx[3].state === 'loaded') return 0;
    		if (/*$notesStore*/ ctx[3].state === 'loading') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t = space();
    			main = element("main");
    			if (if_block) if_block.c();
    			attr_dev(main, "class", "p-4 space-y-6");
    			add_location(main, file$9, 113, 2, 3763);
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, main, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(main, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const header_changes = {};

    			if (dirty & /*$$scope, deleting, ownedByMe, editedNote, updating*/ 1048678) {
    				header_changes.$$scope = { dirty, ctx };
    			}

    			header.$set(header_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(main);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(98:0) {#if editedNote}",
    		ctx
    	});

    	return block;
    }

    // (182:4) 
    function create_title_slot_1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Edit IP Doc";
    			attr_dev(span, "slot", "title");
    			add_location(span, file$9, 181, 4, 6599);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_title_slot_1.name,
    		type: "slot",
    		source: "(182:4) ",
    		ctx
    	});

    	return block;
    }

    // (188:45) 
    function create_if_block_5(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Could not find IP Doc.";
    			attr_dev(div, "class", "alert alert-error");
    			add_location(div, file$9, 188, 6, 6808);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(188:45) ",
    		ctx
    	});

    	return block;
    }

    // (185:4) {#if $notesStore.state === 'loading'}
    function create_if_block_4$1(ctx) {
    	let spinner;
    	let t;
    	let current;
    	spinner = new Spinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(spinner.$$.fragment);
    			t = text("\n      Loading IP Doc...");
    		},
    		m: function mount(target, anchor) {
    			mount_component(spinner, target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(spinner, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(185:4) {#if $notesStore.state === 'loading'}",
    		ctx
    	});

    	return block;
    }

    // (100:4) 
    function create_title_slot$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Edit note";
    			attr_dev(span, "slot", "title");
    			add_location(span, file$9, 99, 4, 3362);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_title_slot$2.name,
    		type: "slot",
    		source: "(100:4) ",
    		ctx
    	});

    	return block;
    }

    // (107:6) {#if !deleting}
    function create_if_block_3$1(ctx) {
    	let span;
    	let trash;
    	let current;
    	trash = new FaTrash({ $$inline: true });

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(trash.$$.fragment);
    			attr_dev(span, "class", "w-6 h-6 p-1");
    			add_location(span, file$9, 107, 8, 3641);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(trash, span, null);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(trash.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(trash.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(trash);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(107:6) {#if !deleting}",
    		ctx
    	});

    	return block;
    }

    // (101:4) 
    function create_actions_slot$1(ctx) {
    	let button;
    	let t0;
    	let t1_value = (/*deleting*/ ctx[6] ? 'Deleting...' : '') + "";
    	let t1;
    	let button_class_value;
    	let button_disabled_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = !/*deleting*/ ctx[6] && create_if_block_3$1(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (if_block) if_block.c();
    			t0 = space();
    			t1 = text(t1_value);
    			attr_dev(button, "slot", "actions");

    			attr_dev(button, "class", button_class_value = "btn btn-ghost " + (/*deleting*/ ctx[6] ? 'loading' : '') + " " + (!/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked
    			? 'hidden'
    			: ''));

    			button.disabled = button_disabled_value = /*updating*/ ctx[5] || /*deleting*/ ctx[6];
    			add_location(button, file$9, 100, 4, 3404);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if (if_block) if_block.m(button, null);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*deleteNote*/ ctx[9], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!/*deleting*/ ctx[6]) {
    				if (if_block) {
    					if (dirty & /*deleting*/ 64) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(button, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*deleting*/ 64) && t1_value !== (t1_value = (/*deleting*/ ctx[6] ? 'Deleting...' : '') + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty & /*deleting, ownedByMe, editedNote*/ 70 && button_class_value !== (button_class_value = "btn btn-ghost " + (/*deleting*/ ctx[6] ? 'loading' : '') + " " + (!/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked
    			? 'hidden'
    			: ''))) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (!current || dirty & /*updating, deleting*/ 96 && button_disabled_value !== (button_disabled_value = /*updating*/ ctx[5] || /*deleting*/ ctx[6])) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_actions_slot$1.name,
    		type: "slot",
    		source: "(101:4) ",
    		ctx
    	});

    	return block;
    }

    // (175:46) 
    function create_if_block_2$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Loading IP Docs...";
    			attr_dev(div, "class", "text-center text-lg font-semibold");
    			add_location(div, file$9, 176, 6, 6484);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(175:46) ",
    		ctx
    	});

    	return block;
    }

    // (115:4) {#if $notesStore.state === 'loaded'}
    function create_if_block_1$2(ctx) {
    	let noteeditor;
    	let t0;
    	let div4;
    	let div0;
    	let span0;
    	let t2;
    	let span1;
    	let t3_value = new Date(/*editedNote*/ ctx[2].createdAt).toLocaleString() + "";
    	let t3;
    	let t4;
    	let div1;
    	let span2;
    	let t6;
    	let span3;
    	let t7_value = new Date(/*editedNote*/ ctx[2].updatedAt).toLocaleString() + "";
    	let t7;
    	let t8;
    	let div2;
    	let span4;
    	let t10;
    	let span5;

    	let t11_value = (!/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked || /*editedNote*/ ctx[2].locked
    	? 'ReadOnly'
    	: 'Editable') + "";

    	let t11;
    	let t12;
    	let div3;
    	let span6;
    	let t14;
    	let span7;
    	let tageditor;
    	let t15;
    	let div5;
    	let button;
    	let t16_value = (/*updating*/ ctx[5] ? 'Saving...' : 'Save') + "";
    	let t16;
    	let button_class_value;
    	let button_disabled_value;
    	let t17;
    	let sharingeditor;
    	let t18;
    	let div7;
    	let p;
    	let t20;
    	let div6;
    	let current;
    	let mounted;
    	let dispose;

    	noteeditor = new NoteEditor({
    			props: {
    				editor: /*editor*/ ctx[4],
    				disabled: /*updating*/ ctx[5] || /*deleting*/ ctx[6] || !/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked,
    				class: "mb-4"
    			},
    			$$inline: true
    		});

    	tageditor = new TagEditor({
    			props: {
    				tags: /*editedNote*/ ctx[2].tags,
    				disabled: /*updating*/ ctx[5] || /*deleting*/ ctx[6] || !/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked
    			},
    			$$inline: true
    		});

    	tageditor.$on("add", /*add_handler*/ ctx[13]);
    	tageditor.$on("remove", /*remove_handler*/ ctx[14]);

    	sharingeditor = new SharingEditor({
    			props: {
    				editedNote: /*editedNote*/ ctx[2],
    				ownedByMe: /*ownedByMe*/ ctx[1]
    			},
    			$$inline: true
    		});

    	sharingeditor.$on("message", /*addHistory*/ ctx[7]);
    	let each_value = /*history*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			create_component(noteeditor.$$.fragment);
    			t0 = space();
    			div4 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "Created:";
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			div1 = element("div");
    			span2 = element("span");
    			span2.textContent = "Updated:";
    			t6 = space();
    			span3 = element("span");
    			t7 = text(t7_value);
    			t8 = space();
    			div2 = element("div");
    			span4 = element("span");
    			span4.textContent = "Status:";
    			t10 = space();
    			span5 = element("span");
    			t11 = text(t11_value);
    			t12 = space();
    			div3 = element("div");
    			span6 = element("span");
    			span6.textContent = "Tags:";
    			t14 = space();
    			span7 = element("span");
    			create_component(tageditor.$$.fragment);
    			t15 = space();
    			div5 = element("div");
    			button = element("button");
    			t16 = text(t16_value);
    			t17 = space();
    			create_component(sharingeditor.$$.fragment);
    			t18 = space();
    			div7 = element("div");
    			p = element("p");
    			p.textContent = "History";
    			t20 = space();
    			div6 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span0, "class", "font-bold w-28");
    			add_location(span0, file$9, 121, 10, 4159);
    			add_location(span1, file$9, 122, 10, 4214);
    			attr_dev(div0, "class", "flex flex-row");
    			add_location(div0, file$9, 120, 8, 4121);
    			attr_dev(span2, "class", "font-bold w-28");
    			add_location(span2, file$9, 125, 10, 4338);
    			add_location(span3, file$9, 126, 10, 4393);
    			attr_dev(div1, "class", "flex flex-row");
    			add_location(div1, file$9, 124, 8, 4300);
    			attr_dev(span4, "class", "font-bold w-28");
    			add_location(span4, file$9, 129, 10, 4517);
    			add_location(span5, file$9, 130, 10, 4571);
    			attr_dev(div2, "class", "flex flex-row");
    			add_location(div2, file$9, 128, 8, 4479);
    			attr_dev(span6, "class", "font-bold w-28");
    			add_location(span6, file$9, 133, 10, 4727);
    			add_location(span7, file$9, 134, 10, 4779);
    			attr_dev(div3, "class", "flex flex-row");
    			add_location(div3, file$9, 132, 8, 4689);
    			attr_dev(div4, "class", "bg-gray-100 dark:bg-base-100 p-4 rounded-lg shadow-md space-y-2 text-sm");
    			add_location(div4, file$9, 119, 6, 4027);
    			attr_dev(button, "class", button_class_value = "btn btn-primary " + (/*updating*/ ctx[5] ? 'loading' : '') + " w-full md:w-auto");
    			button.disabled = button_disabled_value = /*updating*/ ctx[5] || /*deleting*/ ctx[6] || !/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked;
    			add_location(button, file$9, 147, 8, 5177);
    			attr_dev(div5, "class", "space-y-4");
    			add_location(div5, file$9, 146, 6, 5145);
    			attr_dev(p, "class", "text-lg font-bold mb-2");
    			add_location(p, file$9, 159, 8, 5632);
    			attr_dev(div6, "class", "space-y-1");
    			add_location(div6, file$9, 160, 8, 5686);
    			attr_dev(div7, "class", "bg-gray-100 dark:bg-base-100 p-4 rounded-lg shadow-md");
    			add_location(div7, file$9, 158, 6, 5556);
    		},
    		m: function mount(target, anchor) {
    			mount_component(noteeditor, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, span0);
    			append_dev(div0, t2);
    			append_dev(div0, span1);
    			append_dev(span1, t3);
    			append_dev(div4, t4);
    			append_dev(div4, div1);
    			append_dev(div1, span2);
    			append_dev(div1, t6);
    			append_dev(div1, span3);
    			append_dev(span3, t7);
    			append_dev(div4, t8);
    			append_dev(div4, div2);
    			append_dev(div2, span4);
    			append_dev(div2, t10);
    			append_dev(div2, span5);
    			append_dev(span5, t11);
    			append_dev(div4, t12);
    			append_dev(div4, div3);
    			append_dev(div3, span6);
    			append_dev(div3, t14);
    			append_dev(div3, span7);
    			mount_component(tageditor, span7, null);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, button);
    			append_dev(button, t16);
    			append_dev(div5, t17);
    			mount_component(sharingeditor, div5, null);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, p);
    			append_dev(div7, t20);
    			append_dev(div7, div6);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div6, null);
    				}
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*save*/ ctx[8], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const noteeditor_changes = {};
    			if (dirty & /*editor*/ 16) noteeditor_changes.editor = /*editor*/ ctx[4];
    			if (dirty & /*updating, deleting, ownedByMe, editedNote*/ 102) noteeditor_changes.disabled = /*updating*/ ctx[5] || /*deleting*/ ctx[6] || !/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked;
    			noteeditor.$set(noteeditor_changes);
    			if ((!current || dirty & /*editedNote*/ 4) && t3_value !== (t3_value = new Date(/*editedNote*/ ctx[2].createdAt).toLocaleString() + "")) set_data_dev(t3, t3_value);
    			if ((!current || dirty & /*editedNote*/ 4) && t7_value !== (t7_value = new Date(/*editedNote*/ ctx[2].updatedAt).toLocaleString() + "")) set_data_dev(t7, t7_value);

    			if ((!current || dirty & /*ownedByMe, editedNote*/ 6) && t11_value !== (t11_value = (!/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked || /*editedNote*/ ctx[2].locked
    			? 'ReadOnly'
    			: 'Editable') + "")) set_data_dev(t11, t11_value);

    			const tageditor_changes = {};
    			if (dirty & /*editedNote*/ 4) tageditor_changes.tags = /*editedNote*/ ctx[2].tags;
    			if (dirty & /*updating, deleting, ownedByMe, editedNote*/ 102) tageditor_changes.disabled = /*updating*/ ctx[5] || /*deleting*/ ctx[6] || !/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked;
    			tageditor.$set(tageditor_changes);
    			if ((!current || dirty & /*updating*/ 32) && t16_value !== (t16_value = (/*updating*/ ctx[5] ? 'Saving...' : 'Save') + "")) set_data_dev(t16, t16_value);

    			if (!current || dirty & /*updating*/ 32 && button_class_value !== (button_class_value = "btn btn-primary " + (/*updating*/ ctx[5] ? 'loading' : '') + " w-full md:w-auto")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (!current || dirty & /*updating, deleting, ownedByMe, editedNote*/ 102 && button_disabled_value !== (button_disabled_value = /*updating*/ ctx[5] || /*deleting*/ ctx[6] || !/*ownedByMe*/ ctx[1] || /*editedNote*/ ctx[2].locked)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}

    			const sharingeditor_changes = {};
    			if (dirty & /*editedNote*/ 4) sharingeditor_changes.editedNote = /*editedNote*/ ctx[2];
    			if (dirty & /*ownedByMe*/ 2) sharingeditor_changes.ownedByMe = /*ownedByMe*/ ctx[1];
    			sharingeditor.$set(sharingeditor_changes);

    			if (dirty & /*history, Date*/ 1) {
    				each_value = /*history*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div6, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(noteeditor.$$.fragment, local);
    			transition_in(tageditor.$$.fragment, local);
    			transition_in(sharingeditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(noteeditor.$$.fragment, local);
    			transition_out(tageditor.$$.fragment, local);
    			transition_out(sharingeditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(noteeditor, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div4);
    			destroy_component(tageditor);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(div5);
    			destroy_component(sharingeditor);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(div7);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(115:4) {#if $notesStore.state === 'loaded'}",
    		ctx
    	});

    	return block;
    }

    // (162:10) {#each history as entry}
    function create_each_block$3(ctx) {
    	let div;
    	let span0;
    	let t0_value = new Date(/*entry*/ ctx[17].createdAt).toLocaleDateString() + "";
    	let t0;
    	let br;
    	let t1_value = new Date(/*entry*/ ctx[17].createdAt).toLocaleTimeString() + "";
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = /*entry*/ ctx[17].action + "";
    	let t3;
    	let t4;

    	let t5_value = (/*entry*/ ctx[17].action.includes("shared")
    	? `with ${/*entry*/ ctx[17].user || "everyone"}`
    	: "") + "";

    	let t5;
    	let t6;

    	let t7_value = (/*entry*/ ctx[17].action === "shared"
    	? /*entry*/ ctx[17].when
    		? `after ${new Date(/*entry*/ ctx[17].when).toLocaleString()}`
    		: "always"
    	: "") + "";

    	let t7;
    	let t8;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			br = element("br");
    			t1 = text(t1_value);
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			t5 = text(t5_value);
    			t6 = space();
    			t7 = text(t7_value);
    			t8 = space();
    			add_location(br, file$9, 163, 124, 5981);
    			attr_dev(span0, "class", "font-mono text-gray-600 dark:text-white text-xs");
    			add_location(span0, file$9, 163, 14, 5871);
    			add_location(span1, file$9, 164, 14, 6056);
    			attr_dev(div, "class", "flex flex-row bg-gray-200 dark:bg-base-200 space-x-4 text-sm p-2 rounded-lg shadow-md");
    			add_location(div, file$9, 162, 12, 5757);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, br);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    			append_dev(span1, t4);
    			append_dev(span1, t5);
    			append_dev(span1, t6);
    			append_dev(span1, t7);
    			append_dev(div, t8);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*history*/ 1 && t0_value !== (t0_value = new Date(/*entry*/ ctx[17].createdAt).toLocaleDateString() + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*history*/ 1 && t1_value !== (t1_value = new Date(/*entry*/ ctx[17].createdAt).toLocaleTimeString() + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*history*/ 1 && t3_value !== (t3_value = /*entry*/ ctx[17].action + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*history*/ 1 && t5_value !== (t5_value = (/*entry*/ ctx[17].action.includes("shared")
    			? `with ${/*entry*/ ctx[17].user || "everyone"}`
    			: "") + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*history*/ 1 && t7_value !== (t7_value = (/*entry*/ ctx[17].action === "shared"
    			? /*entry*/ ctx[17].when
    				? `after ${new Date(/*entry*/ ctx[17].when).toLocaleString()}`
    				: "always"
    			: "") + "")) set_data_dev(t7, t7_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(162:10) {#each history as entry}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$4, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*editedNote*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $notesStore;
    	let $auth;
    	validate_store(notesStore, 'notesStore');
    	component_subscribe($$self, notesStore, $$value => $$invalidate(3, $notesStore = $$value));
    	validate_store(auth, 'auth');
    	component_subscribe($$self, auth, $$value => $$invalidate(15, $auth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditNote', slots, []);
    	let { currentRoute } = $$props;
    	let editedNote;
    	let editor;
    	let updating = false;
    	let deleting = false;
    	let { history = [] } = $$props;
    	let { ownedByMe = true } = $$props;

    	function addHistory(e) {
    		if (e.detail.action === "shared") {
    			if (!editedNote.locked) {
    				$$invalidate(2, editedNote.locked = true, editedNote);

    				$$invalidate(0, history = [
    					...history,
    					{
    						action: "locked",
    						user: null,
    						when: null,
    						createdAt: Date.now()
    					}
    				]);
    			}
    		}

    		$$invalidate(0, history = [...history, Object.assign({}, e.detail)]);
    	}

    	async function save() {
    		if ($auth.state !== "initialized") {
    			return;
    		}

    		const html = editor.getHTML();
    		$$invalidate(5, updating = true);

    		await updateNote(
    			Object.assign(Object.assign({}, editedNote), {
    				content: html,
    				title: extractTitle(html),
    				updatedAt: Date.now()
    			}),
    			$auth.actor,
    			$auth.crypto
    		).catch(e => {
    			showError(e, "Could not update note.");
    		}).finally(() => {
    			$$invalidate(5, updating = false);
    		});

    		addNotification({
    			type: "success",
    			message: "IP Doc saved successfully"
    		});

    		await refreshNotes($auth.actor, $auth.crypto).catch(e => showError(e, "Could not refresh IP Doc."));
    	}

    	async function deleteNote() {
    		if ($auth.state !== "initialized") {
    			return;
    		}

    		$$invalidate(6, deleting = true);

    		await $auth.actor.delete_note(editedNote.id).catch(e => {
    			$$invalidate(6, deleting = false);
    			showError(e, "Could not delete IP Doc.");
    		});

    		await refreshNotes($auth.actor, $auth.crypto).catch(e => showError(e, "Could not refresh IP Docs.")).finally(() => {
    			addNotification({
    				type: "success",
    				message: "IP Doc deleted successfully"
    			});

    			navigateTo("/notes");
    		});
    	}

    	function addTag(tag) {
    		$$invalidate(2, editedNote.tags = [...editedNote.tags, tag], editedNote);
    	}

    	function removeTag(tag) {
    		$$invalidate(2, editedNote.tags = editedNote.tags.filter(t => t !== tag), editedNote);
    	}

    	function selfPrincipalString() {
    		if ($auth.state !== "initialized") {
    			throw new Error("expected the auth.state to be initialized");
    		}

    		return $auth.client.getIdentity().getPrincipal().toString();
    	}

    	$$self.$$.on_mount.push(function () {
    		if (currentRoute === undefined && !('currentRoute' in $$props || $$self.$$.bound[$$self.$$.props['currentRoute']])) {
    			console.warn("<EditNote> was created without expected prop 'currentRoute'");
    		}
    	});

    	const writable_props = ['currentRoute', 'history', 'ownedByMe'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditNote> was created with unknown prop '${key}'`);
    	});

    	const add_handler = e => addTag(e.detail);
    	const remove_handler = e => removeTag(e.detail);

    	$$self.$$set = $$props => {
    		if ('currentRoute' in $$props) $$invalidate(12, currentRoute = $$props.currentRoute);
    		if ('history' in $$props) $$invalidate(0, history = $$props.history);
    		if ('ownedByMe' in $$props) $$invalidate(1, ownedByMe = $$props.ownedByMe);
    	};

    	$$self.$capture_state = () => ({
    		navigateTo,
    		Editor,
    		placeholder,
    		extractTitle,
    		notesStore,
    		refreshNotes,
    		updateNote,
    		Header,
    		NoteEditor,
    		TagEditor,
    		SharingEditor,
    		Trash: FaTrash,
    		addNotification,
    		showError,
    		auth,
    		Spinner,
    		currentRoute,
    		editedNote,
    		editor,
    		updating,
    		deleting,
    		history,
    		ownedByMe,
    		addHistory,
    		save,
    		deleteNote,
    		addTag,
    		removeTag,
    		selfPrincipalString,
    		$notesStore,
    		$auth
    	});

    	$$self.$inject_state = $$props => {
    		if ('currentRoute' in $$props) $$invalidate(12, currentRoute = $$props.currentRoute);
    		if ('editedNote' in $$props) $$invalidate(2, editedNote = $$props.editedNote);
    		if ('editor' in $$props) $$invalidate(4, editor = $$props.editor);
    		if ('updating' in $$props) $$invalidate(5, updating = $$props.updating);
    		if ('deleting' in $$props) $$invalidate(6, deleting = $$props.deleting);
    		if ('history' in $$props) $$invalidate(0, history = $$props.history);
    		if ('ownedByMe' in $$props) $$invalidate(1, ownedByMe = $$props.ownedByMe);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$notesStore, editedNote, currentRoute*/ 4108) {
    			{
    				if ($notesStore.state === "loaded" && !editedNote) {
    					const note = $notesStore.list.find(note => note.id.toString() === currentRoute.namedParams.id);

    					if (note) {
    						$$invalidate(2, editedNote = Object.assign({}, note));
    						$$invalidate(0, history = note.history);

    						$$invalidate(4, editor = new Editor({
    								modules: {
    									placeholder: placeholder("Start typing...")
    								},
    								html: editedNote.content
    							}));

    						$$invalidate(1, ownedByMe = note.owner === selfPrincipalString());
    					}
    				}
    			}
    		}
    	};

    	return [
    		history,
    		ownedByMe,
    		editedNote,
    		$notesStore,
    		editor,
    		updating,
    		deleting,
    		addHistory,
    		save,
    		deleteNote,
    		addTag,
    		removeTag,
    		currentRoute,
    		add_handler,
    		remove_handler
    	];
    }

    class EditNote extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$3(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			currentRoute: 12,
    			history: 0,
    			ownedByMe: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditNote",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get currentRoute() {
    		throw new Error_1("<EditNote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRoute(value) {
    		throw new Error_1("<EditNote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get history() {
    		throw new Error_1("<EditNote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set history(value) {
    		throw new Error_1("<EditNote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ownedByMe() {
    		throw new Error_1("<EditNote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ownedByMe(value) {
    		throw new Error_1("<EditNote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    let initialDraft = {
        content: '',
        tags: [],
    };
    try {
        const savedDraft = JSON.parse(localStorage.getItem('draft'));
        if ('content' in savedDraft && 'tags' in savedDraft) {
            initialDraft = savedDraft;
        }
    }
    catch (_a) { }
    const draft = writable(initialDraft);
    draft.subscribe((draft) => {
        localStorage.setItem('draft', JSON.stringify(draft));
    });
    auth.subscribe(($auth) => {
        if ($auth.state === 'anonymous') {
            draft.set(initialDraft);
        }
    });

    const file$8 = "src/frontend/src/components/NewNote.svelte";

    // (56:2) 
    function create_title_slot$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "New IP Doc";
    			attr_dev(span, "slot", "title");
    			add_location(span, file$8, 55, 2, 1668);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_title_slot$1.name,
    		type: "slot",
    		source: "(56:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let header;
    	let t0;
    	let main;
    	let noteeditor;
    	let t1;
    	let div1;
    	let div0;
    	let span0;
    	let t3;
    	let span1;
    	let tageditor;
    	let t4;
    	let button;
    	let t5_value = (/*creating*/ ctx[0] ? 'Adding...' : 'Add note') + "";
    	let t5;
    	let button_class_value;
    	let current;
    	let mounted;
    	let dispose;

    	header = new Header({
    			props: {
    				$$slots: { title: [create_title_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	noteeditor = new NoteEditor({
    			props: {
    				editor: /*editor*/ ctx[2],
    				class: "mb-3",
    				disabled: /*creating*/ ctx[0]
    			},
    			$$inline: true
    		});

    	tageditor = new TagEditor({
    			props: {
    				tags: /*tags*/ ctx[1],
    				disabled: /*creating*/ ctx[0]
    			},
    			$$inline: true
    		});

    	tageditor.$on("add", /*add_handler*/ ctx[7]);
    	tageditor.$on("remove", /*remove_handler*/ ctx[8]);

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t0 = space();
    			main = element("main");
    			create_component(noteeditor.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "Tags:";
    			t3 = space();
    			span1 = element("span");
    			create_component(tageditor.$$.fragment);
    			t4 = space();
    			button = element("button");
    			t5 = text(t5_value);
    			attr_dev(span0, "class", "font-bold w-28");
    			add_location(span0, file$8, 62, 6, 1922);
    			add_location(span1, file$8, 63, 6, 1970);
    			attr_dev(div0, "class", "flex flex-row");
    			add_location(div0, file$8, 61, 4, 1888);
    			attr_dev(div1, "class", "bg-gray-100 dark:bg-base-100 p-4 rounded-lg shadow-md space-y-2 text-sm");
    			add_location(div1, file$8, 60, 2, 1798);
    			attr_dev(button, "class", button_class_value = "btn mt-6 btn-primary " + (/*creating*/ ctx[0] ? 'loading' : ''));
    			button.disabled = /*creating*/ ctx[0];
    			add_location(button, file$8, 73, 2, 2182);
    			attr_dev(main, "class", "p-4");
    			add_location(main, file$8, 58, 0, 1718);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, main, anchor);
    			mount_component(noteeditor, main, null);
    			append_dev(main, t1);
    			append_dev(main, div1);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			append_dev(div0, t3);
    			append_dev(div0, span1);
    			mount_component(tageditor, span1, null);
    			append_dev(main, t4);
    			append_dev(main, button);
    			append_dev(button, t5);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "beforeunload", /*saveDraft*/ ctx[4], false, false, false, false),
    					listen_dev(button, "click", /*add*/ ctx[3], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const header_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				header_changes.$$scope = { dirty, ctx };
    			}

    			header.$set(header_changes);
    			const noteeditor_changes = {};
    			if (dirty & /*creating*/ 1) noteeditor_changes.disabled = /*creating*/ ctx[0];
    			noteeditor.$set(noteeditor_changes);
    			const tageditor_changes = {};
    			if (dirty & /*tags*/ 2) tageditor_changes.tags = /*tags*/ ctx[1];
    			if (dirty & /*creating*/ 1) tageditor_changes.disabled = /*creating*/ ctx[0];
    			tageditor.$set(tageditor_changes);
    			if ((!current || dirty & /*creating*/ 1) && t5_value !== (t5_value = (/*creating*/ ctx[0] ? 'Adding...' : 'Add note') + "")) set_data_dev(t5, t5_value);

    			if (!current || dirty & /*creating*/ 1 && button_class_value !== (button_class_value = "btn mt-6 btn-primary " + (/*creating*/ ctx[0] ? 'loading' : ''))) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (!current || dirty & /*creating*/ 1) {
    				prop_dev(button, "disabled", /*creating*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(noteeditor.$$.fragment, local);
    			transition_in(tageditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(noteeditor.$$.fragment, local);
    			transition_out(tageditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(main);
    			destroy_component(noteeditor);
    			destroy_component(tageditor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $auth;
    	let $draft;
    	validate_store(auth, 'auth');
    	component_subscribe($$self, auth, $$value => $$invalidate(9, $auth = $$value));
    	validate_store(draft, 'draft');
    	component_subscribe($$self, draft, $$value => $$invalidate(10, $draft = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NewNote', slots, []);
    	let creating = false;
    	let tags = $draft.tags;

    	const editor = new Editor({
    			modules: {
    				placeholder: placeholder("Start typing...")
    			},
    			html: $draft.content
    		});

    	async function add() {
    		if ($auth.state !== "initialized") {
    			return;
    		}

    		$$invalidate(0, creating = true);

    		await addNote(noteFromContent(editor.getHTML(), tags, $auth.client.getIdentity().getPrincipal()), $auth.actor, $auth.crypto).catch(e => {
    			showError(e, "Could not add note.");
    		}).finally(() => {
    			$$invalidate(0, creating = false);
    		});

    		// if creation was successful, reset the editor
    		editor.setHTML("");

    		$$invalidate(1, tags = []);

    		addNotification({
    			type: "success",
    			message: "IP Doc added successfully"
    		});

    		// refresh notes in the background
    		refreshNotes($auth.actor, $auth.crypto).catch(e => showError(e, "Could not refresh notes."));
    	}

    	function saveDraft() {
    		draft.set({ content: editor.getHTML(), tags });
    	}

    	function addTag(tag) {
    		$$invalidate(1, tags = [...tags, tag]);
    	}

    	function removeTag(tag) {
    		$$invalidate(1, tags = tags.filter(t => t !== tag));
    	}

    	onDestroy(saveDraft);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NewNote> was created with unknown prop '${key}'`);
    	});

    	const add_handler = e => addTag(e.detail);
    	const remove_handler = e => removeTag(e.detail);

    	$$self.$capture_state = () => ({
    		onDestroy,
    		Editor,
    		placeholder,
    		noteFromContent,
    		auth,
    		draft,
    		addNote,
    		refreshNotes,
    		addNotification,
    		showError,
    		Header,
    		NoteEditor,
    		TagEditor,
    		creating,
    		tags,
    		editor,
    		add,
    		saveDraft,
    		addTag,
    		removeTag,
    		$auth,
    		$draft
    	});

    	$$self.$inject_state = $$props => {
    		if ('creating' in $$props) $$invalidate(0, creating = $$props.creating);
    		if ('tags' in $$props) $$invalidate(1, tags = $$props.tags);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		creating,
    		tags,
    		editor,
    		add,
    		saveDraft,
    		addTag,
    		removeTag,
    		add_handler,
    		remove_handler
    	];
    }

    class NewNote extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NewNote",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    const file$7 = "src/frontend/src/components/Note.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (16:6) {:else}
    function create_else_block$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Unnamed note";
    			attr_dev(span, "class", "text-gray-500");
    			add_location(span, file$7, 16, 8, 545);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(16:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (14:6) {#if note.title}
    function create_if_block_1$1(ctx) {
    	let t_value = /*note*/ ctx[0].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*note*/ 1 && t_value !== (t_value = /*note*/ ctx[0].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(14:6) {#if note.title}",
    		ctx
    	});

    	return block;
    }

    // (21:4) {#if note.tags.length > 0}
    function create_if_block$3(ctx) {
    	let div;
    	let each_value = /*note*/ ctx[0].tags;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "mt-4 ");
    			add_location(div, file$7, 21, 6, 673);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*dispatch, note*/ 5) {
    				each_value = /*note*/ ctx[0].tags;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(21:4) {#if note.tags.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (23:8) {#each note.tags as tag}
    function create_each_block$2(ctx) {
    	let button;
    	let t0_value = /*tag*/ ctx[4] + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[3](/*tag*/ ctx[4], ...args);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(button, "class", "btn btn-outline btn-sm mr-2 mb-2 pointer-events-auto");
    			add_location(button, file$7, 23, 10, 736);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*note*/ 1 && t0_value !== (t0_value = /*tag*/ ctx[4] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(23:8) {#each note.tags as tag}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let a;
    	let div;
    	let h2;
    	let t0;
    	let t1;
    	let t2;
    	let a_href_value;

    	function select_block_type(ctx, dirty) {
    		if (/*note*/ ctx[0].title) return create_if_block_1$1;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*note*/ ctx[0].tags.length > 0 && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			a = element("a");
    			div = element("div");
    			h2 = element("h2");
    			if_block0.c();
    			t0 = space();
    			t1 = text(/*contentSummary*/ ctx[1]);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(h2, "class", "text-lg font-bold mb-2 line-clamp-3");
    			add_location(h2, file$7, 12, 4, 430);
    			attr_dev(div, "class", "pointer-events-none");
    			add_location(div, file$7, 11, 2, 392);
    			attr_dev(a, "class", "p-4 rounded-md border border-base-300 dark:border-base-300 bg-base dark:bg-base-100 hover:-translate-y-2 transition-transform");
    			attr_dev(a, "href", a_href_value = `/notes/edit/${/*note*/ ctx[0].id}`);
    			add_location(a, file$7, 7, 0, 214);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, div);
    			append_dev(div, h2);
    			if_block0.m(h2, null);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, t2);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(h2, null);
    				}
    			}

    			if (dirty & /*contentSummary*/ 2) set_data_dev(t1, /*contentSummary*/ ctx[1]);

    			if (/*note*/ ctx[0].tags.length > 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$3(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*note*/ 1 && a_href_value !== (a_href_value = `/notes/edit/${/*note*/ ctx[0].id}`)) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let contentSummary;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Note', slots, []);
    	let { note } = $$props;
    	const dispatch = createEventDispatcher();

    	$$self.$$.on_mount.push(function () {
    		if (note === undefined && !('note' in $$props || $$self.$$.bound[$$self.$$.props['note']])) {
    			console.warn("<Note> was created without expected prop 'note'");
    		}
    	});

    	const writable_props = ['note'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Note> was created with unknown prop '${key}'`);
    	});

    	const click_handler = (tag, e) => {
    		dispatch('tagclick', tag);
    		e.stopPropagation();
    		e.preventDefault();
    	};

    	$$self.$$set = $$props => {
    		if ('note' in $$props) $$invalidate(0, note = $$props.note);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		summarize,
    		note,
    		dispatch,
    		contentSummary
    	});

    	$$self.$inject_state = $$props => {
    		if ('note' in $$props) $$invalidate(0, note = $$props.note);
    		if ('contentSummary' in $$props) $$invalidate(1, contentSummary = $$props.contentSummary);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*note*/ 1) {
    			$$invalidate(1, contentSummary = summarize(note));
    		}
    	};

    	return [note, contentSummary, dispatch, click_handler];
    }

    class Note extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$9, create_fragment$9, safe_not_equal, { note: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Note",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get note() {
    		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set note(value) {
    		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const file$6 = "src/frontend/src/components/Notes.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (32:2) 
    function create_title_slot(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Your IP Docs";
    			attr_dev(span, "slot", "title");
    			add_location(span, file$6, 31, 2, 943);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_title_slot.name,
    		type: "slot",
    		source: "(32:2) ",
    		ctx
    	});

    	return block;
    }

    // (34:4) {#if $notesStore.state === 'loaded' && $notesStore.list.length > 0}
    function create_if_block_4(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "New IP Doc";
    			attr_dev(a, "class", "btn btn-primary");
    			attr_dev(a, "href", "/");
    			add_location(a, file$6, 34, 6, 1097);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(34:4) {#if $notesStore.state === 'loaded' && $notesStore.list.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (33:2) <svelte:fragment slot="actions">
    function create_actions_slot(ctx) {
    	let if_block_anchor;
    	let if_block = /*$notesStore*/ ctx[1].state === 'loaded' && /*$notesStore*/ ctx[1].list.length > 0 && create_if_block_4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*$notesStore*/ ctx[1].state === 'loaded' && /*$notesStore*/ ctx[1].list.length > 0) {
    				if (if_block) ; else {
    					if_block = create_if_block_4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_actions_slot.name,
    		type: "slot",
    		source: "(33:2) <svelte:fragment slot=\\\"actions\\\">",
    		ctx
    	});

    	return block;
    }

    // (68:42) 
    function create_if_block_3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Could not load notes.";
    			attr_dev(div, "class", "alert alert-error");
    			add_location(div, file$6, 68, 4, 2128);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(68:42) ",
    		ctx
    	});

    	return block;
    }

    // (43:43) 
    function create_if_block_1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$notesStore*/ ctx[1].list.length > 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(43:43) ",
    		ctx
    	});

    	return block;
    }

    // (40:2) {#if $notesStore.state === 'loading'}
    function create_if_block$2(ctx) {
    	let spinner;
    	let t;
    	let current;
    	spinner = new Spinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(spinner.$$.fragment);
    			t = text("\n    Loading notes...");
    		},
    		m: function mount(target, anchor) {
    			mount_component(spinner, target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(spinner, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(40:2) {#if $notesStore.state === 'loading'}",
    		ctx
    	});

    	return block;
    }

    // (62:4) {:else}
    function create_else_block$1(ctx) {
    	let div0;
    	let t1;
    	let div1;
    	let a;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "You don't have any IP Docs.";
    			t1 = space();
    			div1 = element("div");
    			a = element("a");
    			a.textContent = "Add you IP Doc";
    			attr_dev(div0, "class", "text-center pt-8 italic");
    			add_location(div0, file$6, 62, 6, 1886);
    			attr_dev(a, "href", "/");
    			attr_dev(a, "class", "btn btn-primary");
    			add_location(a, file$6, 64, 8, 2003);
    			attr_dev(div1, "class", "text-center pt-8 ");
    			add_location(div1, file$6, 63, 6, 1963);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, a);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(62:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (44:4) {#if $notesStore.list.length > 0}
    function create_if_block_2(ctx) {
    	let div0;
    	let input;
    	let input_class_value;
    	let t;
    	let div1;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*filteredNotes*/ ctx[2];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*note*/ ctx[6].id;
    	validate_each_keys(ctx, each_value, get_each_context$1, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$1(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			input = element("input");
    			t = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(input, "class", input_class_value = "bg-transparent text-base " + (/*filter*/ ctx[0].length > 0 ? 'border' : '') + " rounded-lg h-8 px-3");
    			attr_dev(input, "placeholder", "Filter notes...");
    			add_location(input, file$6, 45, 8, 1400);
    			attr_dev(div0, "class", "mb-6");
    			add_location(div0, file$6, 44, 6, 1373);
    			attr_dev(div1, "class", "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 max-w-7xl");
    			add_location(div1, file$6, 54, 6, 1632);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, input);
    			set_input_value(input, /*filter*/ ctx[0]);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div1, null);
    				}
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[4]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*filter*/ 1 && input_class_value !== (input_class_value = "bg-transparent text-base " + (/*filter*/ ctx[0].length > 0 ? 'border' : '') + " rounded-lg h-8 px-3")) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*filter*/ 1 && input.value !== /*filter*/ ctx[0]) {
    				set_input_value(input, /*filter*/ ctx[0]);
    			}

    			if (dirty & /*filteredNotes, filter*/ 5) {
    				each_value = /*filteredNotes*/ ctx[2];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$1, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, outro_and_destroy_block, create_each_block$1, null, get_each_context$1);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(44:4) {#if $notesStore.list.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (58:8) {#each filteredNotes as note (note.id)}
    function create_each_block$1(key_1, ctx) {
    	let first;
    	let note;
    	let current;

    	note = new Note({
    			props: { note: /*note*/ ctx[6] },
    			$$inline: true
    		});

    	note.$on("tagclick", /*tagclick_handler*/ ctx[5]);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(note.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(note, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const note_changes = {};
    			if (dirty & /*filteredNotes*/ 4) note_changes.note = /*note*/ ctx[6];
    			note.$set(note_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(note.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(note.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(note, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(58:8) {#each filteredNotes as note (note.id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let header;
    	let t;
    	let main;
    	let current_block_type_index;
    	let if_block;
    	let current;

    	header = new Header({
    			props: {
    				$$slots: {
    					actions: [create_actions_slot],
    					title: [create_title_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$2, create_if_block_1, create_if_block_3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$notesStore*/ ctx[1].state === 'loading') return 0;
    		if (/*$notesStore*/ ctx[1].state === 'loaded') return 1;
    		if (/*$notesStore*/ ctx[1].state === 'error') return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t = space();
    			main = element("main");
    			if (if_block) if_block.c();
    			attr_dev(main, "class", "p-4");
    			add_location(main, file$6, 38, 0, 1189);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, main, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(main, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const header_changes = {};

    			if (dirty & /*$$scope, $notesStore*/ 514) {
    				header_changes.$$scope = { dirty, ctx };
    			}

    			header.$set(header_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(main);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let searchIndex;
    	let $notesStore;
    	validate_store(notesStore, 'notesStore');
    	component_subscribe($$self, notesStore, $$value => $$invalidate(1, $notesStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Notes', slots, []);
    	let filter = "";
    	let filteredNotes;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Notes> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		filter = this.value;
    		$$invalidate(0, filter);
    	}

    	const tagclick_handler = e => $$invalidate(0, filter = e.detail);

    	$$self.$capture_state = () => ({
    		notesStore,
    		Header,
    		Note,
    		Spinner,
    		filter,
    		filteredNotes,
    		searchIndex,
    		$notesStore
    	});

    	$$self.$inject_state = $$props => {
    		if ('filter' in $$props) $$invalidate(0, filter = $$props.filter);
    		if ('filteredNotes' in $$props) $$invalidate(2, filteredNotes = $$props.filteredNotes);
    		if ('searchIndex' in $$props) $$invalidate(3, searchIndex = $$props.searchIndex);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$notesStore*/ 2) {
    			$$invalidate(3, searchIndex = $notesStore.state === "loaded"
    			? $notesStore.list.map(note => {
    					const div = document.createElement("div");
    					div.innerHTML = note.content;
    					const content = div.innerText;
    					return [content, ...note.tags].join("/#delimiter#/").toLowerCase();
    				})
    			: []);
    		}

    		if ($$self.$$.dirty & /*$notesStore, filter, searchIndex*/ 11) {
    			{
    				if ($notesStore.state === "loaded") {
    					if (filter.length > 0) {
    						$$invalidate(2, filteredNotes = $notesStore.list.filter((_, i) => {
    							return searchIndex[i].includes(filter.toLowerCase());
    						}));
    					} else {
    						$$invalidate(2, filteredNotes = $notesStore.list);
    					}
    				}
    			}
    		}
    	};

    	return [
    		filter,
    		$notesStore,
    		filteredNotes,
    		searchIndex,
    		input_input_handler,
    		tagclick_handler
    	];
    }

    class Notes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notes",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    const file$5 = "node_modules/svelte-icons/fa/FaPlusSquare.svelte";

    // (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
    function create_default_slot$3(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-32 252c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92H92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z");
    			add_location(path, file$5, 4, 10, 153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let iconbase;
    	let current;
    	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

    	let iconbase_props = {
    		$$slots: { default: [create_default_slot$3] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
    	}

    	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(iconbase.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbase, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbase_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				iconbase_changes.$$scope = { dirty, ctx };
    			}

    			iconbase.$set(iconbase_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbase.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbase.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbase, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FaPlusSquare', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ IconBase });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FaPlusSquare extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FaPlusSquare",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    const file$4 = "node_modules/svelte-icons/fa/FaBook.svelte";

    // (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
    function create_default_slot$2(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", "M448 360V24c0-13.3-10.7-24-24-24H96C43 0 0 43 0 96v320c0 53 43 96 96 96h328c13.3 0 24-10.7 24-24v-16c0-7.5-3.5-14.3-8.9-18.7-4.2-15.4-4.2-59.3 0-74.7 5.4-4.3 8.9-11.1 8.9-18.6zM128 134c0-3.3 2.7-6 6-6h212c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H134c-3.3 0-6-2.7-6-6v-20zm0 64c0-3.3 2.7-6 6-6h212c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H134c-3.3 0-6-2.7-6-6v-20zm253.4 250H96c-17.7 0-32-14.3-32-32 0-17.6 14.4-32 32-32h285.4c-1.9 17.1-1.9 46.9 0 64z");
    			add_location(path, file$4, 4, 10, 153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let iconbase;
    	let current;
    	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

    	let iconbase_props = {
    		$$slots: { default: [create_default_slot$2] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
    	}

    	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(iconbase.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbase, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbase_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				iconbase_changes.$$scope = { dirty, ctx };
    			}

    			iconbase.$set(iconbase_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbase.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbase.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbase, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FaBook', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ IconBase });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FaBook extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FaBook",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    const file$3 = "node_modules/svelte-icons/fa/FaDoorOpen.svelte";

    // (4:8) <IconBase viewBox="0 0 640 512" {...$$props}>
    function create_default_slot$1(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", "M624 448h-80V113.45C544 86.19 522.47 64 496 64H384v64h96v384h144c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM312.24 1.01l-192 49.74C105.99 54.44 96 67.7 96 82.92V448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h336V33.18c0-21.58-19.56-37.41-39.76-32.17zM264 288c-13.25 0-24-14.33-24-32s10.75-32 24-32 24 14.33 24 32-10.75 32-24 32z");
    			add_location(path, file$3, 4, 10, 153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(4:8) <IconBase viewBox=\\\"0 0 640 512\\\" {...$$props}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let iconbase;
    	let current;
    	const iconbase_spread_levels = [{ viewBox: "0 0 640 512" }, /*$$props*/ ctx[0]];

    	let iconbase_props = {
    		$$slots: { default: [create_default_slot$1] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
    	}

    	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(iconbase.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbase, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbase_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				iconbase_changes.$$scope = { dirty, ctx };
    			}

    			iconbase.$set(iconbase_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbase.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbase.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbase, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FaDoorOpen', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ IconBase });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FaDoorOpen extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FaDoorOpen",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        const [xValue, xUnit] = split_css_unit(x);
        const [yValue, yUnit] = split_css_unit(y);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * xValue}${xUnit}, ${(1 - t) * yValue}${yUnit});
			opacity: ${target_opacity - (od * u)}`
        };
    }

    const file$2 = "src/frontend/src/components/Disclaimer.svelte";

    // (10:0) {#if !isDismissed}
    function create_if_block$1(ctx) {
    	let div;
    	let p;
    	let disclaimercopy;
    	let t0;
    	let button;
    	let div_outro;
    	let current;
    	let mounted;
    	let dispose;
    	disclaimercopy = new DisclaimerCopy({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			create_component(disclaimercopy.$$.fragment);
    			t0 = space();
    			button = element("button");
    			button.textContent = "I understand";
    			attr_dev(p, "class", "opacity-90 sm:flex-1");
    			add_location(p, file$2, 14, 4, 431);
    			attr_dev(button, "class", "btn btn-outline btn-xs sm:btn-sm sm:self-start mt-4 sm:mt-0 sm:ml-4 opacity-90");
    			add_location(button, file$2, 18, 4, 503);
    			attr_dev(div, "class", "sticky bottom-0 p-4 text-xs bg-base-300 mt-4 sm:flex");
    			add_location(div, file$2, 10, 2, 329);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			mount_component(disclaimercopy, p, null);
    			append_dev(div, t0);
    			append_dev(div, button);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*dismiss*/ ctx[1], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(disclaimercopy.$$.fragment, local);
    			if (div_outro) div_outro.end(1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(disclaimercopy.$$.fragment, local);
    			div_outro = create_out_transition(div, fly, { y: 50 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(disclaimercopy);
    			if (detaching && div_outro) div_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(10:0) {#if !isDismissed}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = !/*isDismissed*/ ctx[0] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*isDismissed*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isDismissed*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Disclaimer', slots, []);
    	let isDismissed = !!window.localStorage.getItem('disclaimer-dismissed');

    	function dismiss() {
    		window.localStorage.setItem('disclaimer-dismissed', 'yes');
    		$$invalidate(0, isDismissed = true);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Disclaimer> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		DisclaimerCopy,
    		isDismissed,
    		dismiss
    	});

    	$$self.$inject_state = $$props => {
    		if ('isDismissed' in $$props) $$invalidate(0, isDismissed = $$props.isDismissed);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isDismissed, dismiss];
    }

    class Disclaimer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Disclaimer",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    async function copyText(text) {
        if ('clipboard' in navigator) {
            await navigator.clipboard.writeText(text);
        }
        else {
            /**
             * This is the fallback deprecated way of copying text to the clipboard. Only runs if it can't find the clipboard API.
             */
            const element = document.createElement('input');
            element.type = 'text';
            element.disabled = true;
            element.style.setProperty('position', 'fixed');
            element.style.setProperty('z-index', '-100');
            element.style.setProperty('pointer-events', 'none');
            element.style.setProperty('opacity', '0');
            element.value = text;
            document.body.appendChild(element);
            element.click();
            element.select();
            document.execCommand('copy');
            document.body.removeChild(element);
        }
    }
    const copy = (element, params) => {
        async function handle() {
            if (text)
                try {
                    await copyText(text);
                    element.dispatchEvent(new CustomEvent('svelte-copy', { detail: text }));
                }
                catch (e) {
                    element.dispatchEvent(new CustomEvent('svelte-copy:error', { detail: e }));
                }
        }
        let events = typeof params == 'string' ? ['click'] : [params.events].flat(1);
        let text = typeof params == 'string' ? params : params.text;
        events.forEach((event) => {
            element.addEventListener(event, handle, true);
        });
        return {
            update: (newParams) => {
                const newEvents = typeof newParams == 'string'
                    ? ['click']
                    : [newParams.events].flat(1);
                const newText = typeof newParams == 'string' ? newParams : newParams.text;
                const addedEvents = newEvents.filter((x) => !events.includes(x));
                const removedEvents = events.filter((x) => !newEvents.includes(x));
                addedEvents.forEach((event) => {
                    element.addEventListener(event, handle, true);
                });
                removedEvents.forEach((event) => {
                    element.removeEventListener(event, handle, true);
                });
                events = newEvents;
                text = newText;
            },
            destroy: () => {
                events.forEach((event) => {
                    element.removeEventListener(event, handle, true);
                });
            },
        };
    };

    const file$1 = "src/frontend/src/components/SidebarLayout.svelte";

    function create_fragment$3(ctx) {
    	let div10;
    	let input;
    	let t0;
    	let div1;
    	let div0;
    	let t1;
    	let disclaimer;
    	let t2;
    	let div9;
    	let label;
    	let t3;
    	let aside;
    	let div4;
    	let div2;
    	let img0;
    	let img0_src_value;
    	let t4;
    	let div3;
    	let img1;
    	let img1_src_value;
    	let t5;
    	let div7;
    	let div5;
    	let t7;
    	let div6;
    	let small;
    	let t8_value = /*$auth*/ ctx[0].client.getIdentity().getPrincipal() + "";
    	let t8;
    	let button0;
    	let svg;
    	let title;
    	let t9;
    	let g;
    	let path;
    	let copy_action;
    	let t10;
    	let ul;
    	let li0;
    	let a0;
    	let span0;
    	let faplussquare;
    	let t11;
    	let t12;
    	let li1;
    	let a1;
    	let span1;
    	let fabook;
    	let t13;
    	let t14;
    	let li2;
    	let t15;
    	let li3;
    	let button1;
    	let span2;
    	let fadooropen;
    	let t16;
    	let t17;
    	let div8;
    	let img2;
    	let img2_src_value;
    	let t18;
    	let img3;
    	let img3_src_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
    	disclaimer = new Disclaimer({ $$inline: true });
    	faplussquare = new FaPlusSquare({ $$inline: true });
    	fabook = new FaBook({ $$inline: true });
    	fadooropen = new FaDoorOpen({ $$inline: true });

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			input = element("input");
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			create_component(disclaimer.$$.fragment);
    			t2 = space();
    			div9 = element("div");
    			label = element("label");
    			t3 = space();
    			aside = element("aside");
    			div4 = element("div");
    			div2 = element("div");
    			img0 = element("img");
    			t4 = space();
    			div3 = element("div");
    			img1 = element("img");
    			t5 = space();
    			div7 = element("div");
    			div5 = element("div");
    			div5.textContent = "My Principal";
    			t7 = space();
    			div6 = element("div");
    			small = element("small");
    			t8 = text(t8_value);
    			button0 = element("button");
    			svg = svg_element("svg");
    			title = svg_element("title");
    			t9 = text("copy");
    			g = svg_element("g");
    			path = svg_element("path");
    			t10 = space();
    			ul = element("ul");
    			li0 = element("li");
    			a0 = element("a");
    			span0 = element("span");
    			create_component(faplussquare.$$.fragment);
    			t11 = text("\n            New IP Doc");
    			t12 = space();
    			li1 = element("li");
    			a1 = element("a");
    			span1 = element("span");
    			create_component(fabook.$$.fragment);
    			t13 = text("\n            Your IP Docs");
    			t14 = space();
    			li2 = element("li");
    			t15 = space();
    			li3 = element("li");
    			button1 = element("button");
    			span2 = element("span");
    			create_component(fadooropen.$$.fragment);
    			t16 = text("\n            Log out");
    			t17 = space();
    			div8 = element("div");
    			img2 = element("img");
    			t18 = space();
    			img3 = element("img");
    			attr_dev(input, "id", "my-drawer-3");
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "class", "drawer-toggle");
    			add_location(input, file$1, 10, 2, 454);
    			attr_dev(div0, "class", "flex-1");
    			add_location(div0, file$1, 12, 4, 581);
    			attr_dev(div1, "class", "flex flex-col drawer-content lg:!z-[1000]");
    			add_location(div1, file$1, 11, 2, 521);
    			attr_dev(label, "for", "my-drawer-3");
    			attr_dev(label, "class", "drawer-overlay");
    			add_location(label, file$1, 18, 4, 688);
    			if (!src_url_equal(img0.src, img0_src_value = "/rendered.svg")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Shipstone Labs");
    			attr_dev(img0, "class", "h-5 sm:h-7 md:h-10 w-auto pe-3 z-20");
    			add_location(img0, file$1, 26, 10, 1067);
    			attr_dev(div2, "class", "hidden dark:flex pl-4 flex-shrink-0");
    			add_location(div2, file$1, 25, 8, 1007);
    			if (!src_url_equal(img1.src, img1_src_value = "/rendered-light.svg")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Shipstone Labs");
    			attr_dev(img1, "class", "h-5 sm:h-7 md:h-10 w-auto pe-3 z-20");
    			add_location(img1, file$1, 33, 10, 1284);
    			attr_dev(div3, "class", "pl-4 dark:hidden flex-shrink-0");
    			add_location(div3, file$1, 32, 8, 1229);
    			attr_dev(div4, "class", "sticky h-16 py-4 pl-5 text-2xl font-bold border-b border-base-300 text-primary dark:text-white");
    			add_location(div4, file$1, 22, 6, 875);
    			attr_dev(div5, "class", "pl-4");
    			add_location(div5, file$1, 41, 8, 1494);
    			add_location(small, file$1, 42, 26, 1557);
    			add_location(title, file$1, 42, 266, 1797);
    			attr_dev(path, "id", "copy-Filled-2");
    			attr_dev(path, "data-name", "copy-Filled");
    			attr_dev(path, "fill", "currentColor");
    			attr_dev(path, "d", "M11,19.5h5.7A3.978,3.978,0,0,1,13,22H6a4,4,0,0,1-4-4V10A4.007,4.007,0,0,1,5.5,6.03V14A5.51,5.51,0,0,0,11,19.5ZM19.5,6.25h2.12A1.638,1.638,0,0,0,21.41,6L18,2.59a1.156,1.156,0,0,0-.25-.2V4.5A1.758,1.758,0,0,0,19.5,6.25Zm0,1.5A3.256,3.256,0,0,1,16.25,4.5V2H11A4,4,0,0,0,7,6v8a4,4,0,0,0,4,4h7a4,4,0,0,0,4-4V7.75Z");
    			add_location(path, file$1, 42, 305, 1836);
    			attr_dev(g, "id", "copy-Filled");
    			add_location(g, file$1, 42, 285, 1816);
    			attr_dev(svg, "width", "18px");
    			attr_dev(svg, "height", "18px");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "id", "magicoon-Filled");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$1, 42, 158, 1689);
    			add_location(button0, file$1, 42, 84, 1615);
    			attr_dev(div6, "class", "pl-4");
    			add_location(div6, file$1, 42, 8, 1539);
    			attr_dev(div7, "class", "border-b");
    			add_location(div7, file$1, 40, 6, 1463);
    			attr_dev(span0, "class", "w-6 h-6 p-1 mr-2");
    			add_location(span0, file$1, 49, 12, 2405);
    			attr_dev(a0, "href", "/");
    			add_location(a0, file$1, 48, 10, 2380);
    			add_location(li0, file$1, 47, 8, 2365);
    			attr_dev(span1, "class", "w-6 h-6 p-1 mr-2");
    			add_location(span1, file$1, 57, 12, 2593);
    			attr_dev(a1, "href", "/notes");
    			add_location(a1, file$1, 56, 10, 2563);
    			add_location(li1, file$1, 55, 8, 2548);
    			attr_dev(li2, "class", "flex-1");
    			add_location(li2, file$1, 63, 8, 2732);
    			attr_dev(span2, "class", "w-6 h-6 p-1 mr-2");
    			add_location(span2, file$1, 66, 12, 2824);
    			add_location(button1, file$1, 65, 10, 2777);
    			add_location(li3, file$1, 64, 8, 2762);
    			attr_dev(ul, "class", "p-4 overflow-y-auto menu w-full bg-base-100 flex-1 flex flex-col");
    			add_location(ul, file$1, 44, 6, 2264);
    			if (!src_url_equal(img2.src, img2_src_value = "/img/ic-badge-powered-by-crypto_transparent-white-text.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "Powered by the Internet Computer");
    			attr_dev(img2, "class", "hidden dark:inline ");
    			add_location(img2, file$1, 74, 8, 3009);
    			if (!src_url_equal(img3.src, img3_src_value = "/img/ic-badge-powered-by-crypto_transparent-dark-text.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "Powered by the Internet Computer");
    			attr_dev(img3, "class", "dark:hidden inline ");
    			add_location(img3, file$1, 79, 8, 3195);
    			attr_dev(div8, "class", "px-5 pb-4");
    			add_location(div8, file$1, 73, 6, 2977);
    			attr_dev(aside, "class", "flex flex-col justify-between border-r border-base-300 bg-base-100 text-base-content w-64 sm:w-80 ");
    			add_location(aside, file$1, 19, 4, 743);
    			attr_dev(div9, "class", "drawer-side");
    			add_location(div9, file$1, 17, 2, 658);
    			attr_dev(div10, "class", "bg-white dark:bg-base-200 drawer drawer-mobile min-h-screen");
    			add_location(div10, file$1, 9, 0, 378);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, input);
    			append_dev(div10, t0);
    			append_dev(div10, div1);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div1, t1);
    			mount_component(disclaimer, div1, null);
    			append_dev(div10, t2);
    			append_dev(div10, div9);
    			append_dev(div9, label);
    			append_dev(div9, t3);
    			append_dev(div9, aside);
    			append_dev(aside, div4);
    			append_dev(div4, div2);
    			append_dev(div2, img0);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			append_dev(div3, img1);
    			append_dev(aside, t5);
    			append_dev(aside, div7);
    			append_dev(div7, div5);
    			append_dev(div7, t7);
    			append_dev(div7, div6);
    			append_dev(div6, small);
    			append_dev(small, t8);
    			append_dev(div6, button0);
    			append_dev(button0, svg);
    			append_dev(svg, title);
    			append_dev(title, t9);
    			append_dev(svg, g);
    			append_dev(g, path);
    			append_dev(aside, t10);
    			append_dev(aside, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a0);
    			append_dev(a0, span0);
    			mount_component(faplussquare, span0, null);
    			append_dev(a0, t11);
    			append_dev(ul, t12);
    			append_dev(ul, li1);
    			append_dev(li1, a1);
    			append_dev(a1, span1);
    			mount_component(fabook, span1, null);
    			append_dev(a1, t13);
    			append_dev(ul, t14);
    			append_dev(ul, li2);
    			append_dev(ul, t15);
    			append_dev(ul, li3);
    			append_dev(li3, button1);
    			append_dev(button1, span2);
    			mount_component(fadooropen, span2, null);
    			append_dev(button1, t16);
    			append_dev(aside, t17);
    			append_dev(aside, div8);
    			append_dev(div8, img2);
    			append_dev(div8, t18);
    			append_dev(div8, img3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(copy_action = copy.call(null, button0, /*$auth*/ ctx[0].client.getIdentity().getPrincipal().toString())),
    					listen_dev(button1, "click", /*click_handler*/ ctx[3], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}

    			if ((!current || dirty & /*$auth*/ 1) && t8_value !== (t8_value = /*$auth*/ ctx[0].client.getIdentity().getPrincipal() + "")) set_data_dev(t8, t8_value);
    			if (copy_action && is_function(copy_action.update) && dirty & /*$auth*/ 1) copy_action.update.call(null, /*$auth*/ ctx[0].client.getIdentity().getPrincipal().toString());
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(disclaimer.$$.fragment, local);
    			transition_in(faplussquare.$$.fragment, local);
    			transition_in(fabook.$$.fragment, local);
    			transition_in(fadooropen.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(disclaimer.$$.fragment, local);
    			transition_out(faplussquare.$$.fragment, local);
    			transition_out(fabook.$$.fragment, local);
    			transition_out(fadooropen.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			if (default_slot) default_slot.d(detaching);
    			destroy_component(disclaimer);
    			destroy_component(faplussquare);
    			destroy_component(fabook);
    			destroy_component(fadooropen);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $auth;
    	validate_store(auth, 'auth');
    	component_subscribe($$self, auth, $$value => $$invalidate(0, $auth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SidebarLayout', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SidebarLayout> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => logout();

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		auth,
    		logout,
    		FaPlusSquare,
    		FaBook,
    		FaDoorOpen,
    		Disclaimer,
    		copy,
    		$auth
    	});

    	return [$auth, $$scope, slots, click_handler];
    }

    class SidebarLayout extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SidebarLayout",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    // (22:0) <SidebarLayout>
    function create_default_slot(ctx) {
    	let router;
    	let current;

    	router = new Router({
    			props: { routes: /*routes*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(router.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(22:0) <SidebarLayout>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let sidebarlayout;
    	let current;

    	sidebarlayout = new SidebarLayout({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(sidebarlayout.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(sidebarlayout, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const sidebarlayout_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				sidebarlayout_changes.$$scope = { dirty, ctx };
    			}

    			sidebarlayout.$set(sidebarlayout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sidebarlayout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sidebarlayout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(sidebarlayout, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LayoutAuthenticated', slots, []);

    	const routes = [
    		{ name: '/', component: NewNote },
    		{
    			name: '/notes',
    			nestedRoutes: [
    				{ name: 'index', component: Notes },
    				{ name: 'edit/:id', component: EditNote }
    			]
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LayoutAuthenticated> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Router,
    		EditNote,
    		NewNote,
    		Notes,
    		SidebarLayout,
    		routes
    	});

    	return [routes];
    }

    class LayoutAuthenticated extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LayoutAuthenticated",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    const file = "src/frontend/src/components/Notifications.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	return child_ctx;
    }

    // (11:2) {#each $notifications as n (n.id)}
    function create_each_block(key_1, ctx) {
    	let div;
    	let p;
    	let t0_value = /*n*/ ctx[2].message + "";
    	let t0;
    	let t1;
    	let div_class_value;
    	let div_intro;
    	let div_outro;
    	let current;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			add_location(p, file, 16, 6, 487);
    			attr_dev(div, "class", div_class_value = "alert " + /*classMap*/ ctx[1][/*n*/ ctx[2].type] + " bg-opacity-100 text-white");
    			add_location(div, file, 11, 4, 348);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, t0);
    			append_dev(div, t1);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*$notifications*/ 1) && t0_value !== (t0_value = /*n*/ ctx[2].message + "")) set_data_dev(t0, t0_value);

    			if (!current || dirty & /*$notifications*/ 1 && div_class_value !== (div_class_value = "alert " + /*classMap*/ ctx[1][/*n*/ ctx[2].type] + " bg-opacity-100 text-white")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!current) return;
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fly, { x: 100, duration: 200 });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, {});
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(11:2) {#each $notifications as n (n.id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*$notifications*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*n*/ ctx[2].id;
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "absolute right-4 bottom-4 flex flex-col max-w-xs space-y-4");
    			add_location(div, file, 9, 0, 234);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*classMap, $notifications*/ 3) {
    				each_value = /*$notifications*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $notifications;
    	validate_store(notifications, 'notifications');
    	component_subscribe($$self, notifications, $$value => $$invalidate(0, $notifications = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Notifications', slots, []);

    	const classMap = {
    		info: 'alert-info',
    		error: 'alert-error',
    		success: 'alert-success'
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Notifications> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		notifications,
    		fly,
    		fade,
    		classMap,
    		$notifications
    	});

    	return [$notifications, classMap];
    }

    class Notifications extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notifications",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    // (9:0) {:else}
    function create_else_block(ctx) {
    	let hero;
    	let current;

    	hero = new Hero({
    			props: { auth: /*$auth*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(hero.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(hero, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const hero_changes = {};
    			if (dirty & /*$auth*/ 1) hero_changes.auth = /*$auth*/ ctx[0];
    			hero.$set(hero_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(hero.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(hero.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(hero, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(9:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (7:0) {#if $auth.state === 'initialized'}
    function create_if_block(ctx) {
    	let layoutauthenticated;
    	let current;
    	layoutauthenticated = new LayoutAuthenticated({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(layoutauthenticated.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(layoutauthenticated, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layoutauthenticated.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layoutauthenticated.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(layoutauthenticated, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(7:0) {#if $auth.state === 'initialized'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let t;
    	let notifications;
    	let current;
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$auth*/ ctx[0].state === 'initialized') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	notifications = new Notifications({ $$inline: true });

    	const block = {
    		c: function create() {
    			if_block.c();
    			t = space();
    			create_component(notifications.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(notifications, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(t.parentNode, t);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(notifications.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(notifications.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(notifications, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $auth;
    	validate_store(auth, 'auth');
    	component_subscribe($$self, auth, $$value => $$invalidate(0, $auth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Hero,
    		LayoutAuthenticated,
    		Notifications,
    		auth,
    		$auth
    	});

    	return [$auth];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$3(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    function _loadWasmModule (sync, filepath, src, imports) {
      function _instantiateOrCompile(source, imports, stream) {
        var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;
        var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;

        if (imports) {
          return instantiateFunc(source, imports)
        } else {
          return compileFunc(source)
        }
      }

      
    var buf = null;
    var isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
    if (isNode) {
      
    buf = Buffer.from(src, 'base64');

    } else {
      
    var raw = globalThis.atob(src);
    var rawLength = raw.length;
    buf = new Uint8Array(new ArrayBuffer(rawLength));
    for(var i = 0; i < rawLength; i++) {
       buf[i] = raw.charCodeAt(i);
    }

    }


      if(sync) {
        var mod = new WebAssembly.Module(buf);
        return imports ? new WebAssembly.Instance(mod, imports) : mod
      } else {
        return _instantiateOrCompile(buf, imports, false)
      }
    }

    function vetkd_wasm(imports){return _loadWasmModule(0, null, '', imports)}

    const init = async () => {
        // Once the wasm is initialized in this way, i.e., with the defaultExport of the respective .js file,
        // the (non-defaultExport-ed) methods of the .js file can be imported and used.
        // See also https://github.com/rollup/plugins/tree/master/packages/wasm#using-with-wasm-bindgen-and-wasm-pack
        await init$1(await vetkd_wasm());
        new App({
            target: document.body,
        });
    };
    init();

})();
//# sourceMappingURL=main.js.map
